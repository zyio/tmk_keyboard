   1               		.file	"twimaster.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.i2c_init,"ax",@progbits
  11               	.global	i2c_init
  13               	i2c_init:
  14               	.LFB0:
  15               		.file 1 "twimaster.c"
   1:twimaster.c   **** /*************************************************************************
   2:twimaster.c   **** * Title:    I2C master library using hardware TWI interface
   3:twimaster.c   **** * Author:   Peter Fleury <pfleury@gmx.ch>  http://jump.to/fleury
   4:twimaster.c   **** * File:     $Id: twimaster.c,v 1.3 2005/07/02 11:14:21 Peter Exp $
   5:twimaster.c   **** * Software: AVR-GCC 3.4.3 / avr-libc 1.2.3
   6:twimaster.c   **** * Target:   any AVR device with hardware TWI 
   7:twimaster.c   **** * Usage:    API compatible with I2C Software Library i2cmaster.h
   8:twimaster.c   **** **************************************************************************/
   9:twimaster.c   **** #include <inttypes.h>
  10:twimaster.c   **** #include <compat/twi.h>
  11:twimaster.c   **** 
  12:twimaster.c   **** #include <i2cmaster.h>
  13:twimaster.c   **** 
  14:twimaster.c   **** 
  15:twimaster.c   **** /* define CPU frequency in Mhz here if not defined in Makefile */
  16:twimaster.c   **** #ifndef F_CPU
  17:twimaster.c   **** #define F_CPU 16000000UL
  18:twimaster.c   **** #endif
  19:twimaster.c   **** 
  20:twimaster.c   **** /* I2C clock in Hz */
  21:twimaster.c   **** #define SCL_CLOCK  400000L
  22:twimaster.c   **** 
  23:twimaster.c   **** 
  24:twimaster.c   **** /*************************************************************************
  25:twimaster.c   ****  Initialization of the I2C bus interface. Need to be called only once
  26:twimaster.c   **** *************************************************************************/
  27:twimaster.c   **** void i2c_init(void)
  28:twimaster.c   **** {
  16               		.loc 1 28 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  29:twimaster.c   ****   /* initialize TWI clock
  30:twimaster.c   ****    * minimal values in Bit Rate Register (TWBR) and minimal Prescaler
  31:twimaster.c   ****    * bits in the TWI Status Register should give us maximal possible
  32:twimaster.c   ****    * I2C bus speed - about 444 kHz
  33:twimaster.c   ****    *
  34:twimaster.c   ****    * for more details, see 20.5.2 in ATmega16/32 secification
  35:twimaster.c   ****    */
  36:twimaster.c   ****   
  37:twimaster.c   ****   TWSR = 0;     /* no prescaler */
  22               		.loc 1 37 0
  23 0000 1092 B900 		sts 185,__zero_reg__
  38:twimaster.c   ****   TWBR = 10;    /* must be >= 10 for stable operation */
  24               		.loc 1 38 0
  25 0004 8AE0      		ldi r24,lo8(10)
  26 0006 8093 B800 		sts 184,r24
  27 000a 0895      		ret
  28               		.cfi_endproc
  29               	.LFE0:
  31               		.section	.text.i2c_start,"ax",@progbits
  32               	.global	i2c_start
  34               	i2c_start:
  35               	.LFB1:
  39:twimaster.c   **** 
  40:twimaster.c   **** }/* i2c_init */
  41:twimaster.c   **** 
  42:twimaster.c   **** 
  43:twimaster.c   **** /*************************************************************************	
  44:twimaster.c   ****   Issues a start condition and sends address and transfer direction.
  45:twimaster.c   ****   return 0 = device accessible, 1= failed to access device
  46:twimaster.c   **** *************************************************************************/
  47:twimaster.c   **** unsigned char i2c_start(unsigned char address)
  48:twimaster.c   **** {
  36               		.loc 1 48 0
  37               		.cfi_startproc
  38               	.LVL0:
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  49:twimaster.c   ****     uint8_t   twst;
  50:twimaster.c   **** 
  51:twimaster.c   **** 	// send START condition
  52:twimaster.c   **** 	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  43               		.loc 1 52 0
  44 0000 94EA      		ldi r25,lo8(-92)
  45 0002 9093 BC00 		sts 188,r25
  46               	.L4:
  53:twimaster.c   **** 
  54:twimaster.c   **** 	// wait until transmission completed
  55:twimaster.c   **** 	while(!(TWCR & (1<<TWINT)));
  47               		.loc 1 55 0 discriminator 1
  48 0006 9091 BC00 		lds r25,188
  49 000a 97FF      		sbrs r25,7
  50 000c 00C0      		rjmp .L4
  56:twimaster.c   **** 
  57:twimaster.c   **** 	// check value of TWI Status Register. Mask prescaler bits.
  58:twimaster.c   **** 	twst = TW_STATUS & 0xF8;
  51               		.loc 1 58 0
  52 000e 9091 B900 		lds r25,185
  53 0012 987F      		andi r25,lo8(-8)
  54               	.LVL1:
  59:twimaster.c   **** 	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
  55               		.loc 1 59 0
  56 0014 9830      		cpi r25,lo8(8)
  57 0016 01F0      		breq .L5
  58               		.loc 1 59 0 is_stmt 0 discriminator 1
  59 0018 9031      		cpi r25,lo8(16)
  60 001a 01F0      		breq .L5
  61               	.LVL2:
  62               	.L9:
  63               		.loc 1 59 0
  64 001c 81E0      		ldi r24,lo8(1)
  65 001e 0895      		ret
  66               	.LVL3:
  67               	.L5:
  60:twimaster.c   **** 
  61:twimaster.c   **** 	// send device address
  62:twimaster.c   **** 	TWDR = address;
  68               		.loc 1 62 0 is_stmt 1
  69 0020 8093 BB00 		sts 187,r24
  63:twimaster.c   **** 	TWCR = (1<<TWINT) | (1<<TWEN);
  70               		.loc 1 63 0
  71 0024 84E8      		ldi r24,lo8(-124)
  72               	.LVL4:
  73 0026 8093 BC00 		sts 188,r24
  74               	.LVL5:
  75               	.L8:
  64:twimaster.c   **** 
  65:twimaster.c   **** 	// wail until transmission completed and ACK/NACK has been received
  66:twimaster.c   **** 	while(!(TWCR & (1<<TWINT)));
  76               		.loc 1 66 0 discriminator 1
  77 002a 8091 BC00 		lds r24,188
  78 002e 87FF      		sbrs r24,7
  79 0030 00C0      		rjmp .L8
  67:twimaster.c   **** 
  68:twimaster.c   **** 	// check value of TWI Status Register. Mask prescaler bits.
  69:twimaster.c   **** 	twst = TW_STATUS & 0xF8;
  80               		.loc 1 69 0
  81 0032 8091 B900 		lds r24,185
  82               	.LVL6:
  83 0036 887F      		andi r24,lo8(-8)
  84               	.LVL7:
  70:twimaster.c   **** 	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
  85               		.loc 1 70 0
  86 0038 8831      		cpi r24,lo8(24)
  87 003a 01F0      		breq .L10
  88               		.loc 1 70 0 is_stmt 0 discriminator 1
  89 003c 8034      		cpi r24,lo8(64)
  90 003e 01F4      		brne .L9
  91               	.L10:
  71:twimaster.c   **** 
  72:twimaster.c   **** 	return 0;
  92               		.loc 1 72 0 is_stmt 1
  93 0040 80E0      		ldi r24,0
  94               	.LVL8:
  73:twimaster.c   **** 
  74:twimaster.c   **** }/* i2c_start */
  95               		.loc 1 74 0
  96 0042 0895      		ret
  97               		.cfi_endproc
  98               	.LFE1:
 100               		.section	.text.i2c_start_wait,"ax",@progbits
 101               	.global	i2c_start_wait
 103               	i2c_start_wait:
 104               	.LFB2:
  75:twimaster.c   **** 
  76:twimaster.c   **** 
  77:twimaster.c   **** /*************************************************************************
  78:twimaster.c   ****  Issues a start condition and sends address and transfer direction.
  79:twimaster.c   ****  If device is busy, use ack polling to wait until device is ready
  80:twimaster.c   ****  
  81:twimaster.c   ****  Input:   address and transfer direction of I2C device
  82:twimaster.c   **** *************************************************************************/
  83:twimaster.c   **** void i2c_start_wait(unsigned char address)
  84:twimaster.c   **** {
 105               		.loc 1 84 0
 106               		.cfi_startproc
 107               	.LVL9:
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
  85:twimaster.c   ****     uint8_t   twst;
  86:twimaster.c   **** 
  87:twimaster.c   **** 
  88:twimaster.c   ****     while ( 1 )
  89:twimaster.c   ****     {
  90:twimaster.c   **** 	    // send START condition
  91:twimaster.c   **** 	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 112               		.loc 1 91 0
 113 0000 24EA      		ldi r18,lo8(-92)
  92:twimaster.c   ****     
  93:twimaster.c   ****     	// wait until transmission completed
  94:twimaster.c   ****     	while(!(TWCR & (1<<TWINT)));
  95:twimaster.c   ****     
  96:twimaster.c   ****     	// check value of TWI Status Register. Mask prescaler bits.
  97:twimaster.c   ****     	twst = TW_STATUS & 0xF8;
  98:twimaster.c   ****     	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
  99:twimaster.c   ****     
 100:twimaster.c   ****     	// send device address
 101:twimaster.c   ****     	TWDR = address;
 102:twimaster.c   ****     	TWCR = (1<<TWINT) | (1<<TWEN);
 114               		.loc 1 102 0
 115 0002 34E8      		ldi r19,lo8(-124)
 103:twimaster.c   ****     
 104:twimaster.c   ****     	// wail until transmission completed
 105:twimaster.c   ****     	while(!(TWCR & (1<<TWINT)));
 106:twimaster.c   ****     
 107:twimaster.c   ****     	// check value of TWI Status Register. Mask prescaler bits.
 108:twimaster.c   ****     	twst = TW_STATUS & 0xF8;
 109:twimaster.c   ****     	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 110:twimaster.c   ****     	{    	    
 111:twimaster.c   ****     	    /* device busy, send stop condition to terminate write operation */
 112:twimaster.c   **** 	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 116               		.loc 1 112 0
 117 0004 44E9      		ldi r20,lo8(-108)
 118               	.L20:
  91:twimaster.c   ****     
 119               		.loc 1 91 0
 120 0006 2093 BC00 		sts 188,r18
 121               	.L19:
  94:twimaster.c   ****     
 122               		.loc 1 94 0 discriminator 1
 123 000a 9091 BC00 		lds r25,188
 124 000e 97FF      		sbrs r25,7
 125 0010 00C0      		rjmp .L19
  97:twimaster.c   ****     	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 126               		.loc 1 97 0
 127 0012 9091 B900 		lds r25,185
 128 0016 987F      		andi r25,lo8(-8)
 129               	.LVL10:
  98:twimaster.c   ****     
 130               		.loc 1 98 0
 131 0018 9830      		cpi r25,lo8(8)
 132 001a 01F0      		breq .L22
  98:twimaster.c   ****     
 133               		.loc 1 98 0 is_stmt 0 discriminator 1
 134 001c 9031      		cpi r25,lo8(16)
 135 001e 01F4      		brne .L20
 136               	.L22:
 101:twimaster.c   ****     	TWCR = (1<<TWINT) | (1<<TWEN);
 137               		.loc 1 101 0 is_stmt 1
 138 0020 8093 BB00 		sts 187,r24
 102:twimaster.c   ****     
 139               		.loc 1 102 0
 140 0024 3093 BC00 		sts 188,r19
 141               	.LVL11:
 142               	.L25:
 105:twimaster.c   ****     
 143               		.loc 1 105 0 discriminator 1
 144 0028 9091 BC00 		lds r25,188
 145 002c 97FF      		sbrs r25,7
 146 002e 00C0      		rjmp .L25
 108:twimaster.c   ****     	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 147               		.loc 1 108 0
 148 0030 9091 B900 		lds r25,185
 149 0034 987F      		andi r25,lo8(-8)
 150               	.LVL12:
 109:twimaster.c   ****     	{    	    
 151               		.loc 1 109 0
 152 0036 9032      		cpi r25,lo8(32)
 153 0038 01F0      		breq .L26
 109:twimaster.c   ****     	{    	    
 154               		.loc 1 109 0 is_stmt 0 discriminator 1
 155 003a 9835      		cpi r25,lo8(88)
 156 003c 01F4      		brne .L18
 157               	.L26:
 158               		.loc 1 112 0 is_stmt 1
 159 003e 4093 BC00 		sts 188,r20
 160               	.LVL13:
 161               	.L28:
 113:twimaster.c   **** 	        
 114:twimaster.c   **** 	        // wait until stop condition is executed and bus released
 115:twimaster.c   **** 	        while(TWCR & (1<<TWSTO));
 162               		.loc 1 115 0 discriminator 1
 163 0042 9091 BC00 		lds r25,188
 164 0046 94FD      		sbrc r25,4
 165 0048 00C0      		rjmp .L28
 166 004a 00C0      		rjmp .L20
 167               	.LVL14:
 168               	.L18:
 169 004c 0895      		ret
 170               		.cfi_endproc
 171               	.LFE2:
 173               		.section	.text.i2c_rep_start,"ax",@progbits
 174               	.global	i2c_rep_start
 176               	i2c_rep_start:
 177               	.LFB3:
 116:twimaster.c   **** 	        
 117:twimaster.c   ****     	    continue;
 118:twimaster.c   ****     	}
 119:twimaster.c   ****     	//if( twst != TW_MT_SLA_ACK) return 1;
 120:twimaster.c   ****     	break;
 121:twimaster.c   ****      }
 122:twimaster.c   **** 
 123:twimaster.c   **** }/* i2c_start_wait */
 124:twimaster.c   **** 
 125:twimaster.c   **** 
 126:twimaster.c   **** /*************************************************************************
 127:twimaster.c   ****  Issues a repeated start condition and sends address and transfer direction 
 128:twimaster.c   **** 
 129:twimaster.c   ****  Input:   address and transfer direction of I2C device
 130:twimaster.c   ****  
 131:twimaster.c   ****  Return:  0 device accessible
 132:twimaster.c   ****           1 failed to access device
 133:twimaster.c   **** *************************************************************************/
 134:twimaster.c   **** unsigned char i2c_rep_start(unsigned char address)
 135:twimaster.c   **** {
 178               		.loc 1 135 0
 179               		.cfi_startproc
 180               	.LVL15:
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 0 */
 184               	.L__stack_usage = 0
 136:twimaster.c   ****     return i2c_start( address );
 185               		.loc 1 136 0
 186 0000 0C94 0000 		jmp i2c_start
 187               	.LVL16:
 188               		.cfi_endproc
 189               	.LFE3:
 191               		.section	.text.i2c_stop,"ax",@progbits
 192               	.global	i2c_stop
 194               	i2c_stop:
 195               	.LFB4:
 137:twimaster.c   **** 
 138:twimaster.c   **** }/* i2c_rep_start */
 139:twimaster.c   **** 
 140:twimaster.c   **** 
 141:twimaster.c   **** /*************************************************************************
 142:twimaster.c   ****  Terminates the data transfer and releases the I2C bus
 143:twimaster.c   **** *************************************************************************/
 144:twimaster.c   **** void i2c_stop(void)
 145:twimaster.c   **** {
 196               		.loc 1 145 0
 197               		.cfi_startproc
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 0 */
 201               	.L__stack_usage = 0
 146:twimaster.c   ****     /* send stop condition */
 147:twimaster.c   **** 	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 202               		.loc 1 147 0
 203 0000 84E9      		ldi r24,lo8(-108)
 204 0002 8093 BC00 		sts 188,r24
 205               	.L41:
 148:twimaster.c   **** 	
 149:twimaster.c   **** 	// wait until stop condition is executed and bus released
 150:twimaster.c   **** 	while(TWCR & (1<<TWSTO));
 206               		.loc 1 150 0 discriminator 1
 207 0006 8091 BC00 		lds r24,188
 208 000a 84FD      		sbrc r24,4
 209 000c 00C0      		rjmp .L41
 210               	/* epilogue start */
 151:twimaster.c   **** 
 152:twimaster.c   **** }/* i2c_stop */
 211               		.loc 1 152 0
 212 000e 0895      		ret
 213               		.cfi_endproc
 214               	.LFE4:
 216               		.section	.text.i2c_write,"ax",@progbits
 217               	.global	i2c_write
 219               	i2c_write:
 220               	.LFB5:
 153:twimaster.c   **** 
 154:twimaster.c   **** 
 155:twimaster.c   **** /*************************************************************************
 156:twimaster.c   ****   Send one byte to I2C device
 157:twimaster.c   ****   
 158:twimaster.c   ****   Input:    byte to be transfered
 159:twimaster.c   ****   Return:   0 write successful 
 160:twimaster.c   ****             1 write failed
 161:twimaster.c   **** *************************************************************************/
 162:twimaster.c   **** unsigned char i2c_write( unsigned char data )
 163:twimaster.c   **** {	
 221               		.loc 1 163 0
 222               		.cfi_startproc
 223               	.LVL17:
 224               	/* prologue: function */
 225               	/* frame size = 0 */
 226               	/* stack size = 0 */
 227               	.L__stack_usage = 0
 164:twimaster.c   ****     uint8_t   twst;
 165:twimaster.c   ****     
 166:twimaster.c   **** 	// send data to the previously addressed device
 167:twimaster.c   **** 	TWDR = data;
 228               		.loc 1 167 0
 229 0000 8093 BB00 		sts 187,r24
 168:twimaster.c   **** 	TWCR = (1<<TWINT) | (1<<TWEN);
 230               		.loc 1 168 0
 231 0004 84E8      		ldi r24,lo8(-124)
 232               	.LVL18:
 233 0006 8093 BC00 		sts 188,r24
 234               	.LVL19:
 235               	.L44:
 169:twimaster.c   **** 
 170:twimaster.c   **** 	// wait until transmission completed
 171:twimaster.c   **** 	while(!(TWCR & (1<<TWINT)));
 236               		.loc 1 171 0 discriminator 1
 237 000a 8091 BC00 		lds r24,188
 238 000e 87FF      		sbrs r24,7
 239 0010 00C0      		rjmp .L44
 172:twimaster.c   **** 
 173:twimaster.c   **** 	// check value of TWI Status Register. Mask prescaler bits
 174:twimaster.c   **** 	twst = TW_STATUS & 0xF8;
 240               		.loc 1 174 0
 241 0012 9091 B900 		lds r25,185
 242               	.LVL20:
 243 0016 987F      		andi r25,lo8(-8)
 244               	.LVL21:
 175:twimaster.c   **** 	if( twst != TW_MT_DATA_ACK) return 1;
 245               		.loc 1 175 0
 246 0018 81E0      		ldi r24,lo8(1)
 247 001a 9832      		cpi r25,lo8(40)
 248 001c 01F4      		brne .L45
 249 001e 80E0      		ldi r24,0
 250               	.L45:
 176:twimaster.c   **** 	return 0;
 177:twimaster.c   **** 
 178:twimaster.c   **** }/* i2c_write */
 251               		.loc 1 178 0
 252 0020 0895      		ret
 253               		.cfi_endproc
 254               	.LFE5:
 256               		.section	.text.i2c_readAck,"ax",@progbits
 257               	.global	i2c_readAck
 259               	i2c_readAck:
 260               	.LFB6:
 179:twimaster.c   **** 
 180:twimaster.c   **** 
 181:twimaster.c   **** /*************************************************************************
 182:twimaster.c   ****  Read one byte from the I2C device, request more data from device 
 183:twimaster.c   ****  
 184:twimaster.c   ****  Return:  byte read from I2C device
 185:twimaster.c   **** *************************************************************************/
 186:twimaster.c   **** unsigned char i2c_readAck(void)
 187:twimaster.c   **** {
 261               		.loc 1 187 0
 262               		.cfi_startproc
 263               	/* prologue: function */
 264               	/* frame size = 0 */
 265               	/* stack size = 0 */
 266               	.L__stack_usage = 0
 188:twimaster.c   **** 	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 267               		.loc 1 188 0
 268 0000 84EC      		ldi r24,lo8(-60)
 269 0002 8093 BC00 		sts 188,r24
 270               	.L48:
 189:twimaster.c   **** 	while(!(TWCR & (1<<TWINT)));    
 271               		.loc 1 189 0 discriminator 1
 272 0006 8091 BC00 		lds r24,188
 273 000a 87FF      		sbrs r24,7
 274 000c 00C0      		rjmp .L48
 190:twimaster.c   **** 
 191:twimaster.c   ****     return TWDR;
 275               		.loc 1 191 0
 276 000e 8091 BB00 		lds r24,187
 192:twimaster.c   **** 
 193:twimaster.c   **** }/* i2c_readAck */
 277               		.loc 1 193 0
 278 0012 0895      		ret
 279               		.cfi_endproc
 280               	.LFE6:
 282               		.section	.text.i2c_readNak,"ax",@progbits
 283               	.global	i2c_readNak
 285               	i2c_readNak:
 286               	.LFB7:
 194:twimaster.c   **** 
 195:twimaster.c   **** 
 196:twimaster.c   **** /*************************************************************************
 197:twimaster.c   ****  Read one byte from the I2C device, read is followed by a stop condition 
 198:twimaster.c   ****  
 199:twimaster.c   ****  Return:  byte read from I2C device
 200:twimaster.c   **** *************************************************************************/
 201:twimaster.c   **** unsigned char i2c_readNak(void)
 202:twimaster.c   **** {
 287               		.loc 1 202 0
 288               		.cfi_startproc
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
 203:twimaster.c   **** 	TWCR = (1<<TWINT) | (1<<TWEN);
 293               		.loc 1 203 0
 294 0000 84E8      		ldi r24,lo8(-124)
 295 0002 8093 BC00 		sts 188,r24
 296               	.L51:
 204:twimaster.c   **** 	while(!(TWCR & (1<<TWINT)));
 297               		.loc 1 204 0 discriminator 1
 298 0006 8091 BC00 		lds r24,188
 299 000a 87FF      		sbrs r24,7
 300 000c 00C0      		rjmp .L51
 205:twimaster.c   **** 	
 206:twimaster.c   ****     return TWDR;
 301               		.loc 1 206 0
 302 000e 8091 BB00 		lds r24,187
 207:twimaster.c   **** 
 208:twimaster.c   **** }/* i2c_readNak */
 303               		.loc 1 208 0
 304 0012 0895      		ret
 305               		.cfi_endproc
 306               	.LFE7:
 308               		.text
 309               	.Letext0:
 310               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 twimaster.c
     /tmp/cc9QGpNT.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc9QGpNT.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc9QGpNT.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc9QGpNT.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc9QGpNT.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc9QGpNT.s:13     .text.i2c_init:0000000000000000 i2c_init
     /tmp/cc9QGpNT.s:34     .text.i2c_start:0000000000000000 i2c_start
     /tmp/cc9QGpNT.s:103    .text.i2c_start_wait:0000000000000000 i2c_start_wait
     /tmp/cc9QGpNT.s:176    .text.i2c_rep_start:0000000000000000 i2c_rep_start
     /tmp/cc9QGpNT.s:194    .text.i2c_stop:0000000000000000 i2c_stop
     /tmp/cc9QGpNT.s:219    .text.i2c_write:0000000000000000 i2c_write
     /tmp/cc9QGpNT.s:259    .text.i2c_readAck:0000000000000000 i2c_readAck
     /tmp/cc9QGpNT.s:285    .text.i2c_readNak:0000000000000000 i2c_readNak

NO UNDEFINED SYMBOLS
