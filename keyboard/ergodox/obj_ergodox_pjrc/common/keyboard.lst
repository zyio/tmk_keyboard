   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_power_up,"ax",@progbits
  11               		.weak	matrix_power_up
  13               	matrix_power_up:
  14               	.LFB3:
  15               		.file 1 "../../common/keyboard.h"
   1:../../common/keyboard.h **** /*
   2:../../common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.h **** 
   4:../../common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.h **** (at your option) any later version.
   8:../../common/keyboard.h **** 
   9:../../common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.h **** GNU General Public License for more details.
  13:../../common/keyboard.h **** 
  14:../../common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.h **** */
  17:../../common/keyboard.h **** 
  18:../../common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../common/keyboard.h **** #define KEYBOARD_H
  20:../../common/keyboard.h **** 
  21:../../common/keyboard.h **** #include <stdbool.h>
  22:../../common/keyboard.h **** #include <stdint.h>
  23:../../common/keyboard.h **** 
  24:../../common/keyboard.h **** 
  25:../../common/keyboard.h **** #ifdef __cplusplus
  26:../../common/keyboard.h **** extern "C" {
  27:../../common/keyboard.h **** #endif
  28:../../common/keyboard.h **** 
  29:../../common/keyboard.h **** /* key matrix position */
  30:../../common/keyboard.h **** typedef struct {
  31:../../common/keyboard.h ****     uint8_t col;
  32:../../common/keyboard.h ****     uint8_t row;
  33:../../common/keyboard.h **** } keypos_t;
  34:../../common/keyboard.h **** 
  35:../../common/keyboard.h **** /* key event */
  36:../../common/keyboard.h **** typedef struct {
  37:../../common/keyboard.h ****     keypos_t key;
  38:../../common/keyboard.h ****     bool     pressed;
  39:../../common/keyboard.h ****     uint16_t time;
  40:../../common/keyboard.h **** } keyevent_t;
  41:../../common/keyboard.h **** 
  42:../../common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../common/keyboard.h **** 
  45:../../common/keyboard.h **** /* Rules for No Event:
  46:../../common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../common/keyboard.h ****  */
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  50:../../common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  51:../../common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
  52:../../common/keyboard.h **** 
  53:../../common/keyboard.h **** /* Tick event */
  54:../../common/keyboard.h **** #define TICK                    (keyevent_t){           \
  55:../../common/keyboard.h ****     .key = (keypos_t){ .row = 255, .col = 255 },           \
  56:../../common/keyboard.h ****     .pressed = false,                                   \
  57:../../common/keyboard.h ****     .time = (timer_read() | 1)                          \
  58:../../common/keyboard.h **** }
  59:../../common/keyboard.h **** 
  60:../../common/keyboard.h **** 
  61:../../common/keyboard.h **** void keyboard_init(void);
  62:../../common/keyboard.h **** void keyboard_task(void);
  63:../../common/keyboard.h **** void keyboard_set_leds(uint8_t leds);
  64:../../common/keyboard.h **** 
  65:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_up(void) {}
  16               		.loc 1 65 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE3:
  26               		.section	.text.matrix_power_down,"ax",@progbits
  27               		.weak	matrix_power_down
  29               	matrix_power_down:
  30               	.LFB4:
  66:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_down(void) {}
  31               		.loc 1 66 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  37 0000 0895      		ret
  38               		.cfi_endproc
  39               	.LFE4:
  41               		.section	.text.keyboard_init,"ax",@progbits
  42               	.global	keyboard_init
  44               	keyboard_init:
  45               	.LFB6:
  46               		.file 2 "../../common/keyboard.c"
   1:../../common/keyboard.c **** /*
   2:../../common/keyboard.c **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.c **** 
   4:../../common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.c **** (at your option) any later version.
   8:../../common/keyboard.c **** 
   9:../../common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.c **** GNU General Public License for more details.
  13:../../common/keyboard.c **** 
  14:../../common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.c **** */
  17:../../common/keyboard.c **** #include <stdint.h>
  18:../../common/keyboard.c **** #include "keyboard.h"
  19:../../common/keyboard.c **** #include "matrix.h"
  20:../../common/keyboard.c **** #include "keymap.h"
  21:../../common/keyboard.c **** #include "host.h"
  22:../../common/keyboard.c **** #include "led.h"
  23:../../common/keyboard.c **** #include "keycode.h"
  24:../../common/keyboard.c **** #include "timer.h"
  25:../../common/keyboard.c **** #include "print.h"
  26:../../common/keyboard.c **** #include "debug.h"
  27:../../common/keyboard.c **** #include "command.h"
  28:../../common/keyboard.c **** #include "util.h"
  29:../../common/keyboard.c **** #include "sendchar.h"
  30:../../common/keyboard.c **** #include "bootmagic.h"
  31:../../common/keyboard.c **** #include "eeconfig.h"
  32:../../common/keyboard.c **** #include "backlight.h"
  33:../../common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  34:../../common/keyboard.c **** #   include "mousekey.h"
  35:../../common/keyboard.c **** #endif
  36:../../common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  37:../../common/keyboard.c **** #   include "ps2_mouse.h"
  38:../../common/keyboard.c **** #endif
  39:../../common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  40:../../common/keyboard.c **** #include "serial_mouse.h"
  41:../../common/keyboard.c **** #endif
  42:../../common/keyboard.c **** 
  43:../../common/keyboard.c **** 
  44:../../common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  45:../../common/keyboard.c **** static bool has_ghost_in_row(uint8_t row)
  46:../../common/keyboard.c **** {
  47:../../common/keyboard.c ****     matrix_row_t matrix_row = matrix_get_row(row);
  48:../../common/keyboard.c ****     // No ghost exists when less than 2 keys are down on the row
  49:../../common/keyboard.c ****     if (((matrix_row - 1) & matrix_row) == 0)
  50:../../common/keyboard.c ****         return false;
  51:../../common/keyboard.c **** 
  52:../../common/keyboard.c ****     // Ghost occurs when the row shares column line with other row
  53:../../common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  54:../../common/keyboard.c ****         if (i != row && (matrix_get_row(i) & matrix_row))
  55:../../common/keyboard.c ****             return true;
  56:../../common/keyboard.c ****     }
  57:../../common/keyboard.c ****     return false;
  58:../../common/keyboard.c **** }
  59:../../common/keyboard.c **** #endif
  60:../../common/keyboard.c **** 
  61:../../common/keyboard.c **** 
  62:../../common/keyboard.c **** void keyboard_init(void)
  63:../../common/keyboard.c **** {
  47               		.loc 2 63 0
  48               		.cfi_startproc
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  64:../../common/keyboard.c ****     timer_init();
  53               		.loc 2 64 0
  54 0000 0E94 0000 		call timer_init
  55               	.LVL0:
  65:../../common/keyboard.c ****     matrix_init();
  56               		.loc 2 65 0
  57 0004 0E94 0000 		call matrix_init
  58               	.LVL1:
  66:../../common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  67:../../common/keyboard.c ****     ps2_mouse_init();
  68:../../common/keyboard.c **** #endif
  69:../../common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  70:../../common/keyboard.c ****     serial_mouse_init();
  71:../../common/keyboard.c **** #endif
  72:../../common/keyboard.c **** 
  73:../../common/keyboard.c **** 
  74:../../common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  75:../../common/keyboard.c ****     bootmagic();
  59               		.loc 2 75 0
  60 0008 0C94 0000 		jmp bootmagic
  61               	.LVL2:
  62               		.cfi_endproc
  63               	.LFE6:
  65               		.section	.text.keyboard_set_leds,"ax",@progbits
  66               	.global	keyboard_set_leds
  68               	keyboard_set_leds:
  69               	.LFB8:
  76:../../common/keyboard.c **** #endif
  77:../../common/keyboard.c **** 
  78:../../common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
  79:../../common/keyboard.c ****     backlight_init();
  80:../../common/keyboard.c **** #endif
  81:../../common/keyboard.c **** }
  82:../../common/keyboard.c **** 
  83:../../common/keyboard.c **** /*
  84:../../common/keyboard.c ****  * Do keyboard routine jobs: scan mantrix, light LEDs, ...
  85:../../common/keyboard.c ****  * This is repeatedly called as fast as possible.
  86:../../common/keyboard.c ****  */
  87:../../common/keyboard.c **** void keyboard_task(void)
  88:../../common/keyboard.c **** {
  89:../../common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
  90:../../common/keyboard.c ****     static uint8_t led_status = 0;
  91:../../common/keyboard.c ****     matrix_row_t matrix_row = 0;
  92:../../common/keyboard.c ****     matrix_row_t matrix_change = 0;
  93:../../common/keyboard.c **** 
  94:../../common/keyboard.c ****     matrix_scan();
  95:../../common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  96:../../common/keyboard.c ****         matrix_row = matrix_get_row(r);
  97:../../common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
  98:../../common/keyboard.c ****         if (matrix_change) {
  99:../../common/keyboard.c ****             if (debug_matrix) matrix_print();
 100:../../common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 101:../../common/keyboard.c ****             if (has_ghost_in_row(r)) {
 102:../../common/keyboard.c ****                 matrix_prev[r] = matrix_row;
 103:../../common/keyboard.c ****                 continue;
 104:../../common/keyboard.c ****             }
 105:../../common/keyboard.c **** #endif
 106:../../common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 107:../../common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 108:../../common/keyboard.c ****                     action_exec((keyevent_t){
 109:../../common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 110:../../common/keyboard.c ****                         .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 111:../../common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 112:../../common/keyboard.c ****                     });
 113:../../common/keyboard.c ****                     // record a processed key
 114:../../common/keyboard.c ****                     matrix_prev[r] ^= ((matrix_row_t)1<<c);
 115:../../common/keyboard.c ****                     // process a key per task call
 116:../../common/keyboard.c ****                     goto MATRIX_LOOP_END;
 117:../../common/keyboard.c ****                 }
 118:../../common/keyboard.c ****             }
 119:../../common/keyboard.c ****         }
 120:../../common/keyboard.c ****     }
 121:../../common/keyboard.c ****     // call with pseudo tick event when no real key event.
 122:../../common/keyboard.c ****     action_exec(TICK);
 123:../../common/keyboard.c **** 
 124:../../common/keyboard.c **** MATRIX_LOOP_END:
 125:../../common/keyboard.c **** 
 126:../../common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 127:../../common/keyboard.c ****     // mousekey repeat & acceleration
 128:../../common/keyboard.c ****     mousekey_task();
 129:../../common/keyboard.c **** #endif
 130:../../common/keyboard.c **** 
 131:../../common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 132:../../common/keyboard.c ****     ps2_mouse_task();
 133:../../common/keyboard.c **** #endif
 134:../../common/keyboard.c **** 
 135:../../common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 136:../../common/keyboard.c ****         serial_mouse_task();
 137:../../common/keyboard.c **** #endif
 138:../../common/keyboard.c **** 
 139:../../common/keyboard.c ****     // update LED
 140:../../common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 141:../../common/keyboard.c ****         led_status = host_keyboard_leds();
 142:../../common/keyboard.c ****         keyboard_set_leds(led_status);
 143:../../common/keyboard.c ****     }
 144:../../common/keyboard.c **** }
 145:../../common/keyboard.c **** 
 146:../../common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 147:../../common/keyboard.c **** {
  70               		.loc 2 147 0
  71               		.cfi_startproc
  72               	.LVL3:
  73 0000 CF93      		push r28
  74               	.LCFI0:
  75               		.cfi_def_cfa_offset 3
  76               		.cfi_offset 28, -2
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 1 */
  80               	.L__stack_usage = 1
  81 0002 C82F      		mov r28,r24
 148:../../common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
  82               		.loc 2 148 0
  83 0004 8091 0000 		lds r24,debug_config
  84               	.LVL4:
  85 0008 82FF      		sbrs r24,2
  86 000a 00C0      		rjmp .L6
  87               		.loc 2 148 0 is_stmt 0 discriminator 1
  88 000c 80FF      		sbrs r24,0
  89 000e 00C0      		rjmp .L7
  90 0010 80E0      		ldi r24,lo8(__c.2369)
  91 0012 90E0      		ldi r25,hi8(__c.2369)
  92 0014 0E94 0000 		call xputs
  93               	.LVL5:
  94               	.L7:
  95               		.loc 2 148 0 discriminator 2
  96 0018 8091 0000 		lds r24,debug_config
  97 001c 80FF      		sbrs r24,0
  98 001e 00C0      		rjmp .L8
  99               		.loc 2 148 0 discriminator 1
 100 0020 1F92      		push __zero_reg__
 101               	.LCFI1:
 102               		.cfi_def_cfa_offset 4
 103 0022 CF93      		push r28
 104               	.LCFI2:
 105               		.cfi_def_cfa_offset 5
 106 0024 20E0      		ldi r18,lo8(__c.2371)
 107 0026 30E0      		ldi r19,hi8(__c.2371)
 108 0028 3F93      		push r19
 109               	.LCFI3:
 110               		.cfi_def_cfa_offset 6
 111 002a 2F93      		push r18
 112               	.LCFI4:
 113               		.cfi_def_cfa_offset 7
 114 002c 0E94 0000 		call __xprintf
 115               	.LVL6:
 116 0030 0F90      		pop __tmp_reg__
 117 0032 0F90      		pop __tmp_reg__
 118 0034 0F90      		pop __tmp_reg__
 119 0036 0F90      		pop __tmp_reg__
 120               	.LCFI5:
 121               		.cfi_def_cfa_offset 3
 122               	.L8:
 123               		.loc 2 148 0 discriminator 2
 124 0038 8091 0000 		lds r24,debug_config
 125 003c 80FF      		sbrs r24,0
 126 003e 00C0      		rjmp .L6
 127               		.loc 2 148 0 discriminator 1
 128 0040 80E0      		ldi r24,lo8(__c.2373)
 129 0042 90E0      		ldi r25,hi8(__c.2373)
 130 0044 0E94 0000 		call xputs
 131               	.LVL7:
 132               	.L6:
 149:../../common/keyboard.c ****     led_set(leds);
 133               		.loc 2 149 0 is_stmt 1
 134 0048 8C2F      		mov r24,r28
 135               	/* epilogue start */
 150:../../common/keyboard.c **** }
 136               		.loc 2 150 0
 137 004a CF91      		pop r28
 138               	.LVL8:
 149:../../common/keyboard.c ****     led_set(leds);
 139               		.loc 2 149 0
 140 004c 0C94 0000 		jmp led_set
 141               	.LVL9:
 142               		.cfi_endproc
 143               	.LFE8:
 145               		.section	.text.keyboard_task,"ax",@progbits
 146               	.global	keyboard_task
 148               	keyboard_task:
 149               	.LFB7:
  88:../../common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 150               		.loc 2 88 0
 151               		.cfi_startproc
 152 0000 CF92      		push r12
 153               	.LCFI6:
 154               		.cfi_def_cfa_offset 3
 155               		.cfi_offset 12, -2
 156 0002 DF92      		push r13
 157               	.LCFI7:
 158               		.cfi_def_cfa_offset 4
 159               		.cfi_offset 13, -3
 160 0004 EF92      		push r14
 161               	.LCFI8:
 162               		.cfi_def_cfa_offset 5
 163               		.cfi_offset 14, -4
 164 0006 FF92      		push r15
 165               	.LCFI9:
 166               		.cfi_def_cfa_offset 6
 167               		.cfi_offset 15, -5
 168 0008 0F93      		push r16
 169               	.LCFI10:
 170               		.cfi_def_cfa_offset 7
 171               		.cfi_offset 16, -6
 172 000a 1F93      		push r17
 173               	.LCFI11:
 174               		.cfi_def_cfa_offset 8
 175               		.cfi_offset 17, -7
 176 000c CF93      		push r28
 177               	.LCFI12:
 178               		.cfi_def_cfa_offset 9
 179               		.cfi_offset 28, -8
 180 000e DF93      		push r29
 181               	.LCFI13:
 182               		.cfi_def_cfa_offset 10
 183               		.cfi_offset 29, -9
 184 0010 CDB7      		in r28,__SP_L__
 185 0012 DEB7      		in r29,__SP_H__
 186               	.LCFI14:
 187               		.cfi_def_cfa_register 28
 188 0014 2B97      		sbiw r28,11
 189               	.LCFI15:
 190               		.cfi_def_cfa_offset 21
 191 0016 0FB6      		in __tmp_reg__,__SREG__
 192 0018 F894      		cli
 193 001a DEBF      		out __SP_H__,r29
 194 001c 0FBE      		out __SREG__,__tmp_reg__
 195 001e CDBF      		out __SP_L__,r28
 196               	/* prologue: function */
 197               	/* frame size = 11 */
 198               	/* stack size = 19 */
 199               	.L__stack_usage = 19
 200               	.LVL10:
  94:../../common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 201               		.loc 2 94 0
 202 0020 0E94 0000 		call matrix_scan
 203               	.LVL11:
 204 0024 30E0      		ldi r19,lo8(matrix_prev.2349)
 205 0026 E32E      		mov r14,r19
 206 0028 30E0      		ldi r19,hi8(matrix_prev.2349)
 207 002a F32E      		mov r15,r19
 208 002c 00E0      		ldi r16,0
 209 002e 10E0      		ldi r17,0
 210               	.LVL12:
 211               	.L30:
 212 0030 C02E      		mov r12,r16
 213               	.LVL13:
 214               	.LBB2:
  96:../../common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
 215               		.loc 2 96 0
 216 0032 802F      		mov r24,r16
 217 0034 0E94 0000 		call matrix_get_row
 218               	.LVL14:
  97:../../common/keyboard.c ****         if (matrix_change) {
 219               		.loc 2 97 0
 220 0038 F701      		movw r30,r14
 221 003a D190      		ld r13,Z+
 222 003c 7F01      		movw r14,r30
 223 003e D826      		eor r13,r24
 224               	.LVL15:
  98:../../common/keyboard.c ****             if (debug_matrix) matrix_print();
 225               		.loc 2 98 0
 226 0040 01F4      		brne .L21
 227               	.LVL16:
 228               	.L28:
 229 0042 0F5F      		subi r16,-1
 230 0044 1F4F      		sbci r17,-1
 231               	.LVL17:
  95:../../common/keyboard.c ****         matrix_row = matrix_get_row(r);
 232               		.loc 2 95 0
 233 0046 0E30      		cpi r16,14
 234 0048 1105      		cpc r17,__zero_reg__
 235 004a 01F4      		brne .L30
 236               	.LBE2:
 122:../../common/keyboard.c **** 
 237               		.loc 2 122 0
 238 004c 8FEF      		ldi r24,lo8(-1)
 239 004e 8983      		std Y+1,r24
 240 0050 8A83      		std Y+2,r24
 241 0052 1B82      		std Y+3,__zero_reg__
 242 0054 0E94 0000 		call timer_read
 243               	.LVL18:
 244 0058 8160      		ori r24,1
 245 005a 782F      		mov r23,r24
 246 005c 9D83      		std Y+5,r25
 247 005e 8C83      		std Y+4,r24
 248 0060 4981      		ldd r20,Y+1
 249 0062 5A81      		ldd r21,Y+2
 250 0064 6B81      		ldd r22,Y+3
 251 0066 8D81      		ldd r24,Y+5
 252 0068 0E94 0000 		call action_exec
 253               	.LVL19:
 254 006c 00C0      		rjmp .L27
 255               	.LVL20:
 256               	.L21:
 257               	.LBB4:
  99:../../common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 258               		.loc 2 99 0
 259 006e 9091 0000 		lds r25,debug_config
 260 0072 91FF      		sbrs r25,1
 261 0074 00C0      		rjmp .L24
  99:../../common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 262               		.loc 2 99 0 is_stmt 0 discriminator 1
 263 0076 8B87      		std Y+11,r24
 264 0078 0E94 0000 		call matrix_print
 265               	.LVL21:
 266 007c 8B85      		ldd r24,Y+11
 267               	.L24:
 268               	.LVL22:
 269               	.LBE4:
  94:../../common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 270               		.loc 2 94 0 is_stmt 1
 271 007e 20E0      		ldi r18,0
 272 0080 30E0      		ldi r19,0
 273               	.LBB5:
 274               	.LBB3:
 107:../../common/keyboard.c ****                     action_exec((keyevent_t){
 275               		.loc 2 107 0
 276 0082 4D2D      		mov r20,r13
 277 0084 50E0      		ldi r21,0
 278               	.LVL23:
 279               	.L29:
 280 0086 922F      		mov r25,r18
 281               	.LVL24:
 282 0088 BA01      		movw r22,r20
 283 008a 022E      		mov r0,r18
 284 008c 00C0      		rjmp 2f
 285               		1:
 286 008e 7595      		asr r23
 287 0090 6795      		ror r22
 288               		2:
 289 0092 0A94      		dec r0
 290 0094 02F4      		brpl 1b
 291 0096 60FF      		sbrs r22,0
 292 0098 00C0      		rjmp .L25
 108:../../common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 293               		.loc 2 108 0
 294 009a 2E83      		std Y+6,r18
 295 009c CF82      		std Y+7,r12
 110:../../common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 296               		.loc 2 110 0
 297 009e EE24      		clr r14
 298 00a0 E394      		inc r14
 299 00a2 F12C      		mov r15,__zero_reg__
 300               	.LVL25:
 301 00a4 00C0      		rjmp 2f
 302               		1:
 303 00a6 EE0C      		lsl r14
 304 00a8 FF1C      		rol r15
 305               		2:
 306 00aa 9A95      		dec r25
 307 00ac 02F4      		brpl 1b
 308 00ae 90E0      		ldi r25,0
 309 00b0 8E21      		and r24,r14
 310 00b2 9F21      		and r25,r15
 311 00b4 21E0      		ldi r18,lo8(1)
 312 00b6 892B      		or r24,r25
 313 00b8 01F4      		brne .L26
 314 00ba 20E0      		ldi r18,0
 315               	.L26:
 108:../../common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 316               		.loc 2 108 0
 317 00bc 2887      		std Y+8,r18
 111:../../common/keyboard.c ****                     });
 318               		.loc 2 111 0
 319 00be 0E94 0000 		call timer_read
 320               	.LVL26:
 321 00c2 8160      		ori r24,1
 108:../../common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 322               		.loc 2 108 0
 323 00c4 782F      		mov r23,r24
 324 00c6 9A87      		std Y+10,r25
 325 00c8 8987      		std Y+9,r24
 326 00ca 4E81      		ldd r20,Y+6
 327 00cc 5F81      		ldd r21,Y+7
 328 00ce 6885      		ldd r22,Y+8
 329 00d0 8A85      		ldd r24,Y+10
 330 00d2 0E94 0000 		call action_exec
 331               	.LVL27:
 114:../../common/keyboard.c ****                     // process a key per task call
 332               		.loc 2 114 0
 333 00d6 F801      		movw r30,r16
 334 00d8 E050      		subi r30,lo8(-(matrix_prev.2349))
 335 00da F040      		sbci r31,hi8(-(matrix_prev.2349))
 336 00dc 8081      		ld r24,Z
 337 00de 8E25      		eor r24,r14
 338 00e0 8083      		st Z,r24
 116:../../common/keyboard.c ****                 }
 339               		.loc 2 116 0
 340 00e2 00C0      		rjmp .L27
 341               	.LVL28:
 342               	.L25:
 343 00e4 2F5F      		subi r18,-1
 344 00e6 3F4F      		sbci r19,-1
 345               	.LVL29:
 106:../../common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 346               		.loc 2 106 0
 347 00e8 2630      		cpi r18,6
 348 00ea 3105      		cpc r19,__zero_reg__
 349 00ec 01F4      		brne .L29
 350 00ee 00C0      		rjmp .L28
 351               	.LVL30:
 352               	.L27:
 353               	.LBE3:
 354               	.LBE5:
 128:../../common/keyboard.c **** #endif
 355               		.loc 2 128 0
 356 00f0 0E94 0000 		call mousekey_task
 357               	.LVL31:
 140:../../common/keyboard.c ****         led_status = host_keyboard_leds();
 358               		.loc 2 140 0
 359 00f4 1091 0000 		lds r17,led_status.2350
 360 00f8 0E94 0000 		call host_keyboard_leds
 361               	.LVL32:
 362 00fc 1817      		cp r17,r24
 363 00fe 01F0      		breq .L20
 141:../../common/keyboard.c ****         keyboard_set_leds(led_status);
 364               		.loc 2 141 0
 365 0100 0E94 0000 		call host_keyboard_leds
 366               	.LVL33:
 367 0104 8093 0000 		sts led_status.2350,r24
 368               	/* epilogue start */
 144:../../common/keyboard.c **** 
 369               		.loc 2 144 0
 370 0108 2B96      		adiw r28,11
 371 010a 0FB6      		in __tmp_reg__,__SREG__
 372 010c F894      		cli
 373 010e DEBF      		out __SP_H__,r29
 374 0110 0FBE      		out __SREG__,__tmp_reg__
 375 0112 CDBF      		out __SP_L__,r28
 376 0114 DF91      		pop r29
 377 0116 CF91      		pop r28
 378 0118 1F91      		pop r17
 379 011a 0F91      		pop r16
 380 011c FF90      		pop r15
 381 011e EF90      		pop r14
 382 0120 DF90      		pop r13
 383               	.LVL34:
 384 0122 CF90      		pop r12
 142:../../common/keyboard.c ****     }
 385               		.loc 2 142 0
 386 0124 0C94 0000 		jmp keyboard_set_leds
 387               	.LVL35:
 388               	.L20:
 389               	/* epilogue start */
 144:../../common/keyboard.c **** 
 390               		.loc 2 144 0
 391 0128 2B96      		adiw r28,11
 392 012a 0FB6      		in __tmp_reg__,__SREG__
 393 012c F894      		cli
 394 012e DEBF      		out __SP_H__,r29
 395 0130 0FBE      		out __SREG__,__tmp_reg__
 396 0132 CDBF      		out __SP_L__,r28
 397 0134 DF91      		pop r29
 398 0136 CF91      		pop r28
 399 0138 1F91      		pop r17
 400 013a 0F91      		pop r16
 401 013c FF90      		pop r15
 402 013e EF90      		pop r14
 403 0140 DF90      		pop r13
 404               	.LVL36:
 405 0142 CF90      		pop r12
 406 0144 0895      		ret
 407               		.cfi_endproc
 408               	.LFE7:
 410               		.section	.progmem.data,"a",@progbits
 413               	__c.2373:
 414 0000 0A00      		.string	"\n"
 417               	__c.2371:
 418 0002 2530 3258 		.string	"%02X"
 418      00
 421               	__c.2369:
 422 0007 6B65 7962 		.string	"keyboard_set_led: "
 422      6F61 7264 
 422      5F73 6574 
 422      5F6C 6564 
 422      3A20 00
 423               		.local	led_status.2350
 424               		.comm	led_status.2350,1,1
 425               		.local	matrix_prev.2349
 426               		.comm	matrix_prev.2349,14,1
 427               		.comm	keymap_config,1,1
 428               		.text
 429               	.Letext0:
 430               		.file 3 "/usr/lib/avr/include/stdint.h"
 431               		.file 4 "../../common/matrix.h"
 432               		.file 5 "../../common/keymap.h"
 433               		.file 6 "../../common/debug.h"
 434               		.file 7 "../../common/timer.h"
 435               		.file 8 "../../common/bootmagic.h"
 436               		.file 9 "../../common/avr/xprintf.h"
 437               		.file 10 "../../common/led.h"
 438               		.file 11 "../../common/action.h"
 439               		.file 12 "../../common/mousekey.h"
 440               		.file 13 "../../common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/ccxafluj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxafluj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxafluj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxafluj.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxafluj.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxafluj.s:13     .text.matrix_power_up:0000000000000000 matrix_power_up
     /tmp/ccxafluj.s:29     .text.matrix_power_down:0000000000000000 matrix_power_down
     /tmp/ccxafluj.s:44     .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/ccxafluj.s:68     .text.keyboard_set_leds:0000000000000000 keyboard_set_leds
     /tmp/ccxafluj.s:421    .progmem.data:0000000000000007 __c.2369
     /tmp/ccxafluj.s:417    .progmem.data:0000000000000002 __c.2371
     /tmp/ccxafluj.s:413    .progmem.data:0000000000000000 __c.2373
     /tmp/ccxafluj.s:148    .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/ccxafluj.s:424    .bss:0000000000000001 matrix_prev.2349
                             .bss:0000000000000000 led_status.2350
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
timer_init
matrix_init
bootmagic
debug_config
xputs
__xprintf
led_set
matrix_scan
matrix_get_row
timer_read
action_exec
matrix_print
mousekey_task
host_keyboard_leds
__do_clear_bss
