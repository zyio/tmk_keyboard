   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.command_console_help,"ax",@progbits
  12               	command_console_help:
  13               	.LFB18:
  14               		.file 1 "../../common/command.c"
   1:../../common/command.c **** /*
   2:../../common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../common/command.c **** 
   4:../../common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/command.c **** (at your option) any later version.
   8:../../common/command.c **** 
   9:../../common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/command.c **** GNU General Public License for more details.
  13:../../common/command.c **** 
  14:../../common/command.c **** You should have received a copy of the GNU General Public License
  15:../../common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/command.c **** */
  17:../../common/command.c **** #include <stdint.h>
  18:../../common/command.c **** #include <stdbool.h>
  19:../../common/command.c **** #include <util/delay.h>
  20:../../common/command.c **** #include "keycode.h"
  21:../../common/command.c **** #include "host.h"
  22:../../common/command.c **** #include "keymap.h"
  23:../../common/command.c **** #include "print.h"
  24:../../common/command.c **** #include "debug.h"
  25:../../common/command.c **** #include "util.h"
  26:../../common/command.c **** #include "timer.h"
  27:../../common/command.c **** #include "keyboard.h"
  28:../../common/command.c **** #include "bootloader.h"
  29:../../common/command.c **** #include "action_layer.h"
  30:../../common/command.c **** #include "action_util.h"
  31:../../common/command.c **** #include "eeconfig.h"
  32:../../common/command.c **** #include "sleep_led.h"
  33:../../common/command.c **** #include "led.h"
  34:../../common/command.c **** #include "command.h"
  35:../../common/command.c **** #include "backlight.h"
  36:../../common/command.c **** 
  37:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../common/command.c **** #include "mousekey.h"
  39:../../common/command.c **** #endif
  40:../../common/command.c **** 
  41:../../common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../common/command.c **** #   include "usb_keyboard.h"
  43:../../common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../common/command.c **** #       include "usb_extra.h"
  45:../../common/command.c **** #   endif
  46:../../common/command.c **** #endif
  47:../../common/command.c **** 
  48:../../common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../common/command.c **** #   include "usbdrv.h"
  50:../../common/command.c **** #endif
  51:../../common/command.c **** 
  52:../../common/command.c **** 
  53:../../common/command.c **** static bool command_common(uint8_t code);
  54:../../common/command.c **** static void command_common_help(void);
  55:../../common/command.c **** static bool command_console(uint8_t code);
  56:../../common/command.c **** static void command_console_help(void);
  57:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../common/command.c **** static void mousekey_console_help(void);
  60:../../common/command.c **** #endif
  61:../../common/command.c **** 
  62:../../common/command.c **** static uint8_t numkey2num(uint8_t code);
  63:../../common/command.c **** static void switch_default_layer(uint8_t layer);
  64:../../common/command.c **** 
  65:../../common/command.c **** 
  66:../../common/command.c **** command_state_t command_state = ONESHOT;
  67:../../common/command.c **** 
  68:../../common/command.c **** 
  69:../../common/command.c **** bool command_proc(uint8_t code)
  70:../../common/command.c **** {
  71:../../common/command.c ****     switch (command_state) {
  72:../../common/command.c ****         case ONESHOT:
  73:../../common/command.c ****             if (!IS_COMMAND())
  74:../../common/command.c ****                 return false;
  75:../../common/command.c ****             return (command_extra(code) || command_common(code));
  76:../../common/command.c ****             break;
  77:../../common/command.c ****         case CONSOLE:
  78:../../common/command.c ****             if (IS_COMMAND())
  79:../../common/command.c ****                 return (command_extra(code) || command_common(code));
  80:../../common/command.c ****             else
  81:../../common/command.c ****                 return (command_console_extra(code) || command_console(code));
  82:../../common/command.c ****             break;
  83:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  84:../../common/command.c ****         case MOUSEKEY:
  85:../../common/command.c ****             mousekey_console(code);
  86:../../common/command.c ****             break;
  87:../../common/command.c **** #endif
  88:../../common/command.c ****         default:
  89:../../common/command.c ****             command_state = ONESHOT;
  90:../../common/command.c ****             return false;
  91:../../common/command.c ****     }
  92:../../common/command.c ****     return true;
  93:../../common/command.c **** }
  94:../../common/command.c **** 
  95:../../common/command.c **** /* TODO: Refactoring is needed. */
  96:../../common/command.c **** /* This allows to define extra commands. return false when not processed. */
  97:../../common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  98:../../common/command.c **** bool command_extra(uint8_t code)
  99:../../common/command.c **** {
 100:../../common/command.c ****     return false;
 101:../../common/command.c **** }
 102:../../common/command.c **** 
 103:../../common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 104:../../common/command.c **** bool command_console_extra(uint8_t code)
 105:../../common/command.c **** {
 106:../../common/command.c ****     return false;
 107:../../common/command.c **** }
 108:../../common/command.c **** 
 109:../../common/command.c **** 
 110:../../common/command.c **** /***********************************************************
 111:../../common/command.c ****  * Command common
 112:../../common/command.c ****  ***********************************************************/
 113:../../common/command.c **** static void command_common_help(void)
 114:../../common/command.c **** {
 115:../../common/command.c ****     print("\n\n----- Command Help -----\n");
 116:../../common/command.c ****     print("c:	enter console mode\n");
 117:../../common/command.c ****     print("d:	toggle debug enable\n");
 118:../../common/command.c ****     print("x:	toggle matrix debug\n");
 119:../../common/command.c ****     print("k:	toggle keyboard debug\n");
 120:../../common/command.c ****     print("m:	toggle mouse debug\n");
 121:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 122:../../common/command.c ****     print("z:	toggle sleep LED test\n");
 123:../../common/command.c **** #endif
 124:../../common/command.c ****     print("v:	print device version & info\n");
 125:../../common/command.c ****     print("t:	print timer count\n");
 126:../../common/command.c ****     print("s:	print status\n");
 127:../../common/command.c ****     print("e:	print eeprom config\n");
 128:../../common/command.c **** #ifdef NKRO_ENABLE
 129:../../common/command.c ****     print("n:	toggle NKRO\n");
 130:../../common/command.c **** #endif
 131:../../common/command.c ****     print("0/F10:	switch to Layer0 \n");
 132:../../common/command.c ****     print("1/F1:	switch to Layer1 \n");
 133:../../common/command.c ****     print("2/F2:	switch to Layer2 \n");
 134:../../common/command.c ****     print("3/F3:	switch to Layer3 \n");
 135:../../common/command.c ****     print("4/F4:	switch to Layer4 \n");
 136:../../common/command.c ****     print("PScr:	power down/remote wake-up\n");
 137:../../common/command.c ****     print("Caps:	Lock Keyboard(Child Proof)\n");
 138:../../common/command.c ****     print("Paus:	jump to bootloader\n");
 139:../../common/command.c **** }
 140:../../common/command.c **** 
 141:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 142:../../common/command.c **** static void print_eeconfig(void)
 143:../../common/command.c **** {
 144:../../common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 145:../../common/command.c **** 
 146:../../common/command.c ****     debug_config_t dc;
 147:../../common/command.c ****     dc.raw = eeconfig_read_debug();
 148:../../common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 149:../../common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 150:../../common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 151:../../common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 152:../../common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 153:../../common/command.c **** 
 154:../../common/command.c ****     keymap_config_t kc;
 155:../../common/command.c ****     kc.raw = eeconfig_read_keymap();
 156:../../common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 157:../../common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 158:../../common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 159:../../common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 160:../../common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 161:../../common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 162:../../common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 163:../../common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 164:../../common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 165:../../common/command.c **** 
 166:../../common/command.c **** #ifdef BACKLIGHT_ENABLE
 167:../../common/command.c ****     backlight_config_t bc;
 168:../../common/command.c ****     bc.raw = eeconfig_read_backlight();
 169:../../common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 170:../../common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 171:../../common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 172:../../common/command.c **** #endif
 173:../../common/command.c **** }
 174:../../common/command.c **** #endif
 175:../../common/command.c **** 
 176:../../common/command.c **** static bool command_common(uint8_t code)
 177:../../common/command.c **** {
 178:../../common/command.c ****     static host_driver_t *host_driver = 0;
 179:../../common/command.c ****     switch (code) {
 180:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 181:../../common/command.c ****         case KC_Z:
 182:../../common/command.c ****             // test breathing sleep LED
 183:../../common/command.c ****             print("Sleep LED test\n");
 184:../../common/command.c ****             sleep_led_toggle();
 185:../../common/command.c ****             led_set(host_keyboard_leds());
 186:../../common/command.c ****             break;
 187:../../common/command.c **** #endif
 188:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 189:../../common/command.c ****         case KC_E:
 190:../../common/command.c ****             print("eeconfig:\n");
 191:../../common/command.c ****             print_eeconfig();
 192:../../common/command.c ****             break;
 193:../../common/command.c **** #endif
 194:../../common/command.c ****         case KC_CAPSLOCK:
 195:../../common/command.c ****             if (host_get_driver()) {
 196:../../common/command.c ****                 host_driver = host_get_driver();
 197:../../common/command.c ****                 clear_keyboard();
 198:../../common/command.c ****                 host_set_driver(0);
 199:../../common/command.c ****                 print("Locked.\n");
 200:../../common/command.c ****             } else {
 201:../../common/command.c ****                 host_set_driver(host_driver);
 202:../../common/command.c ****                 print("Unlocked.\n");
 203:../../common/command.c ****             }
 204:../../common/command.c ****             break;
 205:../../common/command.c ****         case KC_H:
 206:../../common/command.c ****         case KC_SLASH: /* ? */
 207:../../common/command.c ****             command_common_help();
 208:../../common/command.c ****             break;
 209:../../common/command.c ****         case KC_C:
 210:../../common/command.c ****             debug_matrix   = false;
 211:../../common/command.c ****             debug_keyboard = false;
 212:../../common/command.c ****             debug_mouse    = false;
 213:../../common/command.c ****             debug_enable   = false;
 214:../../common/command.c ****             command_console_help();
 215:../../common/command.c ****             print("\nEnter Console Mode\n");
 216:../../common/command.c ****             print("C> ");
 217:../../common/command.c ****             command_state = CONSOLE;
 218:../../common/command.c ****             break;
 219:../../common/command.c ****         case KC_PAUSE:
 220:../../common/command.c ****             clear_keyboard();
 221:../../common/command.c ****             print("\n\nJump to bootloader... ");
 222:../../common/command.c ****             _delay_ms(1000);
 223:../../common/command.c ****             bootloader_jump(); // not return
 224:../../common/command.c ****             print("not supported.\n");
 225:../../common/command.c ****             break;
 226:../../common/command.c ****         case KC_D:
 227:../../common/command.c ****             if (debug_enable) {
 228:../../common/command.c ****                 print("\nDEBUG: disabled.\n");
 229:../../common/command.c ****                 debug_matrix   = false;
 230:../../common/command.c ****                 debug_keyboard = false;
 231:../../common/command.c ****                 debug_mouse    = false;
 232:../../common/command.c ****                 debug_enable   = false;
 233:../../common/command.c ****             } else {
 234:../../common/command.c ****                 print("\nDEBUG: enabled.\n");
 235:../../common/command.c ****                 debug_enable   = true;
 236:../../common/command.c ****             }
 237:../../common/command.c ****             break;
 238:../../common/command.c ****         case KC_X: // debug matrix toggle
 239:../../common/command.c ****             debug_matrix = !debug_matrix;
 240:../../common/command.c ****             if (debug_matrix) {
 241:../../common/command.c ****                 print("\nDEBUG: matrix enabled.\n");
 242:../../common/command.c ****                 debug_enable = true;
 243:../../common/command.c ****             } else {
 244:../../common/command.c ****                 print("\nDEBUG: matrix disabled.\n");
 245:../../common/command.c ****             }
 246:../../common/command.c ****             break;
 247:../../common/command.c ****         case KC_K: // debug keyboard toggle
 248:../../common/command.c ****             debug_keyboard = !debug_keyboard;
 249:../../common/command.c ****             if (debug_keyboard) {
 250:../../common/command.c ****                 print("\nDEBUG: keyboard enabled.\n");
 251:../../common/command.c ****                 debug_enable = true;
 252:../../common/command.c ****             } else {
 253:../../common/command.c ****                 print("\nDEBUG: keyboard disabled.\n");
 254:../../common/command.c ****             }
 255:../../common/command.c ****             break;
 256:../../common/command.c ****         case KC_M: // debug mouse toggle
 257:../../common/command.c ****             debug_mouse = !debug_mouse;
 258:../../common/command.c ****             if (debug_mouse) {
 259:../../common/command.c ****                 print("\nDEBUG: mouse enabled.\n");
 260:../../common/command.c ****                 debug_enable = true;
 261:../../common/command.c ****             } else {
 262:../../common/command.c ****                 print("\nDEBUG: mouse disabled.\n");
 263:../../common/command.c ****             }
 264:../../common/command.c ****             break;
 265:../../common/command.c ****         case KC_V: // print version & information
 266:../../common/command.c ****             print("\n\n----- Version -----\n");
 267:../../common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 268:../../common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 269:../../common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 270:../../common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 271:../../common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 272:../../common/command.c ****             /* build options */
 273:../../common/command.c ****             print("OPTIONS:"
 274:../../common/command.c **** #ifdef PROTOCOL_PJRC
 275:../../common/command.c ****             " PJRC"
 276:../../common/command.c **** #endif
 277:../../common/command.c **** #ifdef PROTOCOL_LUFA
 278:../../common/command.c ****             " LUFA"
 279:../../common/command.c **** #endif
 280:../../common/command.c **** #ifdef PROTOCOL_VUSB
 281:../../common/command.c ****             " VUSB"
 282:../../common/command.c **** #endif
 283:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 284:../../common/command.c ****             " BOOTMAGIC"
 285:../../common/command.c **** #endif
 286:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 287:../../common/command.c ****             " MOUSEKEY"
 288:../../common/command.c **** #endif
 289:../../common/command.c **** #ifdef EXTRAKEY_ENABLE
 290:../../common/command.c ****             " EXTRAKEY"
 291:../../common/command.c **** #endif
 292:../../common/command.c **** #ifdef CONSOLE_ENABLE
 293:../../common/command.c ****             " CONSOLE"
 294:../../common/command.c **** #endif
 295:../../common/command.c **** #ifdef COMMAND_ENABLE
 296:../../common/command.c ****             " COMMAND"
 297:../../common/command.c **** #endif
 298:../../common/command.c **** #ifdef NKRO_ENABLE
 299:../../common/command.c ****             " NKRO"
 300:../../common/command.c **** #endif
 301:../../common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 302:../../common/command.c ****             " KEYMAP_SECTION"
 303:../../common/command.c **** #endif
 304:../../common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 305:../../common/command.c **** 
 306:../../common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 307:../../common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 308:../../common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 309:../../common/command.c ****             break;
 310:../../common/command.c ****         case KC_T: // print timer
 311:../../common/command.c ****             print_val_hex32(timer_count);
 312:../../common/command.c ****             break;
 313:../../common/command.c ****         case KC_S:
 314:../../common/command.c ****             print("\n\n----- Status -----\n");
 315:../../common/command.c ****             print_val_hex8(host_keyboard_leds());
 316:../../common/command.c ****             print_val_hex8(keyboard_protocol);
 317:../../common/command.c ****             print_val_hex8(keyboard_idle);
 318:../../common/command.c **** #ifdef PROTOCOL_PJRC
 319:../../common/command.c ****             print_val_hex8(UDCON);
 320:../../common/command.c ****             print_val_hex8(UDIEN);
 321:../../common/command.c ****             print_val_hex8(UDINT);
 322:../../common/command.c ****             print_val_hex8(usb_keyboard_leds);
 323:../../common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 324:../../common/command.c **** #endif
 325:../../common/command.c **** 
 326:../../common/command.c **** #ifdef PROTOCOL_PJRC
 327:../../common/command.c **** #   if USB_COUNT_SOF
 328:../../common/command.c ****             print_val_hex8(usbSofCount);
 329:../../common/command.c **** #   endif
 330:../../common/command.c **** #endif
 331:../../common/command.c ****             break;
 332:../../common/command.c **** #ifdef NKRO_ENABLE
 333:../../common/command.c ****         case KC_N:
 334:../../common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 335:../../common/command.c ****             keyboard_nkro = !keyboard_nkro;
 336:../../common/command.c ****             if (keyboard_nkro)
 337:../../common/command.c ****                 print("NKRO: enabled\n");
 338:../../common/command.c ****             else
 339:../../common/command.c ****                 print("NKRO: disabled\n");
 340:../../common/command.c ****             break;
 341:../../common/command.c **** #endif
 342:../../common/command.c **** #ifdef EXTRAKEY_ENABLE
 343:../../common/command.c ****         case KC_PSCREEN:
 344:../../common/command.c ****             // TODO: Power key should take this feature? otherwise any key during suspend.
 345:../../common/command.c **** #ifdef PROTOCOL_PJRC
 346:../../common/command.c ****             if (suspend && remote_wakeup) {
 347:../../common/command.c ****                 usb_remote_wakeup();
 348:../../common/command.c ****             } else {
 349:../../common/command.c ****                 host_system_send(SYSTEM_POWER_DOWN);
 350:../../common/command.c ****                 host_system_send(0);
 351:../../common/command.c ****                 _delay_ms(500);
 352:../../common/command.c ****             }
 353:../../common/command.c **** #else
 354:../../common/command.c ****             host_system_send(SYSTEM_POWER_DOWN);
 355:../../common/command.c ****             _delay_ms(100);
 356:../../common/command.c ****             host_system_send(0);
 357:../../common/command.c ****             _delay_ms(500);
 358:../../common/command.c **** #endif
 359:../../common/command.c ****             break;
 360:../../common/command.c **** #endif
 361:../../common/command.c ****         case KC_ESC:
 362:../../common/command.c ****         case KC_GRV:
 363:../../common/command.c ****         case KC_0:
 364:../../common/command.c ****             switch_default_layer(0);
 365:../../common/command.c ****             break;
 366:../../common/command.c ****         case KC_1 ... KC_9:
 367:../../common/command.c ****             switch_default_layer((code - KC_1) + 1);
 368:../../common/command.c ****             break;
 369:../../common/command.c ****         case KC_F1 ... KC_F12:
 370:../../common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 371:../../common/command.c ****             break;
 372:../../common/command.c ****         default:
 373:../../common/command.c ****             print("?");
 374:../../common/command.c ****             return false;
 375:../../common/command.c ****     }
 376:../../common/command.c ****     return true;
 377:../../common/command.c **** }
 378:../../common/command.c **** 
 379:../../common/command.c **** 
 380:../../common/command.c **** /***********************************************************
 381:../../common/command.c ****  * Command console
 382:../../common/command.c ****  ***********************************************************/
 383:../../common/command.c **** static void command_console_help(void)
 384:../../common/command.c **** {
  15               		.loc 1 384 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 385:../../common/command.c ****     print("\n\n----- Console Help -----\n");
  21               		.loc 1 385 0
  22 0000 80E0      		ldi r24,lo8(__c.2810)
  23 0002 90E0      		ldi r25,hi8(__c.2810)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 386:../../common/command.c ****     print("ESC/q:	quit\n");
  26               		.loc 1 386 0
  27 0008 80E0      		ldi r24,lo8(__c.2812)
  28 000a 90E0      		ldi r25,hi8(__c.2812)
  29 000c 0E94 0000 		call xputs
  30               	.LVL1:
 387:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 388:../../common/command.c ****     print("m:	mousekey\n");
  31               		.loc 1 388 0
  32 0010 80E0      		ldi r24,lo8(__c.2814)
  33 0012 90E0      		ldi r25,hi8(__c.2814)
  34 0014 0C94 0000 		jmp xputs
  35               	.LVL2:
  36               		.cfi_endproc
  37               	.LFE18:
  39               		.section	.text.mousekey_console_help,"ax",@progbits
  41               	mousekey_console_help:
  42               	.LFB23:
 389:../../common/command.c **** #endif
 390:../../common/command.c **** }
 391:../../common/command.c **** 
 392:../../common/command.c **** static bool command_console(uint8_t code)
 393:../../common/command.c **** {
 394:../../common/command.c ****     switch (code) {
 395:../../common/command.c ****         case KC_H:
 396:../../common/command.c ****         case KC_SLASH: /* ? */
 397:../../common/command.c ****             command_console_help();
 398:../../common/command.c ****             break;
 399:../../common/command.c ****         case KC_Q:
 400:../../common/command.c ****         case KC_ESC:
 401:../../common/command.c ****             print("\nQuit Console Mode\n");
 402:../../common/command.c ****             command_state = ONESHOT;
 403:../../common/command.c ****             return false;
 404:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 405:../../common/command.c ****         case KC_M:
 406:../../common/command.c ****             mousekey_console_help();
 407:../../common/command.c ****             print("\nEnter Mousekey Console\n");
 408:../../common/command.c ****             print("M0>");
 409:../../common/command.c ****             command_state = MOUSEKEY;
 410:../../common/command.c ****             return true;
 411:../../common/command.c **** #endif
 412:../../common/command.c ****         default:
 413:../../common/command.c ****             print("?");
 414:../../common/command.c ****             return false;
 415:../../common/command.c ****     }
 416:../../common/command.c ****     print("C> ");
 417:../../common/command.c ****     return true;
 418:../../common/command.c **** }
 419:../../common/command.c **** 
 420:../../common/command.c **** 
 421:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 422:../../common/command.c **** /***********************************************************
 423:../../common/command.c ****  * Mousekey console
 424:../../common/command.c ****  ***********************************************************/
 425:../../common/command.c **** static uint8_t mousekey_param = 0;
 426:../../common/command.c **** 
 427:../../common/command.c **** static void mousekey_param_print(void)
 428:../../common/command.c **** {
 429:../../common/command.c ****     print("\n\n----- Mousekey Parameters -----\n");
 430:../../common/command.c ****     print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
 431:../../common/command.c ****     print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
 432:../../common/command.c ****     print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
 433:../../common/command.c ****     print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
 434:../../common/command.c ****     print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 435:../../common/command.c ****     print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 436:../../common/command.c **** }
 437:../../common/command.c **** 
 438:../../common/command.c **** #define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 439:../../common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 440:../../common/command.c **** {
 441:../../common/command.c ****     switch (param) {
 442:../../common/command.c ****         case 1:
 443:../../common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 444:../../common/command.c ****                 mk_delay += inc;
 445:../../common/command.c ****             else
 446:../../common/command.c ****                 mk_delay = UINT8_MAX;
 447:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 448:../../common/command.c ****             break;
 449:../../common/command.c ****         case 2:
 450:../../common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 451:../../common/command.c ****                 mk_interval += inc;
 452:../../common/command.c ****             else
 453:../../common/command.c ****                 mk_interval = UINT8_MAX;
 454:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 455:../../common/command.c ****             break;
 456:../../common/command.c ****         case 3:
 457:../../common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 458:../../common/command.c ****                 mk_max_speed += inc;
 459:../../common/command.c ****             else
 460:../../common/command.c ****                 mk_max_speed = UINT8_MAX;
 461:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 462:../../common/command.c ****             break;
 463:../../common/command.c ****         case 4:
 464:../../common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 465:../../common/command.c ****                 mk_time_to_max += inc;
 466:../../common/command.c ****             else
 467:../../common/command.c ****                 mk_time_to_max = UINT8_MAX;
 468:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 469:../../common/command.c ****             break;
 470:../../common/command.c ****         case 5:
 471:../../common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 472:../../common/command.c ****                 mk_wheel_max_speed += inc;
 473:../../common/command.c ****             else
 474:../../common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 475:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 476:../../common/command.c ****             break;
 477:../../common/command.c ****         case 6:
 478:../../common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 479:../../common/command.c ****                 mk_wheel_time_to_max += inc;
 480:../../common/command.c ****             else
 481:../../common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 482:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 483:../../common/command.c ****             break;
 484:../../common/command.c ****     }
 485:../../common/command.c **** }
 486:../../common/command.c **** 
 487:../../common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 488:../../common/command.c **** {
 489:../../common/command.c ****     switch (param) {
 490:../../common/command.c ****         case 1:
 491:../../common/command.c ****             if (mk_delay > dec)
 492:../../common/command.c ****                 mk_delay -= dec;
 493:../../common/command.c ****             else
 494:../../common/command.c ****                 mk_delay = 0;
 495:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 496:../../common/command.c ****             break;
 497:../../common/command.c ****         case 2:
 498:../../common/command.c ****             if (mk_interval > dec)
 499:../../common/command.c ****                 mk_interval -= dec;
 500:../../common/command.c ****             else
 501:../../common/command.c ****                 mk_interval = 0;
 502:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 503:../../common/command.c ****             break;
 504:../../common/command.c ****         case 3:
 505:../../common/command.c ****             if (mk_max_speed > dec)
 506:../../common/command.c ****                 mk_max_speed -= dec;
 507:../../common/command.c ****             else
 508:../../common/command.c ****                 mk_max_speed = 0;
 509:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 510:../../common/command.c ****             break;
 511:../../common/command.c ****         case 4:
 512:../../common/command.c ****             if (mk_time_to_max > dec)
 513:../../common/command.c ****                 mk_time_to_max -= dec;
 514:../../common/command.c ****             else
 515:../../common/command.c ****                 mk_time_to_max = 0;
 516:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 517:../../common/command.c ****             break;
 518:../../common/command.c ****         case 5:
 519:../../common/command.c ****             if (mk_wheel_max_speed > dec)
 520:../../common/command.c ****                 mk_wheel_max_speed -= dec;
 521:../../common/command.c ****             else
 522:../../common/command.c ****                 mk_wheel_max_speed = 0;
 523:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 524:../../common/command.c ****             break;
 525:../../common/command.c ****         case 6:
 526:../../common/command.c ****             if (mk_wheel_time_to_max > dec)
 527:../../common/command.c ****                 mk_wheel_time_to_max -= dec;
 528:../../common/command.c ****             else
 529:../../common/command.c ****                 mk_wheel_time_to_max = 0;
 530:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 531:../../common/command.c ****             break;
 532:../../common/command.c ****     }
 533:../../common/command.c **** }
 534:../../common/command.c **** 
 535:../../common/command.c **** static void mousekey_console_help(void)
 536:../../common/command.c **** {
  43               		.loc 1 536 0
  44               		.cfi_startproc
  45               	/* prologue: function */
  46               	/* frame size = 0 */
  47               	/* stack size = 0 */
  48               	.L__stack_usage = 0
 537:../../common/command.c ****     print("\n\n----- Mousekey Parameters Help -----\n");
  49               		.loc 1 537 0
  50 0000 80E0      		ldi r24,lo8(__c.2975)
  51 0002 90E0      		ldi r25,hi8(__c.2975)
  52 0004 0E94 0000 		call xputs
  53               	.LVL3:
 538:../../common/command.c ****     print("ESC/q:	quit\n");
  54               		.loc 1 538 0
  55 0008 80E0      		ldi r24,lo8(__c.2977)
  56 000a 90E0      		ldi r25,hi8(__c.2977)
  57 000c 0E94 0000 		call xputs
  58               	.LVL4:
 539:../../common/command.c ****     print("1:	select mk_delay(*10ms)\n");
  59               		.loc 1 539 0
  60 0010 80E0      		ldi r24,lo8(__c.2979)
  61 0012 90E0      		ldi r25,hi8(__c.2979)
  62 0014 0E94 0000 		call xputs
  63               	.LVL5:
 540:../../common/command.c ****     print("2:	select mk_interval(ms)\n");
  64               		.loc 1 540 0
  65 0018 80E0      		ldi r24,lo8(__c.2981)
  66 001a 90E0      		ldi r25,hi8(__c.2981)
  67 001c 0E94 0000 		call xputs
  68               	.LVL6:
 541:../../common/command.c ****     print("3:	select mk_max_speed\n");
  69               		.loc 1 541 0
  70 0020 80E0      		ldi r24,lo8(__c.2983)
  71 0022 90E0      		ldi r25,hi8(__c.2983)
  72 0024 0E94 0000 		call xputs
  73               	.LVL7:
 542:../../common/command.c ****     print("4:	select mk_time_to_max\n");
  74               		.loc 1 542 0
  75 0028 80E0      		ldi r24,lo8(__c.2985)
  76 002a 90E0      		ldi r25,hi8(__c.2985)
  77 002c 0E94 0000 		call xputs
  78               	.LVL8:
 543:../../common/command.c ****     print("5:	select mk_wheel_max_speed\n");
  79               		.loc 1 543 0
  80 0030 80E0      		ldi r24,lo8(__c.2987)
  81 0032 90E0      		ldi r25,hi8(__c.2987)
  82 0034 0E94 0000 		call xputs
  83               	.LVL9:
 544:../../common/command.c ****     print("6:	select mk_wheel_time_to_max\n");
  84               		.loc 1 544 0
  85 0038 80E0      		ldi r24,lo8(__c.2989)
  86 003a 90E0      		ldi r25,hi8(__c.2989)
  87 003c 0E94 0000 		call xputs
  88               	.LVL10:
 545:../../common/command.c ****     print("p:	print parameters\n");
  89               		.loc 1 545 0
  90 0040 80E0      		ldi r24,lo8(__c.2991)
  91 0042 90E0      		ldi r25,hi8(__c.2991)
  92 0044 0E94 0000 		call xputs
  93               	.LVL11:
 546:../../common/command.c ****     print("d:	set default values\n");
  94               		.loc 1 546 0
  95 0048 80E0      		ldi r24,lo8(__c.2993)
  96 004a 90E0      		ldi r25,hi8(__c.2993)
  97 004c 0E94 0000 		call xputs
  98               	.LVL12:
 547:../../common/command.c ****     print("up:	increase parameters(+1)\n");
  99               		.loc 1 547 0
 100 0050 80E0      		ldi r24,lo8(__c.2995)
 101 0052 90E0      		ldi r25,hi8(__c.2995)
 102 0054 0E94 0000 		call xputs
 103               	.LVL13:
 548:../../common/command.c ****     print("down:	decrease parameters(-1)\n");
 104               		.loc 1 548 0
 105 0058 80E0      		ldi r24,lo8(__c.2997)
 106 005a 90E0      		ldi r25,hi8(__c.2997)
 107 005c 0E94 0000 		call xputs
 108               	.LVL14:
 549:../../common/command.c ****     print("pgup:	increase parameters(+10)\n");
 109               		.loc 1 549 0
 110 0060 80E0      		ldi r24,lo8(__c.2999)
 111 0062 90E0      		ldi r25,hi8(__c.2999)
 112 0064 0E94 0000 		call xputs
 113               	.LVL15:
 550:../../common/command.c ****     print("pgdown:	decrease parameters(-10)\n");
 114               		.loc 1 550 0
 115 0068 80E0      		ldi r24,lo8(__c.3001)
 116 006a 90E0      		ldi r25,hi8(__c.3001)
 117 006c 0E94 0000 		call xputs
 118               	.LVL16:
 551:../../common/command.c ****     print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
 119               		.loc 1 551 0
 120 0070 80E0      		ldi r24,lo8(__c.3003)
 121 0072 90E0      		ldi r25,hi8(__c.3003)
 122 0074 0E94 0000 		call xputs
 123               	.LVL17:
 552:../../common/command.c ****     print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
 124               		.loc 1 552 0
 125 0078 80E0      		ldi r24,lo8(__c.3005)
 126 007a 90E0      		ldi r25,hi8(__c.3005)
 127 007c 0E94 0000 		call xputs
 128               	.LVL18:
 129 0080 1F92      		push __zero_reg__
 130               	.LCFI0:
 131               		.cfi_def_cfa_offset 3
 132 0082 85E0      		ldi r24,lo8(5)
 133 0084 8F93      		push r24
 134               	.LCFI1:
 135               		.cfi_def_cfa_offset 4
 136 0086 80E0      		ldi r24,lo8(__c.3007)
 137 0088 90E0      		ldi r25,hi8(__c.3007)
 138 008a 9F93      		push r25
 139               	.LCFI2:
 140               		.cfi_def_cfa_offset 5
 141 008c 8F93      		push r24
 142               	.LCFI3:
 143               		.cfi_def_cfa_offset 6
 144 008e 0E94 0000 		call __xprintf
 145               	.LVL19:
 553:../../common/command.c ****     print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
 146               		.loc 1 553 0
 147 0092 80E0      		ldi r24,lo8(__c.3009)
 148 0094 90E0      		ldi r25,hi8(__c.3009)
 149 0096 0E94 0000 		call xputs
 150               	.LVL20:
 151 009a 1F92      		push __zero_reg__
 152               	.LCFI4:
 153               		.cfi_def_cfa_offset 7
 154 009c 81E0      		ldi r24,lo8(1)
 155 009e 8F93      		push r24
 156               	.LCFI5:
 157               		.cfi_def_cfa_offset 8
 158 00a0 80E0      		ldi r24,lo8(__c.3011)
 159 00a2 90E0      		ldi r25,hi8(__c.3011)
 160 00a4 9F93      		push r25
 161               	.LCFI6:
 162               		.cfi_def_cfa_offset 9
 163 00a6 8F93      		push r24
 164               	.LCFI7:
 165               		.cfi_def_cfa_offset 10
 166 00a8 0E94 0000 		call __xprintf
 167               	.LVL21:
 168 00ac 80E0      		ldi r24,lo8(__c.3013)
 169 00ae 90E0      		ldi r25,hi8(__c.3013)
 170 00b0 0E94 0000 		call xputs
 171               	.LVL22:
 554:../../common/command.c ****     print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
 172               		.loc 1 554 0
 173 00b4 8DB7      		in r24,__SP_L__
 174 00b6 9EB7      		in r25,__SP_H__
 175 00b8 0896      		adiw r24,8
 176 00ba 0FB6      		in __tmp_reg__,__SREG__
 177 00bc F894      		cli
 178 00be 9EBF      		out __SP_H__,r25
 179 00c0 0FBE      		out __SREG__,__tmp_reg__
 180 00c2 8DBF      		out __SP_L__,r24
 181               	.LCFI8:
 182               		.cfi_def_cfa_offset 2
 183 00c4 80E0      		ldi r24,lo8(__c.3015)
 184 00c6 90E0      		ldi r25,hi8(__c.3015)
 185 00c8 0C94 0000 		jmp xputs
 186               	.LVL23:
 187               		.cfi_endproc
 188               	.LFE23:
 190               		.section	.text.mousekey_param_inc,"ax",@progbits
 192               	mousekey_param_inc:
 193               	.LFB21:
 440:../../common/command.c ****     switch (param) {
 194               		.loc 1 440 0
 195               		.cfi_startproc
 196               	.LVL24:
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 0 */
 200               	.L__stack_usage = 0
 441:../../common/command.c ****         case 1:
 201               		.loc 1 441 0
 202 0000 8330      		cpi r24,lo8(3)
 203 0002 01F4      		brne .+2
 204 0004 00C0      		rjmp .L5
 205 0006 00F4      		brsh .L6
 206 0008 8130      		cpi r24,lo8(1)
 207 000a 01F0      		breq .L7
 208 000c 8230      		cpi r24,lo8(2)
 209 000e 01F0      		breq .L8
 210 0010 0895      		ret
 211               	.L6:
 212 0012 8530      		cpi r24,lo8(5)
 213 0014 01F4      		brne .+2
 214 0016 00C0      		rjmp .L9
 215 0018 00F4      		brsh .+2
 216 001a 00C0      		rjmp .L10
 217 001c 8630      		cpi r24,lo8(6)
 218 001e 01F4      		brne .+2
 219 0020 00C0      		rjmp .L11
 220 0022 0895      		ret
 221               	.L7:
 443:../../common/command.c ****                 mk_delay += inc;
 222               		.loc 1 443 0
 223 0024 2091 0000 		lds r18,mk_delay
 224 0028 862F      		mov r24,r22
 225               	.LVL25:
 226 002a 90E0      		ldi r25,0
 227 002c 820F      		add r24,r18
 228 002e 911D      		adc r25,__zero_reg__
 229 0030 8F3F      		cpi r24,-1
 230 0032 9105      		cpc r25,__zero_reg__
 231 0034 00F4      		brsh .L12
 444:../../common/command.c ****             else
 232               		.loc 1 444 0
 233 0036 620F      		add r22,r18
 234               	.LVL26:
 235 0038 6093 0000 		sts mk_delay,r22
 236 003c 00C0      		rjmp .L13
 237               	.LVL27:
 238               	.L12:
 446:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 239               		.loc 1 446 0
 240 003e 8FEF      		ldi r24,lo8(-1)
 241 0040 8093 0000 		sts mk_delay,r24
 242               	.LVL28:
 243               	.L13:
 447:../../common/command.c ****             break;
 244               		.loc 1 447 0
 245 0044 80E0      		ldi r24,lo8(__c.2883)
 246 0046 90E0      		ldi r25,hi8(__c.2883)
 247 0048 0E94 0000 		call xputs
 248               	.LVL29:
 249 004c 8091 0000 		lds r24,mk_delay
 250 0050 1F92      		push __zero_reg__
 251               	.LCFI9:
 252               		.cfi_def_cfa_offset 3
 253 0052 8F93      		push r24
 254               	.LCFI10:
 255               		.cfi_def_cfa_offset 4
 256 0054 80E0      		ldi r24,lo8(__c.2885)
 257 0056 90E0      		ldi r25,hi8(__c.2885)
 258 0058 9F93      		push r25
 259               	.LCFI11:
 260               		.cfi_def_cfa_offset 5
 261 005a 8F93      		push r24
 262               	.LCFI12:
 263               		.cfi_def_cfa_offset 6
 264 005c 0E94 0000 		call __xprintf
 265               	.LVL30:
 266 0060 0F90      		pop __tmp_reg__
 267 0062 0F90      		pop __tmp_reg__
 268 0064 0F90      		pop __tmp_reg__
 269 0066 0F90      		pop __tmp_reg__
 270               	.LCFI13:
 271               		.cfi_def_cfa_offset 2
 272 0068 80E0      		ldi r24,lo8(__c.2887)
 273 006a 90E0      		ldi r25,hi8(__c.2887)
 274 006c 00C0      		rjmp .L24
 275               	.LVL31:
 276               	.L8:
 450:../../common/command.c ****                 mk_interval += inc;
 277               		.loc 1 450 0
 278 006e 2091 0000 		lds r18,mk_interval
 279 0072 862F      		mov r24,r22
 280               	.LVL32:
 281 0074 90E0      		ldi r25,0
 282 0076 820F      		add r24,r18
 283 0078 911D      		adc r25,__zero_reg__
 284 007a 8F3F      		cpi r24,-1
 285 007c 9105      		cpc r25,__zero_reg__
 286 007e 00F4      		brsh .L14
 451:../../common/command.c ****             else
 287               		.loc 1 451 0
 288 0080 620F      		add r22,r18
 289               	.LVL33:
 290 0082 6093 0000 		sts mk_interval,r22
 291 0086 00C0      		rjmp .L15
 292               	.LVL34:
 293               	.L14:
 453:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 294               		.loc 1 453 0
 295 0088 8FEF      		ldi r24,lo8(-1)
 296 008a 8093 0000 		sts mk_interval,r24
 297               	.LVL35:
 298               	.L15:
 454:../../common/command.c ****             break;
 299               		.loc 1 454 0
 300 008e 80E0      		ldi r24,lo8(__c.2891)
 301 0090 90E0      		ldi r25,hi8(__c.2891)
 302 0092 0E94 0000 		call xputs
 303               	.LVL36:
 304 0096 8091 0000 		lds r24,mk_interval
 305 009a 1F92      		push __zero_reg__
 306               	.LCFI14:
 307               		.cfi_def_cfa_offset 3
 308 009c 8F93      		push r24
 309               	.LCFI15:
 310               		.cfi_def_cfa_offset 4
 311 009e 80E0      		ldi r24,lo8(__c.2893)
 312 00a0 90E0      		ldi r25,hi8(__c.2893)
 313 00a2 9F93      		push r25
 314               	.LCFI16:
 315               		.cfi_def_cfa_offset 5
 316 00a4 8F93      		push r24
 317               	.LCFI17:
 318               		.cfi_def_cfa_offset 6
 319 00a6 0E94 0000 		call __xprintf
 320               	.LVL37:
 321 00aa 0F90      		pop __tmp_reg__
 322 00ac 0F90      		pop __tmp_reg__
 323 00ae 0F90      		pop __tmp_reg__
 324 00b0 0F90      		pop __tmp_reg__
 325               	.LCFI18:
 326               		.cfi_def_cfa_offset 2
 327 00b2 80E0      		ldi r24,lo8(__c.2895)
 328 00b4 90E0      		ldi r25,hi8(__c.2895)
 329 00b6 00C0      		rjmp .L24
 330               	.LVL38:
 331               	.L5:
 457:../../common/command.c ****                 mk_max_speed += inc;
 332               		.loc 1 457 0
 333 00b8 2091 0000 		lds r18,mk_max_speed
 334 00bc 862F      		mov r24,r22
 335               	.LVL39:
 336 00be 90E0      		ldi r25,0
 337 00c0 820F      		add r24,r18
 338 00c2 911D      		adc r25,__zero_reg__
 339 00c4 8F3F      		cpi r24,-1
 340 00c6 9105      		cpc r25,__zero_reg__
 341 00c8 00F4      		brsh .L16
 458:../../common/command.c ****             else
 342               		.loc 1 458 0
 343 00ca 620F      		add r22,r18
 344               	.LVL40:
 345 00cc 6093 0000 		sts mk_max_speed,r22
 346 00d0 00C0      		rjmp .L17
 347               	.LVL41:
 348               	.L16:
 460:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 349               		.loc 1 460 0
 350 00d2 8FEF      		ldi r24,lo8(-1)
 351 00d4 8093 0000 		sts mk_max_speed,r24
 352               	.LVL42:
 353               	.L17:
 461:../../common/command.c ****             break;
 354               		.loc 1 461 0
 355 00d8 80E0      		ldi r24,lo8(__c.2898)
 356 00da 90E0      		ldi r25,hi8(__c.2898)
 357 00dc 0E94 0000 		call xputs
 358               	.LVL43:
 359 00e0 8091 0000 		lds r24,mk_max_speed
 360 00e4 1F92      		push __zero_reg__
 361               	.LCFI19:
 362               		.cfi_def_cfa_offset 3
 363 00e6 8F93      		push r24
 364               	.LCFI20:
 365               		.cfi_def_cfa_offset 4
 366 00e8 80E0      		ldi r24,lo8(__c.2900)
 367 00ea 90E0      		ldi r25,hi8(__c.2900)
 368 00ec 9F93      		push r25
 369               	.LCFI21:
 370               		.cfi_def_cfa_offset 5
 371 00ee 8F93      		push r24
 372               	.LCFI22:
 373               		.cfi_def_cfa_offset 6
 374 00f0 0E94 0000 		call __xprintf
 375               	.LVL44:
 376 00f4 0F90      		pop __tmp_reg__
 377 00f6 0F90      		pop __tmp_reg__
 378 00f8 0F90      		pop __tmp_reg__
 379 00fa 0F90      		pop __tmp_reg__
 380               	.LCFI23:
 381               		.cfi_def_cfa_offset 2
 382 00fc 80E0      		ldi r24,lo8(__c.2902)
 383 00fe 90E0      		ldi r25,hi8(__c.2902)
 384 0100 00C0      		rjmp .L24
 385               	.LVL45:
 386               	.L10:
 464:../../common/command.c ****                 mk_time_to_max += inc;
 387               		.loc 1 464 0
 388 0102 2091 0000 		lds r18,mk_time_to_max
 389 0106 862F      		mov r24,r22
 390               	.LVL46:
 391 0108 90E0      		ldi r25,0
 392 010a 820F      		add r24,r18
 393 010c 911D      		adc r25,__zero_reg__
 394 010e 8F3F      		cpi r24,-1
 395 0110 9105      		cpc r25,__zero_reg__
 396 0112 00F4      		brsh .L18
 465:../../common/command.c ****             else
 397               		.loc 1 465 0
 398 0114 620F      		add r22,r18
 399               	.LVL47:
 400 0116 6093 0000 		sts mk_time_to_max,r22
 401 011a 00C0      		rjmp .L19
 402               	.LVL48:
 403               	.L18:
 467:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 404               		.loc 1 467 0
 405 011c 8FEF      		ldi r24,lo8(-1)
 406 011e 8093 0000 		sts mk_time_to_max,r24
 407               	.LVL49:
 408               	.L19:
 468:../../common/command.c ****             break;
 409               		.loc 1 468 0
 410 0122 80E0      		ldi r24,lo8(__c.2905)
 411 0124 90E0      		ldi r25,hi8(__c.2905)
 412 0126 0E94 0000 		call xputs
 413               	.LVL50:
 414 012a 8091 0000 		lds r24,mk_time_to_max
 415 012e 1F92      		push __zero_reg__
 416               	.LCFI24:
 417               		.cfi_def_cfa_offset 3
 418 0130 8F93      		push r24
 419               	.LCFI25:
 420               		.cfi_def_cfa_offset 4
 421 0132 80E0      		ldi r24,lo8(__c.2907)
 422 0134 90E0      		ldi r25,hi8(__c.2907)
 423 0136 9F93      		push r25
 424               	.LCFI26:
 425               		.cfi_def_cfa_offset 5
 426 0138 8F93      		push r24
 427               	.LCFI27:
 428               		.cfi_def_cfa_offset 6
 429 013a 0E94 0000 		call __xprintf
 430               	.LVL51:
 431 013e 0F90      		pop __tmp_reg__
 432 0140 0F90      		pop __tmp_reg__
 433 0142 0F90      		pop __tmp_reg__
 434 0144 0F90      		pop __tmp_reg__
 435               	.LCFI28:
 436               		.cfi_def_cfa_offset 2
 437 0146 80E0      		ldi r24,lo8(__c.2909)
 438 0148 90E0      		ldi r25,hi8(__c.2909)
 439 014a 00C0      		rjmp .L24
 440               	.LVL52:
 441               	.L9:
 471:../../common/command.c ****                 mk_wheel_max_speed += inc;
 442               		.loc 1 471 0
 443 014c 2091 0000 		lds r18,mk_wheel_max_speed
 444 0150 862F      		mov r24,r22
 445               	.LVL53:
 446 0152 90E0      		ldi r25,0
 447 0154 820F      		add r24,r18
 448 0156 911D      		adc r25,__zero_reg__
 449 0158 8F3F      		cpi r24,-1
 450 015a 9105      		cpc r25,__zero_reg__
 451 015c 00F4      		brsh .L20
 472:../../common/command.c ****             else
 452               		.loc 1 472 0
 453 015e 620F      		add r22,r18
 454               	.LVL54:
 455 0160 6093 0000 		sts mk_wheel_max_speed,r22
 456 0164 00C0      		rjmp .L21
 457               	.LVL55:
 458               	.L20:
 474:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 459               		.loc 1 474 0
 460 0166 8FEF      		ldi r24,lo8(-1)
 461 0168 8093 0000 		sts mk_wheel_max_speed,r24
 462               	.LVL56:
 463               	.L21:
 475:../../common/command.c ****             break;
 464               		.loc 1 475 0
 465 016c 80E0      		ldi r24,lo8(__c.2912)
 466 016e 90E0      		ldi r25,hi8(__c.2912)
 467 0170 0E94 0000 		call xputs
 468               	.LVL57:
 469 0174 8091 0000 		lds r24,mk_wheel_max_speed
 470 0178 1F92      		push __zero_reg__
 471               	.LCFI29:
 472               		.cfi_def_cfa_offset 3
 473 017a 8F93      		push r24
 474               	.LCFI30:
 475               		.cfi_def_cfa_offset 4
 476 017c 80E0      		ldi r24,lo8(__c.2914)
 477 017e 90E0      		ldi r25,hi8(__c.2914)
 478 0180 9F93      		push r25
 479               	.LCFI31:
 480               		.cfi_def_cfa_offset 5
 481 0182 8F93      		push r24
 482               	.LCFI32:
 483               		.cfi_def_cfa_offset 6
 484 0184 0E94 0000 		call __xprintf
 485               	.LVL58:
 486 0188 0F90      		pop __tmp_reg__
 487 018a 0F90      		pop __tmp_reg__
 488 018c 0F90      		pop __tmp_reg__
 489 018e 0F90      		pop __tmp_reg__
 490               	.LCFI33:
 491               		.cfi_def_cfa_offset 2
 492 0190 80E0      		ldi r24,lo8(__c.2916)
 493 0192 90E0      		ldi r25,hi8(__c.2916)
 494 0194 00C0      		rjmp .L24
 495               	.LVL59:
 496               	.L11:
 478:../../common/command.c ****                 mk_wheel_time_to_max += inc;
 497               		.loc 1 478 0
 498 0196 2091 0000 		lds r18,mk_wheel_time_to_max
 499 019a 862F      		mov r24,r22
 500               	.LVL60:
 501 019c 90E0      		ldi r25,0
 502 019e 820F      		add r24,r18
 503 01a0 911D      		adc r25,__zero_reg__
 504 01a2 8F3F      		cpi r24,-1
 505 01a4 9105      		cpc r25,__zero_reg__
 506 01a6 00F4      		brsh .L22
 479:../../common/command.c ****             else
 507               		.loc 1 479 0
 508 01a8 620F      		add r22,r18
 509               	.LVL61:
 510 01aa 6093 0000 		sts mk_wheel_time_to_max,r22
 511 01ae 00C0      		rjmp .L23
 512               	.LVL62:
 513               	.L22:
 481:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 514               		.loc 1 481 0
 515 01b0 8FEF      		ldi r24,lo8(-1)
 516 01b2 8093 0000 		sts mk_wheel_time_to_max,r24
 517               	.LVL63:
 518               	.L23:
 482:../../common/command.c ****             break;
 519               		.loc 1 482 0
 520 01b6 80E0      		ldi r24,lo8(__c.2919)
 521 01b8 90E0      		ldi r25,hi8(__c.2919)
 522 01ba 0E94 0000 		call xputs
 523               	.LVL64:
 524 01be 8091 0000 		lds r24,mk_wheel_time_to_max
 525 01c2 1F92      		push __zero_reg__
 526               	.LCFI34:
 527               		.cfi_def_cfa_offset 3
 528 01c4 8F93      		push r24
 529               	.LCFI35:
 530               		.cfi_def_cfa_offset 4
 531 01c6 80E0      		ldi r24,lo8(__c.2921)
 532 01c8 90E0      		ldi r25,hi8(__c.2921)
 533 01ca 9F93      		push r25
 534               	.LCFI36:
 535               		.cfi_def_cfa_offset 5
 536 01cc 8F93      		push r24
 537               	.LCFI37:
 538               		.cfi_def_cfa_offset 6
 539 01ce 0E94 0000 		call __xprintf
 540               	.LVL65:
 541 01d2 0F90      		pop __tmp_reg__
 542 01d4 0F90      		pop __tmp_reg__
 543 01d6 0F90      		pop __tmp_reg__
 544 01d8 0F90      		pop __tmp_reg__
 545               	.LCFI38:
 546               		.cfi_def_cfa_offset 2
 547 01da 80E0      		ldi r24,lo8(__c.2923)
 548 01dc 90E0      		ldi r25,hi8(__c.2923)
 549               	.L24:
 550 01de 0C94 0000 		jmp xputs
 551               	.LVL66:
 552               		.cfi_endproc
 553               	.LFE21:
 555               		.section	.text.mousekey_param_dec,"ax",@progbits
 557               	mousekey_param_dec:
 558               	.LFB22:
 488:../../common/command.c ****     switch (param) {
 559               		.loc 1 488 0
 560               		.cfi_startproc
 561               	.LVL67:
 562               	/* prologue: function */
 563               	/* frame size = 0 */
 564               	/* stack size = 0 */
 565               	.L__stack_usage = 0
 489:../../common/command.c ****         case 1:
 566               		.loc 1 489 0
 567 0000 8330      		cpi r24,lo8(3)
 568 0002 01F4      		brne .+2
 569 0004 00C0      		rjmp .L28
 570 0006 00F4      		brsh .L29
 571 0008 8130      		cpi r24,lo8(1)
 572 000a 01F0      		breq .L30
 573 000c 8230      		cpi r24,lo8(2)
 574 000e 01F0      		breq .L31
 575 0010 0895      		ret
 576               	.L29:
 577 0012 8530      		cpi r24,lo8(5)
 578 0014 01F4      		brne .+2
 579 0016 00C0      		rjmp .L32
 580 0018 00F4      		brsh .+2
 581 001a 00C0      		rjmp .L33
 582 001c 8630      		cpi r24,lo8(6)
 583 001e 01F4      		brne .+2
 584 0020 00C0      		rjmp .L34
 585 0022 0895      		ret
 586               	.L30:
 491:../../common/command.c ****                 mk_delay -= dec;
 587               		.loc 1 491 0
 588 0024 8091 0000 		lds r24,mk_delay
 589               	.LVL68:
 590 0028 6817      		cp r22,r24
 591 002a 00F4      		brsh .L35
 492:../../common/command.c ****             else
 592               		.loc 1 492 0
 593 002c 861B      		sub r24,r22
 594 002e 8093 0000 		sts mk_delay,r24
 595 0032 00C0      		rjmp .L36
 596               	.L35:
 494:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 597               		.loc 1 494 0
 598 0034 1092 0000 		sts mk_delay,__zero_reg__
 599               	.L36:
 495:../../common/command.c ****             break;
 600               		.loc 1 495 0
 601 0038 80E0      		ldi r24,lo8(__c.2930)
 602 003a 90E0      		ldi r25,hi8(__c.2930)
 603 003c 0E94 0000 		call xputs
 604               	.LVL69:
 605 0040 8091 0000 		lds r24,mk_delay
 606 0044 1F92      		push __zero_reg__
 607               	.LCFI39:
 608               		.cfi_def_cfa_offset 3
 609 0046 8F93      		push r24
 610               	.LCFI40:
 611               		.cfi_def_cfa_offset 4
 612 0048 80E0      		ldi r24,lo8(__c.2932)
 613 004a 90E0      		ldi r25,hi8(__c.2932)
 614 004c 9F93      		push r25
 615               	.LCFI41:
 616               		.cfi_def_cfa_offset 5
 617 004e 8F93      		push r24
 618               	.LCFI42:
 619               		.cfi_def_cfa_offset 6
 620 0050 0E94 0000 		call __xprintf
 621               	.LVL70:
 622 0054 0F90      		pop __tmp_reg__
 623 0056 0F90      		pop __tmp_reg__
 624 0058 0F90      		pop __tmp_reg__
 625 005a 0F90      		pop __tmp_reg__
 626               	.LCFI43:
 627               		.cfi_def_cfa_offset 2
 628 005c 80E0      		ldi r24,lo8(__c.2934)
 629 005e 90E0      		ldi r25,hi8(__c.2934)
 630 0060 00C0      		rjmp .L47
 631               	.LVL71:
 632               	.L31:
 498:../../common/command.c ****                 mk_interval -= dec;
 633               		.loc 1 498 0
 634 0062 8091 0000 		lds r24,mk_interval
 635               	.LVL72:
 636 0066 6817      		cp r22,r24
 637 0068 00F4      		brsh .L37
 499:../../common/command.c ****             else
 638               		.loc 1 499 0
 639 006a 861B      		sub r24,r22
 640 006c 8093 0000 		sts mk_interval,r24
 641 0070 00C0      		rjmp .L38
 642               	.L37:
 501:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 643               		.loc 1 501 0
 644 0072 1092 0000 		sts mk_interval,__zero_reg__
 645               	.L38:
 502:../../common/command.c ****             break;
 646               		.loc 1 502 0
 647 0076 80E0      		ldi r24,lo8(__c.2938)
 648 0078 90E0      		ldi r25,hi8(__c.2938)
 649 007a 0E94 0000 		call xputs
 650               	.LVL73:
 651 007e 8091 0000 		lds r24,mk_interval
 652 0082 1F92      		push __zero_reg__
 653               	.LCFI44:
 654               		.cfi_def_cfa_offset 3
 655 0084 8F93      		push r24
 656               	.LCFI45:
 657               		.cfi_def_cfa_offset 4
 658 0086 80E0      		ldi r24,lo8(__c.2940)
 659 0088 90E0      		ldi r25,hi8(__c.2940)
 660 008a 9F93      		push r25
 661               	.LCFI46:
 662               		.cfi_def_cfa_offset 5
 663 008c 8F93      		push r24
 664               	.LCFI47:
 665               		.cfi_def_cfa_offset 6
 666 008e 0E94 0000 		call __xprintf
 667               	.LVL74:
 668 0092 0F90      		pop __tmp_reg__
 669 0094 0F90      		pop __tmp_reg__
 670 0096 0F90      		pop __tmp_reg__
 671 0098 0F90      		pop __tmp_reg__
 672               	.LCFI48:
 673               		.cfi_def_cfa_offset 2
 674 009a 80E0      		ldi r24,lo8(__c.2942)
 675 009c 90E0      		ldi r25,hi8(__c.2942)
 676 009e 00C0      		rjmp .L47
 677               	.LVL75:
 678               	.L28:
 505:../../common/command.c ****                 mk_max_speed -= dec;
 679               		.loc 1 505 0
 680 00a0 8091 0000 		lds r24,mk_max_speed
 681               	.LVL76:
 682 00a4 6817      		cp r22,r24
 683 00a6 00F4      		brsh .L39
 506:../../common/command.c ****             else
 684               		.loc 1 506 0
 685 00a8 861B      		sub r24,r22
 686 00aa 8093 0000 		sts mk_max_speed,r24
 687 00ae 00C0      		rjmp .L40
 688               	.L39:
 508:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 689               		.loc 1 508 0
 690 00b0 1092 0000 		sts mk_max_speed,__zero_reg__
 691               	.L40:
 509:../../common/command.c ****             break;
 692               		.loc 1 509 0
 693 00b4 80E0      		ldi r24,lo8(__c.2945)
 694 00b6 90E0      		ldi r25,hi8(__c.2945)
 695 00b8 0E94 0000 		call xputs
 696               	.LVL77:
 697 00bc 8091 0000 		lds r24,mk_max_speed
 698 00c0 1F92      		push __zero_reg__
 699               	.LCFI49:
 700               		.cfi_def_cfa_offset 3
 701 00c2 8F93      		push r24
 702               	.LCFI50:
 703               		.cfi_def_cfa_offset 4
 704 00c4 80E0      		ldi r24,lo8(__c.2947)
 705 00c6 90E0      		ldi r25,hi8(__c.2947)
 706 00c8 9F93      		push r25
 707               	.LCFI51:
 708               		.cfi_def_cfa_offset 5
 709 00ca 8F93      		push r24
 710               	.LCFI52:
 711               		.cfi_def_cfa_offset 6
 712 00cc 0E94 0000 		call __xprintf
 713               	.LVL78:
 714 00d0 0F90      		pop __tmp_reg__
 715 00d2 0F90      		pop __tmp_reg__
 716 00d4 0F90      		pop __tmp_reg__
 717 00d6 0F90      		pop __tmp_reg__
 718               	.LCFI53:
 719               		.cfi_def_cfa_offset 2
 720 00d8 80E0      		ldi r24,lo8(__c.2949)
 721 00da 90E0      		ldi r25,hi8(__c.2949)
 722 00dc 00C0      		rjmp .L47
 723               	.LVL79:
 724               	.L33:
 512:../../common/command.c ****                 mk_time_to_max -= dec;
 725               		.loc 1 512 0
 726 00de 8091 0000 		lds r24,mk_time_to_max
 727               	.LVL80:
 728 00e2 6817      		cp r22,r24
 729 00e4 00F4      		brsh .L41
 513:../../common/command.c ****             else
 730               		.loc 1 513 0
 731 00e6 861B      		sub r24,r22
 732 00e8 8093 0000 		sts mk_time_to_max,r24
 733 00ec 00C0      		rjmp .L42
 734               	.L41:
 515:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 735               		.loc 1 515 0
 736 00ee 1092 0000 		sts mk_time_to_max,__zero_reg__
 737               	.L42:
 516:../../common/command.c ****             break;
 738               		.loc 1 516 0
 739 00f2 80E0      		ldi r24,lo8(__c.2952)
 740 00f4 90E0      		ldi r25,hi8(__c.2952)
 741 00f6 0E94 0000 		call xputs
 742               	.LVL81:
 743 00fa 8091 0000 		lds r24,mk_time_to_max
 744 00fe 1F92      		push __zero_reg__
 745               	.LCFI54:
 746               		.cfi_def_cfa_offset 3
 747 0100 8F93      		push r24
 748               	.LCFI55:
 749               		.cfi_def_cfa_offset 4
 750 0102 80E0      		ldi r24,lo8(__c.2954)
 751 0104 90E0      		ldi r25,hi8(__c.2954)
 752 0106 9F93      		push r25
 753               	.LCFI56:
 754               		.cfi_def_cfa_offset 5
 755 0108 8F93      		push r24
 756               	.LCFI57:
 757               		.cfi_def_cfa_offset 6
 758 010a 0E94 0000 		call __xprintf
 759               	.LVL82:
 760 010e 0F90      		pop __tmp_reg__
 761 0110 0F90      		pop __tmp_reg__
 762 0112 0F90      		pop __tmp_reg__
 763 0114 0F90      		pop __tmp_reg__
 764               	.LCFI58:
 765               		.cfi_def_cfa_offset 2
 766 0116 80E0      		ldi r24,lo8(__c.2956)
 767 0118 90E0      		ldi r25,hi8(__c.2956)
 768 011a 00C0      		rjmp .L47
 769               	.LVL83:
 770               	.L32:
 519:../../common/command.c ****                 mk_wheel_max_speed -= dec;
 771               		.loc 1 519 0
 772 011c 8091 0000 		lds r24,mk_wheel_max_speed
 773               	.LVL84:
 774 0120 6817      		cp r22,r24
 775 0122 00F4      		brsh .L43
 520:../../common/command.c ****             else
 776               		.loc 1 520 0
 777 0124 861B      		sub r24,r22
 778 0126 8093 0000 		sts mk_wheel_max_speed,r24
 779 012a 00C0      		rjmp .L44
 780               	.L43:
 522:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 781               		.loc 1 522 0
 782 012c 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 783               	.L44:
 523:../../common/command.c ****             break;
 784               		.loc 1 523 0
 785 0130 80E0      		ldi r24,lo8(__c.2959)
 786 0132 90E0      		ldi r25,hi8(__c.2959)
 787 0134 0E94 0000 		call xputs
 788               	.LVL85:
 789 0138 8091 0000 		lds r24,mk_wheel_max_speed
 790 013c 1F92      		push __zero_reg__
 791               	.LCFI59:
 792               		.cfi_def_cfa_offset 3
 793 013e 8F93      		push r24
 794               	.LCFI60:
 795               		.cfi_def_cfa_offset 4
 796 0140 80E0      		ldi r24,lo8(__c.2961)
 797 0142 90E0      		ldi r25,hi8(__c.2961)
 798 0144 9F93      		push r25
 799               	.LCFI61:
 800               		.cfi_def_cfa_offset 5
 801 0146 8F93      		push r24
 802               	.LCFI62:
 803               		.cfi_def_cfa_offset 6
 804 0148 0E94 0000 		call __xprintf
 805               	.LVL86:
 806 014c 0F90      		pop __tmp_reg__
 807 014e 0F90      		pop __tmp_reg__
 808 0150 0F90      		pop __tmp_reg__
 809 0152 0F90      		pop __tmp_reg__
 810               	.LCFI63:
 811               		.cfi_def_cfa_offset 2
 812 0154 80E0      		ldi r24,lo8(__c.2963)
 813 0156 90E0      		ldi r25,hi8(__c.2963)
 814 0158 00C0      		rjmp .L47
 815               	.LVL87:
 816               	.L34:
 526:../../common/command.c ****                 mk_wheel_time_to_max -= dec;
 817               		.loc 1 526 0
 818 015a 8091 0000 		lds r24,mk_wheel_time_to_max
 819               	.LVL88:
 820 015e 6817      		cp r22,r24
 821 0160 00F4      		brsh .L45
 527:../../common/command.c ****             else
 822               		.loc 1 527 0
 823 0162 861B      		sub r24,r22
 824 0164 8093 0000 		sts mk_wheel_time_to_max,r24
 825 0168 00C0      		rjmp .L46
 826               	.L45:
 529:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 827               		.loc 1 529 0
 828 016a 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 829               	.L46:
 530:../../common/command.c ****             break;
 830               		.loc 1 530 0
 831 016e 80E0      		ldi r24,lo8(__c.2966)
 832 0170 90E0      		ldi r25,hi8(__c.2966)
 833 0172 0E94 0000 		call xputs
 834               	.LVL89:
 835 0176 8091 0000 		lds r24,mk_wheel_time_to_max
 836 017a 1F92      		push __zero_reg__
 837               	.LCFI64:
 838               		.cfi_def_cfa_offset 3
 839 017c 8F93      		push r24
 840               	.LCFI65:
 841               		.cfi_def_cfa_offset 4
 842 017e 80E0      		ldi r24,lo8(__c.2968)
 843 0180 90E0      		ldi r25,hi8(__c.2968)
 844 0182 9F93      		push r25
 845               	.LCFI66:
 846               		.cfi_def_cfa_offset 5
 847 0184 8F93      		push r24
 848               	.LCFI67:
 849               		.cfi_def_cfa_offset 6
 850 0186 0E94 0000 		call __xprintf
 851               	.LVL90:
 852 018a 0F90      		pop __tmp_reg__
 853 018c 0F90      		pop __tmp_reg__
 854 018e 0F90      		pop __tmp_reg__
 855 0190 0F90      		pop __tmp_reg__
 856               	.LCFI68:
 857               		.cfi_def_cfa_offset 2
 858 0192 80E0      		ldi r24,lo8(__c.2970)
 859 0194 90E0      		ldi r25,hi8(__c.2970)
 860               	.L47:
 861 0196 0C94 0000 		jmp xputs
 862               	.LVL91:
 863               		.cfi_endproc
 864               	.LFE22:
 866               		.section	.text.switch_default_layer,"ax",@progbits
 868               	switch_default_layer:
 869               	.LFB26:
 555:../../common/command.c **** }
 556:../../common/command.c **** 
 557:../../common/command.c **** static bool mousekey_console(uint8_t code)
 558:../../common/command.c **** {
 559:../../common/command.c ****     switch (code) {
 560:../../common/command.c ****         case KC_H:
 561:../../common/command.c ****         case KC_SLASH: /* ? */
 562:../../common/command.c ****             mousekey_console_help();
 563:../../common/command.c ****             break;
 564:../../common/command.c ****         case KC_Q:
 565:../../common/command.c ****         case KC_ESC:
 566:../../common/command.c ****             mousekey_param = 0;
 567:../../common/command.c ****             print("\nQuit Mousekey Console\n");
 568:../../common/command.c ****             print("C> ");
 569:../../common/command.c ****             command_state = CONSOLE;
 570:../../common/command.c ****             return false;
 571:../../common/command.c ****         case KC_P:
 572:../../common/command.c ****             mousekey_param_print();
 573:../../common/command.c ****             break;
 574:../../common/command.c ****         case KC_1:
 575:../../common/command.c ****         case KC_2:
 576:../../common/command.c ****         case KC_3:
 577:../../common/command.c ****         case KC_4:
 578:../../common/command.c ****         case KC_5:
 579:../../common/command.c ****         case KC_6:
 580:../../common/command.c ****         case KC_7:
 581:../../common/command.c ****         case KC_8:
 582:../../common/command.c ****         case KC_9:
 583:../../common/command.c ****         case KC_0:
 584:../../common/command.c ****             mousekey_param = numkey2num(code);
 585:../../common/command.c ****             print("selected parameter: "); pdec(mousekey_param); print("\n");
 586:../../common/command.c ****             break;
 587:../../common/command.c ****         case KC_UP:
 588:../../common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 589:../../common/command.c ****             break;
 590:../../common/command.c ****         case KC_DOWN:
 591:../../common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 592:../../common/command.c ****             break;
 593:../../common/command.c ****         case KC_PGUP:
 594:../../common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 595:../../common/command.c ****             break;
 596:../../common/command.c ****         case KC_PGDN:
 597:../../common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 598:../../common/command.c ****             break;
 599:../../common/command.c ****         case KC_D:
 600:../../common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 601:../../common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 602:../../common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 603:../../common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 604:../../common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 605:../../common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 606:../../common/command.c ****             print("set default values.\n");
 607:../../common/command.c ****             break;
 608:../../common/command.c ****         default:
 609:../../common/command.c ****             print("?");
 610:../../common/command.c ****             return false;
 611:../../common/command.c ****     }
 612:../../common/command.c ****     print("M"); pdec(mousekey_param); print("> ");
 613:../../common/command.c ****     return true;
 614:../../common/command.c **** }
 615:../../common/command.c **** #endif
 616:../../common/command.c **** 
 617:../../common/command.c **** 
 618:../../common/command.c **** /***********************************************************
 619:../../common/command.c ****  * Utilities
 620:../../common/command.c ****  ***********************************************************/
 621:../../common/command.c **** static uint8_t numkey2num(uint8_t code)
 622:../../common/command.c **** {
 623:../../common/command.c ****     switch (code) {
 624:../../common/command.c ****         case KC_1: return 1;
 625:../../common/command.c ****         case KC_2: return 2;
 626:../../common/command.c ****         case KC_3: return 3;
 627:../../common/command.c ****         case KC_4: return 4;
 628:../../common/command.c ****         case KC_5: return 5;
 629:../../common/command.c ****         case KC_6: return 6;
 630:../../common/command.c ****         case KC_7: return 7;
 631:../../common/command.c ****         case KC_8: return 8;
 632:../../common/command.c ****         case KC_9: return 9;
 633:../../common/command.c ****         case KC_0: return 0;
 634:../../common/command.c ****     }
 635:../../common/command.c ****     return 0;
 636:../../common/command.c **** }
 637:../../common/command.c **** 
 638:../../common/command.c **** static void switch_default_layer(uint8_t layer)
 639:../../common/command.c **** {
 870               		.loc 1 639 0
 871               		.cfi_startproc
 872               	.LVL92:
 873 0000 CF93      		push r28
 874               	.LCFI69:
 875               		.cfi_def_cfa_offset 3
 876               		.cfi_offset 28, -2
 877               	/* prologue: function */
 878               	/* frame size = 0 */
 879               	/* stack size = 1 */
 880               	.L__stack_usage = 1
 881 0002 C82F      		mov r28,r24
 640:../../common/command.c ****     print("switch_default_layer: "); print_dec(biton32(default_layer_state));
 882               		.loc 1 640 0
 883 0004 80E0      		ldi r24,lo8(__c.3078)
 884 0006 90E0      		ldi r25,hi8(__c.3078)
 885               	.LVL93:
 886 0008 0E94 0000 		call xputs
 887               	.LVL94:
 888 000c 6091 0000 		lds r22,default_layer_state
 889 0010 7091 0000 		lds r23,default_layer_state+1
 890 0014 8091 0000 		lds r24,default_layer_state+2
 891 0018 9091 0000 		lds r25,default_layer_state+3
 892 001c 0E94 0000 		call biton32
 893               	.LVL95:
 894 0020 1F92      		push __zero_reg__
 895               	.LCFI70:
 896               		.cfi_def_cfa_offset 4
 897 0022 8F93      		push r24
 898               	.LCFI71:
 899               		.cfi_def_cfa_offset 5
 900 0024 20E0      		ldi r18,lo8(__c.3080)
 901 0026 30E0      		ldi r19,hi8(__c.3080)
 902 0028 3F93      		push r19
 903               	.LCFI72:
 904               		.cfi_def_cfa_offset 6
 905 002a 2F93      		push r18
 906               	.LCFI73:
 907               		.cfi_def_cfa_offset 7
 908 002c 0E94 0000 		call __xprintf
 909               	.LVL96:
 641:../../common/command.c ****     print(" to "); print_dec(layer); print("\n");
 910               		.loc 1 641 0
 911 0030 80E0      		ldi r24,lo8(__c.3082)
 912 0032 90E0      		ldi r25,hi8(__c.3082)
 913 0034 0E94 0000 		call xputs
 914               	.LVL97:
 915 0038 1F92      		push __zero_reg__
 916               	.LCFI74:
 917               		.cfi_def_cfa_offset 8
 918 003a CF93      		push r28
 919               	.LCFI75:
 920               		.cfi_def_cfa_offset 9
 921 003c 20E0      		ldi r18,lo8(__c.3084)
 922 003e 30E0      		ldi r19,hi8(__c.3084)
 923 0040 3F93      		push r19
 924               	.LCFI76:
 925               		.cfi_def_cfa_offset 10
 926 0042 2F93      		push r18
 927               	.LCFI77:
 928               		.cfi_def_cfa_offset 11
 929 0044 0E94 0000 		call __xprintf
 930               	.LVL98:
 931 0048 80E0      		ldi r24,lo8(__c.3086)
 932 004a 90E0      		ldi r25,hi8(__c.3086)
 933 004c 0E94 0000 		call xputs
 934               	.LVL99:
 642:../../common/command.c ****     default_layer_set(1UL<<layer);
 935               		.loc 1 642 0
 936 0050 61E0      		ldi r22,lo8(1)
 937 0052 70E0      		ldi r23,0
 938 0054 80E0      		ldi r24,0
 939 0056 90E0      		ldi r25,0
 940 0058 00C0      		rjmp 2f
 941               		1:
 942 005a 660F      		lsl r22
 943 005c 771F      		rol r23
 944 005e 881F      		rol r24
 945 0060 991F      		rol r25
 946               		2:
 947 0062 CA95      		dec r28
 948 0064 02F4      		brpl 1b
 949 0066 0E94 0000 		call default_layer_set
 950               	.LVL100:
 643:../../common/command.c ****     clear_keyboard();
 951               		.loc 1 643 0
 952 006a 8DB7      		in r24,__SP_L__
 953 006c 9EB7      		in r25,__SP_H__
 954 006e 0896      		adiw r24,8
 955 0070 0FB6      		in __tmp_reg__,__SREG__
 956 0072 F894      		cli
 957 0074 9EBF      		out __SP_H__,r25
 958 0076 0FBE      		out __SREG__,__tmp_reg__
 959 0078 8DBF      		out __SP_L__,r24
 960               	.LCFI78:
 961               		.cfi_def_cfa_offset 3
 962               	/* epilogue start */
 644:../../common/command.c **** }
 963               		.loc 1 644 0
 964 007a CF91      		pop r28
 965               	.LVL101:
 643:../../common/command.c ****     clear_keyboard();
 966               		.loc 1 643 0
 967 007c 0C94 0000 		jmp clear_keyboard
 968               	.LVL102:
 969               		.cfi_endproc
 970               	.LFE26:
 972               		.section	.text.command_common,"ax",@progbits
 974               	command_common:
 975               	.LFB17:
 177:../../common/command.c ****     static host_driver_t *host_driver = 0;
 976               		.loc 1 177 0
 977               		.cfi_startproc
 978 0000 CF93      		push r28
 979               	.LCFI79:
 980               		.cfi_def_cfa_offset 3
 981               		.cfi_offset 28, -2
 982               	/* prologue: function */
 983               	/* frame size = 0 */
 984               	/* stack size = 1 */
 985               	.L__stack_usage = 1
 179:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 986               		.loc 1 179 0
 987 0002 482F      		mov r20,r24
 988 0004 50E0      		ldi r21,0
 989 0006 FA01      		movw r30,r20
 990 0008 3697      		sbiw r30,6
 991 000a E334      		cpi r30,67
 992 000c F105      		cpc r31,__zero_reg__
 993 000e 00F0      		brlo .+2
 994 0010 00C0      		rjmp .L50
 995 0012 E050      		subi r30,lo8(-(gs(.L52)))
 996 0014 F040      		sbci r31,hi8(-(gs(.L52)))
 997 0016 0C94 0000 		jmp __tablejump2__
 998               		.section	.progmem.gcc_sw_table.command_common,"a",@progbits
 999               		.p2align	1
 1000               	.L52:
 1001 0000 0000      		.word gs(.L51)
 1002 0002 0000      		.word gs(.L53)
 1003 0004 0000      		.word gs(.L54)
 1004 0006 0000      		.word gs(.L50)
 1005 0008 0000      		.word gs(.L50)
 1006 000a 0000      		.word gs(.L55)
 1007 000c 0000      		.word gs(.L50)
 1008 000e 0000      		.word gs(.L50)
 1009 0010 0000      		.word gs(.L56)
 1010 0012 0000      		.word gs(.L50)
 1011 0014 0000      		.word gs(.L57)
 1012 0016 0000      		.word gs(.L58)
 1013 0018 0000      		.word gs(.L50)
 1014 001a 0000      		.word gs(.L50)
 1015 001c 0000      		.word gs(.L50)
 1016 001e 0000      		.word gs(.L50)
 1017 0020 0000      		.word gs(.L59)
 1018 0022 0000      		.word gs(.L60)
 1019 0024 0000      		.word gs(.L50)
 1020 0026 0000      		.word gs(.L61)
 1021 0028 0000      		.word gs(.L50)
 1022 002a 0000      		.word gs(.L62)
 1023 002c 0000      		.word gs(.L50)
 1024 002e 0000      		.word gs(.L63)
 1025 0030 0000      		.word gs(.L64)
 1026 0032 0000      		.word gs(.L64)
 1027 0034 0000      		.word gs(.L64)
 1028 0036 0000      		.word gs(.L64)
 1029 0038 0000      		.word gs(.L64)
 1030 003a 0000      		.word gs(.L64)
 1031 003c 0000      		.word gs(.L64)
 1032 003e 0000      		.word gs(.L64)
 1033 0040 0000      		.word gs(.L64)
 1034 0042 0000      		.word gs(.L65)
 1035 0044 0000      		.word gs(.L50)
 1036 0046 0000      		.word gs(.L65)
 1037 0048 0000      		.word gs(.L50)
 1038 004a 0000      		.word gs(.L50)
 1039 004c 0000      		.word gs(.L50)
 1040 004e 0000      		.word gs(.L50)
 1041 0050 0000      		.word gs(.L50)
 1042 0052 0000      		.word gs(.L50)
 1043 0054 0000      		.word gs(.L50)
 1044 0056 0000      		.word gs(.L50)
 1045 0058 0000      		.word gs(.L50)
 1046 005a 0000      		.word gs(.L50)
 1047 005c 0000      		.word gs(.L50)
 1048 005e 0000      		.word gs(.L65)
 1049 0060 0000      		.word gs(.L50)
 1050 0062 0000      		.word gs(.L50)
 1051 0064 0000      		.word gs(.L55)
 1052 0066 0000      		.word gs(.L66)
 1053 0068 0000      		.word gs(.L67)
 1054 006a 0000      		.word gs(.L67)
 1055 006c 0000      		.word gs(.L67)
 1056 006e 0000      		.word gs(.L67)
 1057 0070 0000      		.word gs(.L67)
 1058 0072 0000      		.word gs(.L67)
 1059 0074 0000      		.word gs(.L67)
 1060 0076 0000      		.word gs(.L67)
 1061 0078 0000      		.word gs(.L67)
 1062 007a 0000      		.word gs(.L67)
 1063 007c 0000      		.word gs(.L67)
 1064 007e 0000      		.word gs(.L67)
 1065 0080 0000      		.word gs(.L68)
 1066 0082 0000      		.word gs(.L50)
 1067 0084 0000      		.word gs(.L69)
 1068               		.section	.text.command_common
 1069               	.L63:
 183:../../common/command.c ****             sleep_led_toggle();
 1070               		.loc 1 183 0
 1071 001a 80E0      		ldi r24,lo8(__c.2715)
 1072 001c 90E0      		ldi r25,hi8(__c.2715)
 1073 001e 0E94 0000 		call xputs
 184:../../common/command.c ****             led_set(host_keyboard_leds());
 1074               		.loc 1 184 0
 1075 0022 0E94 0000 		call sleep_led_toggle
 185:../../common/command.c ****             break;
 1076               		.loc 1 185 0
 1077 0026 0E94 0000 		call host_keyboard_leds
 1078 002a 0E94 0000 		call led_set
 1079 002e 00C0      		rjmp .L84
 1080               	.L54:
 190:../../common/command.c ****             print_eeconfig();
 1081               		.loc 1 190 0
 1082 0030 80E0      		ldi r24,lo8(__c.2719)
 1083 0032 90E0      		ldi r25,hi8(__c.2719)
 1084 0034 0E94 0000 		call xputs
 1085               	.LBB149:
 1086               	.LBB150:
 144:../../common/command.c **** 
 1087               		.loc 1 144 0
 1088 0038 80E0      		ldi r24,lo8(__c.2618)
 1089 003a 90E0      		ldi r25,hi8(__c.2618)
 1090 003c 0E94 0000 		call xputs
 1091 0040 0E94 0000 		call eeconfig_read_default_layer
 1092 0044 1F92      		push __zero_reg__
 1093               	.LCFI80:
 1094               		.cfi_def_cfa_offset 4
 1095 0046 8F93      		push r24
 1096               	.LCFI81:
 1097               		.cfi_def_cfa_offset 5
 1098 0048 80E0      		ldi r24,lo8(__c.2620)
 1099 004a 90E0      		ldi r25,hi8(__c.2620)
 1100 004c 9F93      		push r25
 1101               	.LCFI82:
 1102               		.cfi_def_cfa_offset 6
 1103 004e 8F93      		push r24
 1104               	.LCFI83:
 1105               		.cfi_def_cfa_offset 7
 1106 0050 0E94 0000 		call __xprintf
 1107 0054 80E0      		ldi r24,lo8(__c.2622)
 1108 0056 90E0      		ldi r25,hi8(__c.2622)
 1109 0058 0E94 0000 		call xputs
 147:../../common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 1110               		.loc 1 147 0
 1111 005c 0E94 0000 		call eeconfig_read_debug
 1112 0060 C82F      		mov r28,r24
 148:../../common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 1113               		.loc 1 148 0
 1114 0062 80E0      		ldi r24,lo8(__c.2625)
 1115 0064 90E0      		ldi r25,hi8(__c.2625)
 1116 0066 0E94 0000 		call xputs
 1117 006a 1F92      		push __zero_reg__
 1118               	.LCFI84:
 1119               		.cfi_def_cfa_offset 8
 1120 006c CF93      		push r28
 1121               	.LCFI85:
 1122               		.cfi_def_cfa_offset 9
 1123 006e 20E0      		ldi r18,lo8(__c.2627)
 1124 0070 30E0      		ldi r19,hi8(__c.2627)
 1125 0072 3F93      		push r19
 1126               	.LCFI86:
 1127               		.cfi_def_cfa_offset 10
 1128 0074 2F93      		push r18
 1129               	.LCFI87:
 1130               		.cfi_def_cfa_offset 11
 1131 0076 0E94 0000 		call __xprintf
 1132 007a 80E0      		ldi r24,lo8(__c.2629)
 1133 007c 90E0      		ldi r25,hi8(__c.2629)
 1134 007e 0E94 0000 		call xputs
 149:../../common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 1135               		.loc 1 149 0
 1136 0082 80E0      		ldi r24,lo8(__c.2631)
 1137 0084 90E0      		ldi r25,hi8(__c.2631)
 1138 0086 0E94 0000 		call xputs
 1139 008a 8C2F      		mov r24,r28
 1140 008c 8170      		andi r24,1
 1141 008e 1F92      		push __zero_reg__
 1142               	.LCFI88:
 1143               		.cfi_def_cfa_offset 12
 1144 0090 8F93      		push r24
 1145               	.LCFI89:
 1146               		.cfi_def_cfa_offset 13
 1147 0092 20E0      		ldi r18,lo8(__c.2633)
 1148 0094 30E0      		ldi r19,hi8(__c.2633)
 1149 0096 3F93      		push r19
 1150               	.LCFI90:
 1151               		.cfi_def_cfa_offset 14
 1152 0098 2F93      		push r18
 1153               	.LCFI91:
 1154               		.cfi_def_cfa_offset 15
 1155 009a 0E94 0000 		call __xprintf
 1156 009e 80E0      		ldi r24,lo8(__c.2635)
 1157 00a0 90E0      		ldi r25,hi8(__c.2635)
 1158 00a2 0E94 0000 		call xputs
 150:../../common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 1159               		.loc 1 150 0
 1160 00a6 80E0      		ldi r24,lo8(__c.2637)
 1161 00a8 90E0      		ldi r25,hi8(__c.2637)
 1162 00aa 0E94 0000 		call xputs
 1163 00ae C1FB      		bst r28,1
 1164 00b0 8827      		clr r24
 1165 00b2 80F9      		bld r24,0
 1166 00b4 1F92      		push __zero_reg__
 1167               	.LCFI92:
 1168               		.cfi_def_cfa_offset 16
 1169 00b6 8F93      		push r24
 1170               	.LCFI93:
 1171               		.cfi_def_cfa_offset 17
 1172 00b8 20E0      		ldi r18,lo8(__c.2639)
 1173 00ba 30E0      		ldi r19,hi8(__c.2639)
 1174 00bc 3F93      		push r19
 1175               	.LCFI94:
 1176               		.cfi_def_cfa_offset 18
 1177 00be 2F93      		push r18
 1178               	.LCFI95:
 1179               		.cfi_def_cfa_offset 19
 1180 00c0 0E94 0000 		call __xprintf
 1181 00c4 80E0      		ldi r24,lo8(__c.2641)
 1182 00c6 90E0      		ldi r25,hi8(__c.2641)
 1183 00c8 0E94 0000 		call xputs
 151:../../common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 1184               		.loc 1 151 0
 1185 00cc 80E0      		ldi r24,lo8(__c.2643)
 1186 00ce 90E0      		ldi r25,hi8(__c.2643)
 1187 00d0 0E94 0000 		call xputs
 1188 00d4 C2FB      		bst r28,2
 1189 00d6 8827      		clr r24
 1190 00d8 80F9      		bld r24,0
 1191 00da 1F92      		push __zero_reg__
 1192               	.LCFI96:
 1193               		.cfi_def_cfa_offset 20
 1194 00dc 8F93      		push r24
 1195               	.LCFI97:
 1196               		.cfi_def_cfa_offset 21
 1197 00de 20E0      		ldi r18,lo8(__c.2645)
 1198 00e0 30E0      		ldi r19,hi8(__c.2645)
 1199 00e2 3F93      		push r19
 1200               	.LCFI98:
 1201               		.cfi_def_cfa_offset 22
 1202 00e4 2F93      		push r18
 1203               	.LCFI99:
 1204               		.cfi_def_cfa_offset 23
 1205 00e6 0E94 0000 		call __xprintf
 1206 00ea 80E0      		ldi r24,lo8(__c.2647)
 1207 00ec 90E0      		ldi r25,hi8(__c.2647)
 1208 00ee 0E94 0000 		call xputs
 152:../../common/command.c **** 
 1209               		.loc 1 152 0
 1210 00f2 80E0      		ldi r24,lo8(__c.2649)
 1211 00f4 90E0      		ldi r25,hi8(__c.2649)
 1212 00f6 0E94 0000 		call xputs
 1213 00fa C3FB      		bst r28,3
 1214 00fc CC27      		clr r28
 1215 00fe C0F9      		bld r28,0
 1216 0100 1F92      		push __zero_reg__
 1217               	.LCFI100:
 1218               		.cfi_def_cfa_offset 24
 1219 0102 CF93      		push r28
 1220               	.LCFI101:
 1221               		.cfi_def_cfa_offset 25
 1222 0104 80E0      		ldi r24,lo8(__c.2651)
 1223 0106 90E0      		ldi r25,hi8(__c.2651)
 1224 0108 9F93      		push r25
 1225               	.LCFI102:
 1226               		.cfi_def_cfa_offset 26
 1227 010a 8F93      		push r24
 1228               	.LCFI103:
 1229               		.cfi_def_cfa_offset 27
 1230 010c 0E94 0000 		call __xprintf
 1231 0110 80E0      		ldi r24,lo8(__c.2653)
 1232 0112 90E0      		ldi r25,hi8(__c.2653)
 1233 0114 0E94 0000 		call xputs
 155:../../common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 1234               		.loc 1 155 0
 1235 0118 0E94 0000 		call eeconfig_read_keymap
 1236 011c C82F      		mov r28,r24
 156:../../common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 1237               		.loc 1 156 0
 1238 011e 80E0      		ldi r24,lo8(__c.2656)
 1239 0120 90E0      		ldi r25,hi8(__c.2656)
 1240 0122 0E94 0000 		call xputs
 1241 0126 1F92      		push __zero_reg__
 1242               	.LCFI104:
 1243               		.cfi_def_cfa_offset 28
 1244 0128 CF93      		push r28
 1245               	.LCFI105:
 1246               		.cfi_def_cfa_offset 29
 1247 012a 20E0      		ldi r18,lo8(__c.2658)
 1248 012c 30E0      		ldi r19,hi8(__c.2658)
 1249 012e 3F93      		push r19
 1250               	.LCFI106:
 1251               		.cfi_def_cfa_offset 30
 1252 0130 2F93      		push r18
 1253               	.LCFI107:
 1254               		.cfi_def_cfa_offset 31
 1255 0132 0E94 0000 		call __xprintf
 1256 0136 80E0      		ldi r24,lo8(__c.2660)
 1257 0138 90E0      		ldi r25,hi8(__c.2660)
 1258 013a 0E94 0000 		call xputs
 157:../../common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 1259               		.loc 1 157 0
 1260 013e 80E0      		ldi r24,lo8(__c.2662)
 1261 0140 90E0      		ldi r25,hi8(__c.2662)
 1262 0142 0E94 0000 		call xputs
 1263 0146 8C2F      		mov r24,r28
 1264 0148 8170      		andi r24,1
 1265 014a 1F92      		push __zero_reg__
 1266               	.LCFI108:
 1267               		.cfi_def_cfa_offset 32
 1268 014c 8F93      		push r24
 1269               	.LCFI109:
 1270               		.cfi_def_cfa_offset 33
 1271 014e 20E0      		ldi r18,lo8(__c.2664)
 1272 0150 30E0      		ldi r19,hi8(__c.2664)
 1273 0152 3F93      		push r19
 1274               	.LCFI110:
 1275               		.cfi_def_cfa_offset 34
 1276 0154 2F93      		push r18
 1277               	.LCFI111:
 1278               		.cfi_def_cfa_offset 35
 1279 0156 0E94 0000 		call __xprintf
 1280 015a 8DB7      		in r24,__SP_L__
 1281 015c 9EB7      		in r25,__SP_H__
 1282 015e 8096      		adiw r24,32
 1283 0160 0FB6      		in __tmp_reg__,__SREG__
 1284 0162 F894      		cli
 1285 0164 9EBF      		out __SP_H__,r25
 1286 0166 0FBE      		out __SREG__,__tmp_reg__
 1287 0168 8DBF      		out __SP_L__,r24
 1288               	.LCFI112:
 1289               		.cfi_def_cfa_offset 3
 1290 016a 80E0      		ldi r24,lo8(__c.2666)
 1291 016c 90E0      		ldi r25,hi8(__c.2666)
 1292 016e 0E94 0000 		call xputs
 158:../../common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 1293               		.loc 1 158 0
 1294 0172 80E0      		ldi r24,lo8(__c.2668)
 1295 0174 90E0      		ldi r25,hi8(__c.2668)
 1296 0176 0E94 0000 		call xputs
 1297 017a C1FB      		bst r28,1
 1298 017c 8827      		clr r24
 1299 017e 80F9      		bld r24,0
 1300 0180 1F92      		push __zero_reg__
 1301               	.LCFI113:
 1302               		.cfi_def_cfa_offset 4
 1303 0182 8F93      		push r24
 1304               	.LCFI114:
 1305               		.cfi_def_cfa_offset 5
 1306 0184 20E0      		ldi r18,lo8(__c.2670)
 1307 0186 30E0      		ldi r19,hi8(__c.2670)
 1308 0188 3F93      		push r19
 1309               	.LCFI115:
 1310               		.cfi_def_cfa_offset 6
 1311 018a 2F93      		push r18
 1312               	.LCFI116:
 1313               		.cfi_def_cfa_offset 7
 1314 018c 0E94 0000 		call __xprintf
 1315 0190 80E0      		ldi r24,lo8(__c.2672)
 1316 0192 90E0      		ldi r25,hi8(__c.2672)
 1317 0194 0E94 0000 		call xputs
 159:../../common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 1318               		.loc 1 159 0
 1319 0198 80E0      		ldi r24,lo8(__c.2674)
 1320 019a 90E0      		ldi r25,hi8(__c.2674)
 1321 019c 0E94 0000 		call xputs
 1322 01a0 C2FB      		bst r28,2
 1323 01a2 8827      		clr r24
 1324 01a4 80F9      		bld r24,0
 1325 01a6 1F92      		push __zero_reg__
 1326               	.LCFI117:
 1327               		.cfi_def_cfa_offset 8
 1328 01a8 8F93      		push r24
 1329               	.LCFI118:
 1330               		.cfi_def_cfa_offset 9
 1331 01aa 20E0      		ldi r18,lo8(__c.2676)
 1332 01ac 30E0      		ldi r19,hi8(__c.2676)
 1333 01ae 3F93      		push r19
 1334               	.LCFI119:
 1335               		.cfi_def_cfa_offset 10
 1336 01b0 2F93      		push r18
 1337               	.LCFI120:
 1338               		.cfi_def_cfa_offset 11
 1339 01b2 0E94 0000 		call __xprintf
 1340 01b6 80E0      		ldi r24,lo8(__c.2678)
 1341 01b8 90E0      		ldi r25,hi8(__c.2678)
 1342 01ba 0E94 0000 		call xputs
 160:../../common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 1343               		.loc 1 160 0
 1344 01be 80E0      		ldi r24,lo8(__c.2680)
 1345 01c0 90E0      		ldi r25,hi8(__c.2680)
 1346 01c2 0E94 0000 		call xputs
 1347 01c6 C3FB      		bst r28,3
 1348 01c8 8827      		clr r24
 1349 01ca 80F9      		bld r24,0
 1350 01cc 1F92      		push __zero_reg__
 1351               	.LCFI121:
 1352               		.cfi_def_cfa_offset 12
 1353 01ce 8F93      		push r24
 1354               	.LCFI122:
 1355               		.cfi_def_cfa_offset 13
 1356 01d0 20E0      		ldi r18,lo8(__c.2682)
 1357 01d2 30E0      		ldi r19,hi8(__c.2682)
 1358 01d4 3F93      		push r19
 1359               	.LCFI123:
 1360               		.cfi_def_cfa_offset 14
 1361 01d6 2F93      		push r18
 1362               	.LCFI124:
 1363               		.cfi_def_cfa_offset 15
 1364 01d8 0E94 0000 		call __xprintf
 1365 01dc 80E0      		ldi r24,lo8(__c.2684)
 1366 01de 90E0      		ldi r25,hi8(__c.2684)
 1367 01e0 0E94 0000 		call xputs
 161:../../common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 1368               		.loc 1 161 0
 1369 01e4 80E0      		ldi r24,lo8(__c.2686)
 1370 01e6 90E0      		ldi r25,hi8(__c.2686)
 1371 01e8 0E94 0000 		call xputs
 1372 01ec C4FB      		bst r28,4
 1373 01ee 8827      		clr r24
 1374 01f0 80F9      		bld r24,0
 1375 01f2 1F92      		push __zero_reg__
 1376               	.LCFI125:
 1377               		.cfi_def_cfa_offset 16
 1378 01f4 8F93      		push r24
 1379               	.LCFI126:
 1380               		.cfi_def_cfa_offset 17
 1381 01f6 20E0      		ldi r18,lo8(__c.2688)
 1382 01f8 30E0      		ldi r19,hi8(__c.2688)
 1383 01fa 3F93      		push r19
 1384               	.LCFI127:
 1385               		.cfi_def_cfa_offset 18
 1386 01fc 2F93      		push r18
 1387               	.LCFI128:
 1388               		.cfi_def_cfa_offset 19
 1389 01fe 0E94 0000 		call __xprintf
 1390 0202 80E0      		ldi r24,lo8(__c.2690)
 1391 0204 90E0      		ldi r25,hi8(__c.2690)
 1392 0206 0E94 0000 		call xputs
 162:../../common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 1393               		.loc 1 162 0
 1394 020a 80E0      		ldi r24,lo8(__c.2692)
 1395 020c 90E0      		ldi r25,hi8(__c.2692)
 1396 020e 0E94 0000 		call xputs
 1397 0212 C5FB      		bst r28,5
 1398 0214 8827      		clr r24
 1399 0216 80F9      		bld r24,0
 1400 0218 1F92      		push __zero_reg__
 1401               	.LCFI129:
 1402               		.cfi_def_cfa_offset 20
 1403 021a 8F93      		push r24
 1404               	.LCFI130:
 1405               		.cfi_def_cfa_offset 21
 1406 021c 20E0      		ldi r18,lo8(__c.2694)
 1407 021e 30E0      		ldi r19,hi8(__c.2694)
 1408 0220 3F93      		push r19
 1409               	.LCFI131:
 1410               		.cfi_def_cfa_offset 22
 1411 0222 2F93      		push r18
 1412               	.LCFI132:
 1413               		.cfi_def_cfa_offset 23
 1414 0224 0E94 0000 		call __xprintf
 1415 0228 80E0      		ldi r24,lo8(__c.2696)
 1416 022a 90E0      		ldi r25,hi8(__c.2696)
 1417 022c 0E94 0000 		call xputs
 163:../../common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 1418               		.loc 1 163 0
 1419 0230 80E0      		ldi r24,lo8(__c.2698)
 1420 0232 90E0      		ldi r25,hi8(__c.2698)
 1421 0234 0E94 0000 		call xputs
 1422 0238 C6FB      		bst r28,6
 1423 023a 8827      		clr r24
 1424 023c 80F9      		bld r24,0
 1425 023e 1F92      		push __zero_reg__
 1426               	.LCFI133:
 1427               		.cfi_def_cfa_offset 24
 1428 0240 8F93      		push r24
 1429               	.LCFI134:
 1430               		.cfi_def_cfa_offset 25
 1431 0242 20E0      		ldi r18,lo8(__c.2700)
 1432 0244 30E0      		ldi r19,hi8(__c.2700)
 1433 0246 3F93      		push r19
 1434               	.LCFI135:
 1435               		.cfi_def_cfa_offset 26
 1436 0248 2F93      		push r18
 1437               	.LCFI136:
 1438               		.cfi_def_cfa_offset 27
 1439 024a 0E94 0000 		call __xprintf
 1440 024e 80E0      		ldi r24,lo8(__c.2702)
 1441 0250 90E0      		ldi r25,hi8(__c.2702)
 1442 0252 0E94 0000 		call xputs
 164:../../common/command.c **** 
 1443               		.loc 1 164 0
 1444 0256 80E0      		ldi r24,lo8(__c.2704)
 1445 0258 90E0      		ldi r25,hi8(__c.2704)
 1446 025a 0E94 0000 		call xputs
 1447 025e C7FB      		bst r28,7
 1448 0260 CC27      		clr r28
 1449 0262 C0F9      		bld r28,0
 1450 0264 1F92      		push __zero_reg__
 1451               	.LCFI137:
 1452               		.cfi_def_cfa_offset 28
 1453 0266 CF93      		push r28
 1454               	.LCFI138:
 1455               		.cfi_def_cfa_offset 29
 1456 0268 80E0      		ldi r24,lo8(__c.2706)
 1457 026a 90E0      		ldi r25,hi8(__c.2706)
 1458 026c 9F93      		push r25
 1459               	.LCFI139:
 1460               		.cfi_def_cfa_offset 30
 1461 026e 8F93      		push r24
 1462               	.LCFI140:
 1463               		.cfi_def_cfa_offset 31
 1464 0270 0E94 0000 		call __xprintf
 1465 0274 80E0      		ldi r24,lo8(__c.2708)
 1466 0276 90E0      		ldi r25,hi8(__c.2708)
 1467 0278 0E94 0000 		call xputs
 1468 027c 8DB7      		in r24,__SP_L__
 1469 027e 9EB7      		in r25,__SP_H__
 1470 0280 4C96      		adiw r24,28
 1471 0282 0FB6      		in __tmp_reg__,__SREG__
 1472 0284 F894      		cli
 1473 0286 9EBF      		out __SP_H__,r25
 1474 0288 0FBE      		out __SREG__,__tmp_reg__
 1475 028a 8DBF      		out __SP_L__,r24
 1476               	.LCFI141:
 1477               		.cfi_def_cfa_offset 3
 1478 028c 00C0      		rjmp .L84
 1479               	.L66:
 1480               	.LBE150:
 1481               	.LBE149:
 195:../../common/command.c ****                 host_driver = host_get_driver();
 1482               		.loc 1 195 0
 1483 028e 0E94 0000 		call host_get_driver
 1484 0292 892B      		or r24,r25
 1485 0294 01F0      		breq .L71
 196:../../common/command.c ****                 clear_keyboard();
 1486               		.loc 1 196 0
 1487 0296 0E94 0000 		call host_get_driver
 1488 029a 9093 0000 		sts host_driver.2713+1,r25
 1489 029e 8093 0000 		sts host_driver.2713,r24
 197:../../common/command.c ****                 host_set_driver(0);
 1490               		.loc 1 197 0
 1491 02a2 0E94 0000 		call clear_keyboard
 198:../../common/command.c ****                 print("Locked.\n");
 1492               		.loc 1 198 0
 1493 02a6 80E0      		ldi r24,0
 1494 02a8 90E0      		ldi r25,0
 1495 02aa 0E94 0000 		call host_set_driver
 199:../../common/command.c ****             } else {
 1496               		.loc 1 199 0
 1497 02ae 80E0      		ldi r24,lo8(__c.2722)
 1498 02b0 90E0      		ldi r25,hi8(__c.2722)
 1499               	.L85:
 1500 02b2 0E94 0000 		call xputs
 1501               	.L84:
 376:../../common/command.c **** }
 1502               		.loc 1 376 0
 1503 02b6 C1E0      		ldi r28,lo8(1)
 1504 02b8 00C0      		rjmp .L70
 1505               	.L71:
 201:../../common/command.c ****                 print("Unlocked.\n");
 1506               		.loc 1 201 0
 1507 02ba 8091 0000 		lds r24,host_driver.2713
 1508 02be 9091 0000 		lds r25,host_driver.2713+1
 1509 02c2 0E94 0000 		call host_set_driver
 202:../../common/command.c ****             }
 1510               		.loc 1 202 0
 1511 02c6 80E0      		ldi r24,lo8(__c.2724)
 1512 02c8 90E0      		ldi r25,hi8(__c.2724)
 1513 02ca 00C0      		rjmp .L85
 1514               	.L55:
 1515               	.LBB151:
 1516               	.LBB152:
 115:../../common/command.c ****     print("c:	enter console mode\n");
 1517               		.loc 1 115 0
 1518 02cc 80E0      		ldi r24,lo8(__c.2575)
 1519 02ce 90E0      		ldi r25,hi8(__c.2575)
 1520 02d0 0E94 0000 		call xputs
 116:../../common/command.c ****     print("d:	toggle debug enable\n");
 1521               		.loc 1 116 0
 1522 02d4 80E0      		ldi r24,lo8(__c.2577)
 1523 02d6 90E0      		ldi r25,hi8(__c.2577)
 1524 02d8 0E94 0000 		call xputs
 117:../../common/command.c ****     print("x:	toggle matrix debug\n");
 1525               		.loc 1 117 0
 1526 02dc 80E0      		ldi r24,lo8(__c.2579)
 1527 02de 90E0      		ldi r25,hi8(__c.2579)
 1528 02e0 0E94 0000 		call xputs
 118:../../common/command.c ****     print("k:	toggle keyboard debug\n");
 1529               		.loc 1 118 0
 1530 02e4 80E0      		ldi r24,lo8(__c.2581)
 1531 02e6 90E0      		ldi r25,hi8(__c.2581)
 1532 02e8 0E94 0000 		call xputs
 119:../../common/command.c ****     print("m:	toggle mouse debug\n");
 1533               		.loc 1 119 0
 1534 02ec 80E0      		ldi r24,lo8(__c.2583)
 1535 02ee 90E0      		ldi r25,hi8(__c.2583)
 1536 02f0 0E94 0000 		call xputs
 120:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 1537               		.loc 1 120 0
 1538 02f4 80E0      		ldi r24,lo8(__c.2585)
 1539 02f6 90E0      		ldi r25,hi8(__c.2585)
 1540 02f8 0E94 0000 		call xputs
 122:../../common/command.c **** #endif
 1541               		.loc 1 122 0
 1542 02fc 80E0      		ldi r24,lo8(__c.2587)
 1543 02fe 90E0      		ldi r25,hi8(__c.2587)
 1544 0300 0E94 0000 		call xputs
 124:../../common/command.c ****     print("t:	print timer count\n");
 1545               		.loc 1 124 0
 1546 0304 80E0      		ldi r24,lo8(__c.2589)
 1547 0306 90E0      		ldi r25,hi8(__c.2589)
 1548 0308 0E94 0000 		call xputs
 125:../../common/command.c ****     print("s:	print status\n");
 1549               		.loc 1 125 0
 1550 030c 80E0      		ldi r24,lo8(__c.2591)
 1551 030e 90E0      		ldi r25,hi8(__c.2591)
 1552 0310 0E94 0000 		call xputs
 126:../../common/command.c ****     print("e:	print eeprom config\n");
 1553               		.loc 1 126 0
 1554 0314 80E0      		ldi r24,lo8(__c.2593)
 1555 0316 90E0      		ldi r25,hi8(__c.2593)
 1556 0318 0E94 0000 		call xputs
 127:../../common/command.c **** #ifdef NKRO_ENABLE
 1557               		.loc 1 127 0
 1558 031c 80E0      		ldi r24,lo8(__c.2595)
 1559 031e 90E0      		ldi r25,hi8(__c.2595)
 1560 0320 0E94 0000 		call xputs
 129:../../common/command.c **** #endif
 1561               		.loc 1 129 0
 1562 0324 80E0      		ldi r24,lo8(__c.2597)
 1563 0326 90E0      		ldi r25,hi8(__c.2597)
 1564 0328 0E94 0000 		call xputs
 131:../../common/command.c ****     print("1/F1:	switch to Layer1 \n");
 1565               		.loc 1 131 0
 1566 032c 80E0      		ldi r24,lo8(__c.2599)
 1567 032e 90E0      		ldi r25,hi8(__c.2599)
 1568 0330 0E94 0000 		call xputs
 132:../../common/command.c ****     print("2/F2:	switch to Layer2 \n");
 1569               		.loc 1 132 0
 1570 0334 80E0      		ldi r24,lo8(__c.2601)
 1571 0336 90E0      		ldi r25,hi8(__c.2601)
 1572 0338 0E94 0000 		call xputs
 133:../../common/command.c ****     print("3/F3:	switch to Layer3 \n");
 1573               		.loc 1 133 0
 1574 033c 80E0      		ldi r24,lo8(__c.2603)
 1575 033e 90E0      		ldi r25,hi8(__c.2603)
 1576 0340 0E94 0000 		call xputs
 134:../../common/command.c ****     print("4/F4:	switch to Layer4 \n");
 1577               		.loc 1 134 0
 1578 0344 80E0      		ldi r24,lo8(__c.2605)
 1579 0346 90E0      		ldi r25,hi8(__c.2605)
 1580 0348 0E94 0000 		call xputs
 135:../../common/command.c ****     print("PScr:	power down/remote wake-up\n");
 1581               		.loc 1 135 0
 1582 034c 80E0      		ldi r24,lo8(__c.2607)
 1583 034e 90E0      		ldi r25,hi8(__c.2607)
 1584 0350 0E94 0000 		call xputs
 136:../../common/command.c ****     print("Caps:	Lock Keyboard(Child Proof)\n");
 1585               		.loc 1 136 0
 1586 0354 80E0      		ldi r24,lo8(__c.2609)
 1587 0356 90E0      		ldi r25,hi8(__c.2609)
 1588 0358 0E94 0000 		call xputs
 137:../../common/command.c ****     print("Paus:	jump to bootloader\n");
 1589               		.loc 1 137 0
 1590 035c 80E0      		ldi r24,lo8(__c.2611)
 1591 035e 90E0      		ldi r25,hi8(__c.2611)
 1592 0360 0E94 0000 		call xputs
 138:../../common/command.c **** }
 1593               		.loc 1 138 0
 1594 0364 80E0      		ldi r24,lo8(__c.2613)
 1595 0366 90E0      		ldi r25,hi8(__c.2613)
 1596 0368 00C0      		rjmp .L85
 1597               	.L51:
 1598               	.LBE152:
 1599               	.LBE151:
 210:../../common/command.c ****             debug_keyboard = false;
 1600               		.loc 1 210 0
 1601 036a 8091 0000 		lds r24,debug_config
 213:../../common/command.c ****             command_console_help();
 1602               		.loc 1 213 0
 1603 036e 817F      		andi r24,lo8(-15)
 1604 0370 8E7F      		andi r24,lo8(~(1<<0))
 1605 0372 8093 0000 		sts debug_config,r24
 214:../../common/command.c ****             print("\nEnter Console Mode\n");
 1606               		.loc 1 214 0
 1607 0376 0E94 0000 		call command_console_help
 215:../../common/command.c ****             print("C> ");
 1608               		.loc 1 215 0
 1609 037a 80E0      		ldi r24,lo8(__c.2729)
 1610 037c 90E0      		ldi r25,hi8(__c.2729)
 1611 037e 0E94 0000 		call xputs
 216:../../common/command.c ****             command_state = CONSOLE;
 1612               		.loc 1 216 0
 1613 0382 80E0      		ldi r24,lo8(__c.2731)
 1614 0384 90E0      		ldi r25,hi8(__c.2731)
 1615 0386 0E94 0000 		call xputs
 217:../../common/command.c ****             break;
 1616               		.loc 1 217 0
 1617 038a 81E0      		ldi r24,lo8(1)
 1618 038c 8093 0000 		sts command_state,r24
 1619 0390 00C0      		rjmp .L84
 1620               	.L69:
 220:../../common/command.c ****             print("\n\nJump to bootloader... ");
 1621               		.loc 1 220 0
 1622 0392 0E94 0000 		call clear_keyboard
 221:../../common/command.c ****             _delay_ms(1000);
 1623               		.loc 1 221 0
 1624 0396 80E0      		ldi r24,lo8(__c.2734)
 1625 0398 90E0      		ldi r25,hi8(__c.2734)
 1626 039a 0E94 0000 		call xputs
 1627               	.LBB153:
 1628               	.LBB154:
 1629               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1630               		.loc 2 163 0
 1631 039e 9FEF      		ldi r25,lo8(3199999)
 1632 03a0 23ED      		ldi r18,hi8(3199999)
 1633 03a2 80E3      		ldi r24,hlo8(3199999)
 1634 03a4 9150      		1: subi r25,1
 1635 03a6 2040      		sbci r18,0
 1636 03a8 8040      		sbci r24,0
 1637 03aa 01F4      		brne 1b
 1638 03ac 00C0      		rjmp .
 1639 03ae 0000      		nop
 1640               	.LBE154:
 1641               	.LBE153:
 223:../../common/command.c ****             print("not supported.\n");
 1642               		.loc 1 223 0
 1643 03b0 0E94 0000 		call bootloader_jump
 224:../../common/command.c ****             break;
 1644               		.loc 1 224 0
 1645 03b4 80E0      		ldi r24,lo8(__c.2736)
 1646 03b6 90E0      		ldi r25,hi8(__c.2736)
 1647 03b8 00C0      		rjmp .L85
 1648               	.L53:
 227:../../common/command.c ****                 print("\nDEBUG: disabled.\n");
 1649               		.loc 1 227 0
 1650 03ba 8091 0000 		lds r24,debug_config
 1651 03be C82F      		mov r28,r24
 1652 03c0 C170      		andi r28,1
 1653 03c2 80FF      		sbrs r24,0
 1654 03c4 00C0      		rjmp .L72
 228:../../common/command.c ****                 debug_matrix   = false;
 1655               		.loc 1 228 0
 1656 03c6 80E0      		ldi r24,lo8(__c.2739)
 1657 03c8 90E0      		ldi r25,hi8(__c.2739)
 1658 03ca 0E94 0000 		call xputs
 229:../../common/command.c ****                 debug_keyboard = false;
 1659               		.loc 1 229 0
 1660 03ce 8091 0000 		lds r24,debug_config
 232:../../common/command.c ****             } else {
 1661               		.loc 1 232 0
 1662 03d2 817F      		andi r24,lo8(-15)
 1663 03d4 8E7F      		andi r24,lo8(~(1<<0))
 1664 03d6 00C0      		rjmp .L86
 1665               	.L72:
 234:../../common/command.c ****                 debug_enable   = true;
 1666               		.loc 1 234 0
 1667 03d8 80E0      		ldi r24,lo8(__c.2741)
 1668 03da 90E0      		ldi r25,hi8(__c.2741)
 1669 03dc 0E94 0000 		call xputs
 235:../../common/command.c ****             }
 1670               		.loc 1 235 0
 1671 03e0 8091 0000 		lds r24,debug_config
 1672 03e4 8160      		ori r24,lo8(1<<0)
 1673 03e6 8093 0000 		sts debug_config,r24
 1674 03ea 00C0      		rjmp .L84
 1675               	.L62:
 239:../../common/command.c ****             if (debug_matrix) {
 1676               		.loc 1 239 0
 1677 03ec 8091 0000 		lds r24,debug_config
 1678 03f0 81FB      		bst r24,1
 1679 03f2 CC27      		clr r28
 1680 03f4 C0F9      		bld r28,0
 1681 03f6 91E0      		ldi r25,lo8(1)
 1682 03f8 C927      		eor r28,r25
 1683 03fa C0FB      		bst r28,0
 1684 03fc 81F9      		bld r24,1
 1685 03fe 8093 0000 		sts debug_config,r24
 240:../../common/command.c ****                 print("\nDEBUG: matrix enabled.\n");
 1686               		.loc 1 240 0
 1687 0402 CC23      		tst r28
 1688 0404 01F0      		breq .L73
 241:../../common/command.c ****                 debug_enable = true;
 1689               		.loc 1 241 0
 1690 0406 80E0      		ldi r24,lo8(__c.2744)
 1691 0408 90E0      		ldi r25,hi8(__c.2744)
 1692 040a 00C0      		rjmp .L87
 1693               	.L73:
 244:../../common/command.c ****             }
 1694               		.loc 1 244 0
 1695 040c 80E0      		ldi r24,lo8(__c.2746)
 1696 040e 90E0      		ldi r25,hi8(__c.2746)
 1697 0410 00C0      		rjmp .L85
 1698               	.L56:
 248:../../common/command.c ****             if (debug_keyboard) {
 1699               		.loc 1 248 0
 1700 0412 8091 0000 		lds r24,debug_config
 1701 0416 82FB      		bst r24,2
 1702 0418 CC27      		clr r28
 1703 041a C0F9      		bld r28,0
 1704 041c 91E0      		ldi r25,lo8(1)
 1705 041e C927      		eor r28,r25
 1706 0420 C0FB      		bst r28,0
 1707 0422 82F9      		bld r24,2
 1708 0424 8093 0000 		sts debug_config,r24
 249:../../common/command.c ****                 print("\nDEBUG: keyboard enabled.\n");
 1709               		.loc 1 249 0
 1710 0428 CC23      		tst r28
 1711 042a 01F0      		breq .L74
 250:../../common/command.c ****                 debug_enable = true;
 1712               		.loc 1 250 0
 1713 042c 80E0      		ldi r24,lo8(__c.2749)
 1714 042e 90E0      		ldi r25,hi8(__c.2749)
 1715 0430 00C0      		rjmp .L87
 1716               	.L74:
 253:../../common/command.c ****             }
 1717               		.loc 1 253 0
 1718 0432 80E0      		ldi r24,lo8(__c.2751)
 1719 0434 90E0      		ldi r25,hi8(__c.2751)
 1720 0436 00C0      		rjmp .L85
 1721               	.L57:
 257:../../common/command.c ****             if (debug_mouse) {
 1722               		.loc 1 257 0
 1723 0438 8091 0000 		lds r24,debug_config
 1724 043c 83FB      		bst r24,3
 1725 043e CC27      		clr r28
 1726 0440 C0F9      		bld r28,0
 1727 0442 91E0      		ldi r25,lo8(1)
 1728 0444 C927      		eor r28,r25
 1729 0446 C0FB      		bst r28,0
 1730 0448 83F9      		bld r24,3
 1731 044a 8093 0000 		sts debug_config,r24
 258:../../common/command.c ****                 print("\nDEBUG: mouse enabled.\n");
 1732               		.loc 1 258 0
 1733 044e CC23      		tst r28
 1734 0450 01F0      		breq .L75
 259:../../common/command.c ****                 debug_enable = true;
 1735               		.loc 1 259 0
 1736 0452 80E0      		ldi r24,lo8(__c.2754)
 1737 0454 90E0      		ldi r25,hi8(__c.2754)
 1738               	.L87:
 1739 0456 0E94 0000 		call xputs
 260:../../common/command.c ****             } else {
 1740               		.loc 1 260 0
 1741 045a 8091 0000 		lds r24,debug_config
 1742 045e 8160      		ori r24,lo8(1<<0)
 1743               	.L86:
 1744 0460 8093 0000 		sts debug_config,r24
 1745 0464 00C0      		rjmp .L70
 1746               	.L75:
 262:../../common/command.c ****             }
 1747               		.loc 1 262 0
 1748 0466 80E0      		ldi r24,lo8(__c.2756)
 1749 0468 90E0      		ldi r25,hi8(__c.2756)
 1750 046a 00C0      		rjmp .L85
 1751               	.L61:
 266:../../common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 1752               		.loc 1 266 0
 1753 046c 80E0      		ldi r24,lo8(__c.2759)
 1754 046e 90E0      		ldi r25,hi8(__c.2759)
 1755 0470 0E94 0000 		call xputs
 267:../../common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 1756               		.loc 1 267 0
 1757 0474 80E0      		ldi r24,lo8(__c.2761)
 1758 0476 90E0      		ldi r25,hi8(__c.2761)
 1759 0478 0E94 0000 		call xputs
 268:../../common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 1760               		.loc 1 268 0
 1761 047c 80E0      		ldi r24,lo8(__c.2763)
 1762 047e 90E0      		ldi r25,hi8(__c.2763)
 1763 0480 0E94 0000 		call xputs
 271:../../common/command.c ****             /* build options */
 1764               		.loc 1 271 0
 1765 0484 80E0      		ldi r24,lo8(__c.2765)
 1766 0486 90E0      		ldi r25,hi8(__c.2765)
 1767 0488 0E94 0000 		call xputs
 273:../../common/command.c **** #ifdef PROTOCOL_PJRC
 1768               		.loc 1 273 0
 1769 048c 80E0      		ldi r24,lo8(__c.2767)
 1770 048e 90E0      		ldi r25,hi8(__c.2767)
 1771 0490 0E94 0000 		call xputs
 306:../../common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 1772               		.loc 1 306 0
 1773 0494 80E0      		ldi r24,lo8(__c.2769)
 1774 0496 90E0      		ldi r25,hi8(__c.2769)
 1775 0498 00C0      		rjmp .L85
 1776               	.L60:
 311:../../common/command.c ****             break;
 1777               		.loc 1 311 0
 1778 049a 8091 0000 		lds r24,timer_count
 1779 049e 9091 0000 		lds r25,timer_count+1
 1780 04a2 A091 0000 		lds r26,timer_count+2
 1781 04a6 B091 0000 		lds r27,timer_count+3
 1782 04aa BF93      		push r27
 1783               	.LCFI142:
 1784               		.cfi_def_cfa_offset 4
 1785 04ac AF93      		push r26
 1786               	.LCFI143:
 1787               		.cfi_def_cfa_offset 5
 1788 04ae 9F93      		push r25
 1789               	.LCFI144:
 1790               		.cfi_def_cfa_offset 6
 1791 04b0 8F93      		push r24
 1792               	.LCFI145:
 1793               		.cfi_def_cfa_offset 7
 1794 04b2 80E0      		ldi r24,lo8(__c.2772)
 1795 04b4 90E0      		ldi r25,hi8(__c.2772)
 1796 04b6 9F93      		push r25
 1797               	.LCFI146:
 1798               		.cfi_def_cfa_offset 8
 1799 04b8 8F93      		push r24
 1800               	.LCFI147:
 1801               		.cfi_def_cfa_offset 9
 1802 04ba 0E94 0000 		call __xprintf
 312:../../common/command.c ****         case KC_S:
 1803               		.loc 1 312 0
 1804 04be 0F90      		pop __tmp_reg__
 1805 04c0 0F90      		pop __tmp_reg__
 1806 04c2 0F90      		pop __tmp_reg__
 1807 04c4 0F90      		pop __tmp_reg__
 1808 04c6 0F90      		pop __tmp_reg__
 1809 04c8 0F90      		pop __tmp_reg__
 1810               	.LCFI148:
 1811               		.cfi_def_cfa_offset 3
 1812 04ca 00C0      		rjmp .L84
 1813               	.L59:
 314:../../common/command.c ****             print_val_hex8(host_keyboard_leds());
 1814               		.loc 1 314 0
 1815 04cc 80E0      		ldi r24,lo8(__c.2775)
 1816 04ce 90E0      		ldi r25,hi8(__c.2775)
 1817 04d0 0E94 0000 		call xputs
 315:../../common/command.c ****             print_val_hex8(keyboard_protocol);
 1818               		.loc 1 315 0
 1819 04d4 0E94 0000 		call host_keyboard_leds
 1820 04d8 1F92      		push __zero_reg__
 1821               	.LCFI149:
 1822               		.cfi_def_cfa_offset 4
 1823 04da 8F93      		push r24
 1824               	.LCFI150:
 1825               		.cfi_def_cfa_offset 5
 1826 04dc 80E0      		ldi r24,lo8(__c.2777)
 1827 04de 90E0      		ldi r25,hi8(__c.2777)
 1828 04e0 9F93      		push r25
 1829               	.LCFI151:
 1830               		.cfi_def_cfa_offset 6
 1831 04e2 8F93      		push r24
 1832               	.LCFI152:
 1833               		.cfi_def_cfa_offset 7
 1834 04e4 0E94 0000 		call __xprintf
 316:../../common/command.c ****             print_val_hex8(keyboard_idle);
 1835               		.loc 1 316 0
 1836 04e8 8091 0000 		lds r24,keyboard_protocol
 1837 04ec 1F92      		push __zero_reg__
 1838               	.LCFI153:
 1839               		.cfi_def_cfa_offset 8
 1840 04ee 8F93      		push r24
 1841               	.LCFI154:
 1842               		.cfi_def_cfa_offset 9
 1843 04f0 80E0      		ldi r24,lo8(__c.2779)
 1844 04f2 90E0      		ldi r25,hi8(__c.2779)
 1845 04f4 9F93      		push r25
 1846               	.LCFI155:
 1847               		.cfi_def_cfa_offset 10
 1848 04f6 8F93      		push r24
 1849               	.LCFI156:
 1850               		.cfi_def_cfa_offset 11
 1851 04f8 0E94 0000 		call __xprintf
 317:../../common/command.c **** #ifdef PROTOCOL_PJRC
 1852               		.loc 1 317 0
 1853 04fc 8091 0000 		lds r24,keyboard_idle
 1854 0500 1F92      		push __zero_reg__
 1855               	.LCFI157:
 1856               		.cfi_def_cfa_offset 12
 1857 0502 8F93      		push r24
 1858               	.LCFI158:
 1859               		.cfi_def_cfa_offset 13
 1860 0504 80E0      		ldi r24,lo8(__c.2781)
 1861 0506 90E0      		ldi r25,hi8(__c.2781)
 1862 0508 9F93      		push r25
 1863               	.LCFI159:
 1864               		.cfi_def_cfa_offset 14
 1865 050a 8F93      		push r24
 1866               	.LCFI160:
 1867               		.cfi_def_cfa_offset 15
 1868 050c 0E94 0000 		call __xprintf
 319:../../common/command.c ****             print_val_hex8(UDIEN);
 1869               		.loc 1 319 0
 1870 0510 8091 E000 		lds r24,224
 1871 0514 1F92      		push __zero_reg__
 1872               	.LCFI161:
 1873               		.cfi_def_cfa_offset 16
 1874 0516 8F93      		push r24
 1875               	.LCFI162:
 1876               		.cfi_def_cfa_offset 17
 1877 0518 80E0      		ldi r24,lo8(__c.2783)
 1878 051a 90E0      		ldi r25,hi8(__c.2783)
 1879 051c 9F93      		push r25
 1880               	.LCFI163:
 1881               		.cfi_def_cfa_offset 18
 1882 051e 8F93      		push r24
 1883               	.LCFI164:
 1884               		.cfi_def_cfa_offset 19
 1885 0520 0E94 0000 		call __xprintf
 320:../../common/command.c ****             print_val_hex8(UDINT);
 1886               		.loc 1 320 0
 1887 0524 8091 E200 		lds r24,226
 1888 0528 1F92      		push __zero_reg__
 1889               	.LCFI165:
 1890               		.cfi_def_cfa_offset 20
 1891 052a 8F93      		push r24
 1892               	.LCFI166:
 1893               		.cfi_def_cfa_offset 21
 1894 052c 80E0      		ldi r24,lo8(__c.2785)
 1895 052e 90E0      		ldi r25,hi8(__c.2785)
 1896 0530 9F93      		push r25
 1897               	.LCFI167:
 1898               		.cfi_def_cfa_offset 22
 1899 0532 8F93      		push r24
 1900               	.LCFI168:
 1901               		.cfi_def_cfa_offset 23
 1902 0534 0E94 0000 		call __xprintf
 321:../../common/command.c ****             print_val_hex8(usb_keyboard_leds);
 1903               		.loc 1 321 0
 1904 0538 8091 E100 		lds r24,225
 1905 053c 1F92      		push __zero_reg__
 1906               	.LCFI169:
 1907               		.cfi_def_cfa_offset 24
 1908 053e 8F93      		push r24
 1909               	.LCFI170:
 1910               		.cfi_def_cfa_offset 25
 1911 0540 80E0      		ldi r24,lo8(__c.2787)
 1912 0542 90E0      		ldi r25,hi8(__c.2787)
 1913 0544 9F93      		push r25
 1914               	.LCFI171:
 1915               		.cfi_def_cfa_offset 26
 1916 0546 8F93      		push r24
 1917               	.LCFI172:
 1918               		.cfi_def_cfa_offset 27
 1919 0548 0E94 0000 		call __xprintf
 322:../../common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 1920               		.loc 1 322 0
 1921 054c 8091 0000 		lds r24,usb_keyboard_leds
 1922 0550 1F92      		push __zero_reg__
 1923               	.LCFI173:
 1924               		.cfi_def_cfa_offset 28
 1925 0552 8F93      		push r24
 1926               	.LCFI174:
 1927               		.cfi_def_cfa_offset 29
 1928 0554 80E0      		ldi r24,lo8(__c.2789)
 1929 0556 90E0      		ldi r25,hi8(__c.2789)
 1930 0558 9F93      		push r25
 1931               	.LCFI175:
 1932               		.cfi_def_cfa_offset 30
 1933 055a 8F93      		push r24
 1934               	.LCFI176:
 1935               		.cfi_def_cfa_offset 31
 1936 055c 0E94 0000 		call __xprintf
 323:../../common/command.c **** #endif
 1937               		.loc 1 323 0
 1938 0560 8091 0000 		lds r24,usb_keyboard_idle_count
 1939 0564 1F92      		push __zero_reg__
 1940               	.LCFI177:
 1941               		.cfi_def_cfa_offset 32
 1942 0566 8F93      		push r24
 1943               	.LCFI178:
 1944               		.cfi_def_cfa_offset 33
 1945 0568 80E0      		ldi r24,lo8(__c.2791)
 1946 056a 90E0      		ldi r25,hi8(__c.2791)
 1947 056c 9F93      		push r25
 1948               	.LCFI179:
 1949               		.cfi_def_cfa_offset 34
 1950 056e 8F93      		push r24
 1951               	.LCFI180:
 1952               		.cfi_def_cfa_offset 35
 1953 0570 0E94 0000 		call __xprintf
 331:../../common/command.c **** #ifdef NKRO_ENABLE
 1954               		.loc 1 331 0
 1955 0574 8DB7      		in r24,__SP_L__
 1956 0576 9EB7      		in r25,__SP_H__
 1957 0578 8096      		adiw r24,32
 1958 057a 0FB6      		in __tmp_reg__,__SREG__
 1959 057c F894      		cli
 1960 057e 9EBF      		out __SP_H__,r25
 1961 0580 0FBE      		out __SREG__,__tmp_reg__
 1962 0582 8DBF      		out __SP_L__,r24
 1963               	.LCFI181:
 1964               		.cfi_def_cfa_offset 3
 1965 0584 00C0      		rjmp .L84
 1966               	.L58:
 334:../../common/command.c ****             keyboard_nkro = !keyboard_nkro;
 1967               		.loc 1 334 0
 1968 0586 0E94 0000 		call clear_keyboard
 335:../../common/command.c ****             if (keyboard_nkro)
 1969               		.loc 1 335 0
 1970 058a C091 0000 		lds r28,keyboard_nkro
 1971 058e 81E0      		ldi r24,lo8(1)
 1972 0590 C827      		eor r28,r24
 1973 0592 C093 0000 		sts keyboard_nkro,r28
 336:../../common/command.c ****                 print("NKRO: enabled\n");
 1974               		.loc 1 336 0
 1975 0596 CC23      		tst r28
 1976 0598 01F0      		breq .L76
 337:../../common/command.c ****             else
 1977               		.loc 1 337 0
 1978 059a 80E0      		ldi r24,lo8(__c.2794)
 1979 059c 90E0      		ldi r25,hi8(__c.2794)
 1980 059e 0E94 0000 		call xputs
 1981 05a2 00C0      		rjmp .L70
 1982               	.L76:
 339:../../common/command.c ****             break;
 1983               		.loc 1 339 0
 1984 05a4 80E0      		ldi r24,lo8(__c.2796)
 1985 05a6 90E0      		ldi r25,hi8(__c.2796)
 1986 05a8 00C0      		rjmp .L85
 1987               	.L68:
 346:../../common/command.c ****                 usb_remote_wakeup();
 1988               		.loc 1 346 0
 1989 05aa 8091 0000 		lds r24,suspend
 1990 05ae 8823      		tst r24
 1991 05b0 01F0      		breq .L77
 346:../../common/command.c ****                 usb_remote_wakeup();
 1992               		.loc 1 346 0 is_stmt 0 discriminator 1
 1993 05b2 8091 0000 		lds r24,remote_wakeup
 1994 05b6 8823      		tst r24
 1995 05b8 01F0      		breq .L77
 347:../../common/command.c ****             } else {
 1996               		.loc 1 347 0 is_stmt 1
 1997 05ba 0E94 0000 		call usb_remote_wakeup
 1998 05be 00C0      		rjmp .L84
 1999               	.L77:
 349:../../common/command.c ****                 host_system_send(0);
 2000               		.loc 1 349 0
 2001 05c0 81E8      		ldi r24,lo8(-127)
 2002 05c2 90E0      		ldi r25,0
 2003 05c4 0E94 0000 		call host_system_send
 350:../../common/command.c ****                 _delay_ms(500);
 2004               		.loc 1 350 0
 2005 05c8 80E0      		ldi r24,0
 2006 05ca 90E0      		ldi r25,0
 2007 05cc 0E94 0000 		call host_system_send
 2008               	.LBB155:
 2009               	.LBB156:
 2010               		.loc 2 163 0
 2011 05d0 9FEF      		ldi r25,lo8(1599999)
 2012 05d2 29E6      		ldi r18,hi8(1599999)
 2013 05d4 88E1      		ldi r24,hlo8(1599999)
 2014 05d6 9150      		1: subi r25,1
 2015 05d8 2040      		sbci r18,0
 2016 05da 8040      		sbci r24,0
 2017 05dc 01F4      		brne 1b
 2018 05de 00C0      		rjmp .
 2019 05e0 0000      		nop
 2020 05e2 00C0      		rjmp .L84
 2021               	.L65:
 2022               	.LBE156:
 2023               	.LBE155:
 364:../../common/command.c ****             break;
 2024               		.loc 1 364 0
 2025 05e4 80E0      		ldi r24,0
 2026 05e6 00C0      		rjmp .L88
 2027               	.L64:
 367:../../common/command.c ****             break;
 2028               		.loc 1 367 0
 2029 05e8 8D51      		subi r24,lo8(-(-29))
 2030 05ea 00C0      		rjmp .L88
 2031               	.L67:
 370:../../common/command.c ****             break;
 2032               		.loc 1 370 0
 2033 05ec 8953      		subi r24,lo8(-(-57))
 2034               	.L88:
 2035 05ee 0E94 0000 		call switch_default_layer
 2036 05f2 00C0      		rjmp .L84
 2037               	.L50:
 373:../../common/command.c ****             return false;
 2038               		.loc 1 373 0
 2039 05f4 80E0      		ldi r24,lo8(__c.2805)
 2040 05f6 90E0      		ldi r25,hi8(__c.2805)
 2041 05f8 0E94 0000 		call xputs
 374:../../common/command.c ****     }
 2042               		.loc 1 374 0
 2043 05fc C0E0      		ldi r28,0
 2044               	.L70:
 377:../../common/command.c **** 
 2045               		.loc 1 377 0
 2046 05fe 8C2F      		mov r24,r28
 2047               	/* epilogue start */
 2048 0600 CF91      		pop r28
 2049 0602 0895      		ret
 2050               		.cfi_endproc
 2051               	.LFE17:
 2053               		.section	.text.matrix_power_up,"ax",@progbits
 2054               		.weak	matrix_power_up
 2056               	matrix_power_up:
 2057               	.LFB9:
 2058               		.file 3 "../../common/keyboard.h"
   1:../../common/keyboard.h **** /*
   2:../../common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.h **** 
   4:../../common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.h **** (at your option) any later version.
   8:../../common/keyboard.h **** 
   9:../../common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.h **** GNU General Public License for more details.
  13:../../common/keyboard.h **** 
  14:../../common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.h **** */
  17:../../common/keyboard.h **** 
  18:../../common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../common/keyboard.h **** #define KEYBOARD_H
  20:../../common/keyboard.h **** 
  21:../../common/keyboard.h **** #include <stdbool.h>
  22:../../common/keyboard.h **** #include <stdint.h>
  23:../../common/keyboard.h **** 
  24:../../common/keyboard.h **** 
  25:../../common/keyboard.h **** #ifdef __cplusplus
  26:../../common/keyboard.h **** extern "C" {
  27:../../common/keyboard.h **** #endif
  28:../../common/keyboard.h **** 
  29:../../common/keyboard.h **** /* key matrix position */
  30:../../common/keyboard.h **** typedef struct {
  31:../../common/keyboard.h ****     uint8_t col;
  32:../../common/keyboard.h ****     uint8_t row;
  33:../../common/keyboard.h **** } keypos_t;
  34:../../common/keyboard.h **** 
  35:../../common/keyboard.h **** /* key event */
  36:../../common/keyboard.h **** typedef struct {
  37:../../common/keyboard.h ****     keypos_t key;
  38:../../common/keyboard.h ****     bool     pressed;
  39:../../common/keyboard.h ****     uint16_t time;
  40:../../common/keyboard.h **** } keyevent_t;
  41:../../common/keyboard.h **** 
  42:../../common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../common/keyboard.h **** 
  45:../../common/keyboard.h **** /* Rules for No Event:
  46:../../common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../common/keyboard.h ****  */
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  50:../../common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  51:../../common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
  52:../../common/keyboard.h **** 
  53:../../common/keyboard.h **** /* Tick event */
  54:../../common/keyboard.h **** #define TICK                    (keyevent_t){           \
  55:../../common/keyboard.h ****     .key = (keypos_t){ .row = 255, .col = 255 },           \
  56:../../common/keyboard.h ****     .pressed = false,                                   \
  57:../../common/keyboard.h ****     .time = (timer_read() | 1)                          \
  58:../../common/keyboard.h **** }
  59:../../common/keyboard.h **** 
  60:../../common/keyboard.h **** 
  61:../../common/keyboard.h **** void keyboard_init(void);
  62:../../common/keyboard.h **** void keyboard_task(void);
  63:../../common/keyboard.h **** void keyboard_set_leds(uint8_t leds);
  64:../../common/keyboard.h **** 
  65:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_up(void) {}
 2059               		.loc 3 65 0
 2060               		.cfi_startproc
 2061               	/* prologue: function */
 2062               	/* frame size = 0 */
 2063               	/* stack size = 0 */
 2064               	.L__stack_usage = 0
 2065 0000 0895      		ret
 2066               		.cfi_endproc
 2067               	.LFE9:
 2069               		.section	.text.matrix_power_down,"ax",@progbits
 2070               		.weak	matrix_power_down
 2072               	matrix_power_down:
 2073               	.LFB10:
  66:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_down(void) {}
 2074               		.loc 3 66 0
 2075               		.cfi_startproc
 2076               	/* prologue: function */
 2077               	/* frame size = 0 */
 2078               	/* stack size = 0 */
 2079               	.L__stack_usage = 0
 2080 0000 0895      		ret
 2081               		.cfi_endproc
 2082               	.LFE10:
 2084               		.section	.text.command_extra,"ax",@progbits
 2085               		.weak	command_extra
 2087               	command_extra:
 2088               	.LFB13:
  99:../../common/command.c ****     return false;
 2089               		.loc 1 99 0
 2090               		.cfi_startproc
 2091               	.LVL103:
 2092               	/* prologue: function */
 2093               	/* frame size = 0 */
 2094               	/* stack size = 0 */
 2095               	.L__stack_usage = 0
 101:../../common/command.c **** 
 2096               		.loc 1 101 0
 2097 0000 80E0      		ldi r24,0
 2098               	.LVL104:
 2099 0002 0895      		ret
 2100               		.cfi_endproc
 2101               	.LFE13:
 2103               		.section	.text.command_console_extra,"ax",@progbits
 2104               		.weak	command_console_extra
 2106               	command_console_extra:
 2107               	.LFB14:
 105:../../common/command.c ****     return false;
 2108               		.loc 1 105 0
 2109               		.cfi_startproc
 2110               	.LVL105:
 2111               	/* prologue: function */
 2112               	/* frame size = 0 */
 2113               	/* stack size = 0 */
 2114               	.L__stack_usage = 0
 107:../../common/command.c **** 
 2115               		.loc 1 107 0
 2116 0000 80E0      		ldi r24,0
 2117               	.LVL106:
 2118 0002 0895      		ret
 2119               		.cfi_endproc
 2120               	.LFE14:
 2122               		.section	.text.command_proc,"ax",@progbits
 2123               	.global	command_proc
 2125               	command_proc:
 2126               	.LFB12:
  70:../../common/command.c ****     switch (command_state) {
 2127               		.loc 1 70 0
 2128               		.cfi_startproc
 2129 0000 CF93      		push r28
 2130               	.LCFI182:
 2131               		.cfi_def_cfa_offset 3
 2132               		.cfi_offset 28, -2
 2133               	/* prologue: function */
 2134               	/* frame size = 0 */
 2135               	/* stack size = 1 */
 2136               	.L__stack_usage = 1
 2137 0002 C82F      		mov r28,r24
  71:../../common/command.c ****         case ONESHOT:
 2138               		.loc 1 71 0
 2139 0004 8091 0000 		lds r24,command_state
 2140 0008 8130      		cpi r24,lo8(1)
 2141 000a 01F0      		breq .L95
 2142 000c 00F0      		brlo .L96
 2143 000e 8230      		cpi r24,lo8(2)
 2144 0010 01F4      		brne .+2
 2145 0012 00C0      		rjmp .L97
 2146 0014 00C0      		rjmp .L167
 2147               	.L96:
  73:../../common/command.c ****                 return false;
 2148               		.loc 1 73 0
 2149 0016 A091 0000 		lds r26,keyboard_report
 2150 001a B091 0000 		lds r27,keyboard_report+1
 2151 001e 8C91      		ld r24,X
 2152 0020 8131      		cpi r24,lo8(17)
 2153 0022 01F0      		breq .L101
  73:../../common/command.c ****                 return false;
 2154               		.loc 1 73 0 is_stmt 0 discriminator 1
 2155 0024 8232      		cpi r24,lo8(34)
 2156 0026 01F0      		breq .+2
 2157 0028 00C0      		rjmp .L126
 2158 002a 00C0      		rjmp .L101
 2159               	.L95:
  78:../../common/command.c ****                 return (command_extra(code) || command_common(code));
 2160               		.loc 1 78 0 is_stmt 1
 2161 002c A091 0000 		lds r26,keyboard_report
 2162 0030 B091 0000 		lds r27,keyboard_report+1
 2163 0034 8C91      		ld r24,X
 2164 0036 8131      		cpi r24,lo8(17)
 2165 0038 01F0      		breq .L101
  78:../../common/command.c ****                 return (command_extra(code) || command_common(code));
 2166               		.loc 1 78 0 is_stmt 0 discriminator 1
 2167 003a 8232      		cpi r24,lo8(34)
 2168 003c 01F4      		brne .L102
 2169               	.L101:
  79:../../common/command.c ****             else
 2170               		.loc 1 79 0 is_stmt 1
 2171 003e 8C2F      		mov r24,r28
 2172 0040 0E94 0000 		call command_extra
 2173 0044 8111      		cpse r24,__zero_reg__
 2174 0046 00C0      		rjmp .L129
  79:../../common/command.c ****             else
 2175               		.loc 1 79 0 is_stmt 0 discriminator 2
 2176 0048 8C2F      		mov r24,r28
 2177 004a 0E94 0000 		call command_common
 2178 004e 00C0      		rjmp .L104
 2179               	.L102:
  81:../../common/command.c ****             break;
 2180               		.loc 1 81 0 is_stmt 1
 2181 0050 8C2F      		mov r24,r28
 2182 0052 0E94 0000 		call command_console_extra
 2183 0056 8111      		cpse r24,__zero_reg__
 2184 0058 00C0      		rjmp .L129
 2185               	.LBB199:
 2186               	.LBB200:
 394:../../common/command.c ****         case KC_H:
 2187               		.loc 1 394 0
 2188 005a C431      		cpi r28,lo8(20)
 2189 005c 01F0      		breq .L106
 2190 005e 00F4      		brsh .L107
 2191 0060 CB30      		cpi r28,lo8(11)
 2192 0062 01F0      		breq .L108
 2193 0064 C031      		cpi r28,lo8(16)
 2194 0066 01F4      		brne .L105
 406:../../common/command.c ****             print("\nEnter Mousekey Console\n");
 2195               		.loc 1 406 0
 2196 0068 0E94 0000 		call mousekey_console_help
 407:../../common/command.c ****             print("M0>");
 2197               		.loc 1 407 0
 2198 006c 80E0      		ldi r24,lo8(__c.2827)
 2199 006e 90E0      		ldi r25,hi8(__c.2827)
 2200 0070 0E94 0000 		call xputs
 408:../../common/command.c ****             command_state = MOUSEKEY;
 2201               		.loc 1 408 0
 2202 0074 80E0      		ldi r24,lo8(__c.2829)
 2203 0076 90E0      		ldi r25,hi8(__c.2829)
 2204 0078 0E94 0000 		call xputs
 409:../../common/command.c ****             return true;
 2205               		.loc 1 409 0
 2206 007c 82E0      		ldi r24,lo8(2)
 2207 007e 8093 0000 		sts command_state,r24
 2208 0082 00C0      		rjmp .L129
 2209               	.L107:
 394:../../common/command.c ****         case KC_H:
 2210               		.loc 1 394 0
 2211 0084 C932      		cpi r28,lo8(41)
 2212 0086 01F0      		breq .L106
 2213 0088 C833      		cpi r28,lo8(56)
 2214 008a 01F4      		brne .L105
 2215               	.L108:
 397:../../common/command.c ****             break;
 2216               		.loc 1 397 0
 2217 008c 0E94 0000 		call command_console_help
 416:../../common/command.c ****     return true;
 2218               		.loc 1 416 0
 2219 0090 80E0      		ldi r24,lo8(__c.2834)
 2220 0092 90E0      		ldi r25,hi8(__c.2834)
 2221 0094 0E94 0000 		call xputs
 2222 0098 00C0      		rjmp .L129
 2223               	.L106:
 401:../../common/command.c ****             command_state = ONESHOT;
 2224               		.loc 1 401 0
 2225 009a 80E0      		ldi r24,lo8(__c.2824)
 2226 009c 90E0      		ldi r25,hi8(__c.2824)
 2227 009e 0E94 0000 		call xputs
 402:../../common/command.c ****             return false;
 2228               		.loc 1 402 0
 2229 00a2 1092 0000 		sts command_state,__zero_reg__
 2230 00a6 00C0      		rjmp .L111
 2231               	.L105:
 413:../../common/command.c ****             return false;
 2232               		.loc 1 413 0
 2233 00a8 80E0      		ldi r24,lo8(__c.2832)
 2234 00aa 90E0      		ldi r25,hi8(__c.2832)
 2235 00ac 0E94 0000 		call xputs
 2236 00b0 00C0      		rjmp .L111
 2237               	.L129:
 2238               	.LBE200:
 2239               	.LBE199:
  81:../../common/command.c ****             break;
 2240               		.loc 1 81 0
 2241 00b2 81E0      		ldi r24,lo8(1)
 2242               	.L104:
  81:../../common/command.c ****             break;
 2243               		.loc 1 81 0 is_stmt 0 discriminator 4
 2244 00b4 8170      		andi r24,lo8(1)
 2245 00b6 00C0      		rjmp .L161
 2246               	.L97:
 2247               	.LBB201:
 2248               	.LBB202:
 559:../../common/command.c ****         case KC_H:
 2249               		.loc 1 559 0 is_stmt 1
 2250 00b8 C832      		cpi r28,lo8(40)
 2251 00ba 00F4      		brsh .L113
 2252 00bc CE31      		cpi r28,lo8(30)
 2253 00be 00F0      		brlo .+2
 2254 00c0 00C0      		rjmp .L114
 2255 00c2 CB30      		cpi r28,lo8(11)
 2256 00c4 01F0      		breq .L115
 2257 00c6 00F4      		brsh .L116
 2258 00c8 C730      		cpi r28,lo8(7)
 2259 00ca 01F0      		breq .+2
 2260 00cc 00C0      		rjmp .L112
 600:../../common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 2261               		.loc 1 600 0
 2262 00ce 8AE0      		ldi r24,lo8(10)
 2263 00d0 8093 0000 		sts mk_delay,r24
 601:../../common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 2264               		.loc 1 601 0
 2265 00d4 94E1      		ldi r25,lo8(20)
 2266 00d6 9093 0000 		sts mk_interval,r25
 602:../../common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 2267               		.loc 1 602 0
 2268 00da 93E0      		ldi r25,lo8(3)
 2269 00dc 9093 0000 		sts mk_max_speed,r25
 603:../../common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 2270               		.loc 1 603 0
 2271 00e0 8093 0000 		sts mk_time_to_max,r24
 604:../../common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 2272               		.loc 1 604 0
 2273 00e4 88E0      		ldi r24,lo8(8)
 2274 00e6 8093 0000 		sts mk_wheel_max_speed,r24
 605:../../common/command.c ****             print("set default values.\n");
 2275               		.loc 1 605 0
 2276 00ea 88E2      		ldi r24,lo8(40)
 2277 00ec 8093 0000 		sts mk_wheel_time_to_max,r24
 606:../../common/command.c ****             break;
 2278               		.loc 1 606 0
 2279 00f0 80E0      		ldi r24,lo8(__c.3051)
 2280 00f2 90E0      		ldi r25,hi8(__c.3051)
 2281 00f4 0E94 0000 		call xputs
 2282 00f8 00C0      		rjmp .L125
 2283               	.L116:
 559:../../common/command.c ****         case KC_H:
 2284               		.loc 1 559 0
 2285 00fa C331      		cpi r28,lo8(19)
 2286 00fc 01F0      		breq .L118
 2287 00fe C431      		cpi r28,lo8(20)
 2288 0100 01F0      		breq .L119
 2289 0102 00C0      		rjmp .L112
 2290               	.L113:
 2291 0104 CB34      		cpi r28,lo8(75)
 2292 0106 01F4      		brne .+2
 2293 0108 00C0      		rjmp .L120
 2294 010a 00F4      		brsh .L121
 2295 010c C932      		cpi r28,lo8(41)
 2296 010e 01F0      		breq .L119
 2297 0110 C833      		cpi r28,lo8(56)
 2298 0112 01F0      		breq .L115
 2299 0114 00C0      		rjmp .L112
 2300               	.L121:
 2301 0116 C135      		cpi r28,lo8(81)
 2302 0118 01F4      		brne .+2
 2303 011a 00C0      		rjmp .L122
 2304 011c C235      		cpi r28,lo8(82)
 2305 011e 01F4      		brne .+2
 2306 0120 00C0      		rjmp .L123
 2307 0122 CE34      		cpi r28,lo8(78)
 2308 0124 01F0      		breq .+2
 2309 0126 00C0      		rjmp .L112
 597:../../common/command.c ****             break;
 2310               		.loc 1 597 0
 2311 0128 6AE0      		ldi r22,lo8(10)
 2312 012a 00C0      		rjmp .L163
 2313               	.L115:
 562:../../common/command.c ****             break;
 2314               		.loc 1 562 0
 2315 012c 0E94 0000 		call mousekey_console_help
 2316 0130 00C0      		rjmp .L125
 2317               	.L119:
 566:../../common/command.c ****             print("\nQuit Mousekey Console\n");
 2318               		.loc 1 566 0
 2319 0132 1092 0000 		sts mousekey_param,__zero_reg__
 567:../../common/command.c ****             print("C> ");
 2320               		.loc 1 567 0
 2321 0136 80E0      		ldi r24,lo8(__c.3025)
 2322 0138 90E0      		ldi r25,hi8(__c.3025)
 2323 013a 0E94 0000 		call xputs
 568:../../common/command.c ****             command_state = CONSOLE;
 2324               		.loc 1 568 0
 2325 013e 80E0      		ldi r24,lo8(__c.3027)
 2326 0140 90E0      		ldi r25,hi8(__c.3027)
 2327 0142 0E94 0000 		call xputs
 569:../../common/command.c ****             return false;
 2328               		.loc 1 569 0
 2329 0146 81E0      		ldi r24,lo8(1)
 2330 0148 8093 0000 		sts command_state,r24
 2331 014c 00C0      		rjmp .L161
 2332               	.L118:
 2333               	.LBB203:
 2334               	.LBB204:
 429:../../common/command.c ****     print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
 2335               		.loc 1 429 0
 2336 014e 80E0      		ldi r24,lo8(__c.2840)
 2337 0150 90E0      		ldi r25,hi8(__c.2840)
 2338 0152 0E94 0000 		call xputs
 430:../../common/command.c ****     print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
 2339               		.loc 1 430 0
 2340 0156 80E0      		ldi r24,lo8(__c.2842)
 2341 0158 90E0      		ldi r25,hi8(__c.2842)
 2342 015a 0E94 0000 		call xputs
 2343 015e 8091 0000 		lds r24,mk_delay
 2344 0162 1F92      		push __zero_reg__
 2345               	.LCFI183:
 2346               		.cfi_def_cfa_offset 4
 2347 0164 8F93      		push r24
 2348               	.LCFI184:
 2349               		.cfi_def_cfa_offset 5
 2350 0166 80E0      		ldi r24,lo8(__c.2844)
 2351 0168 90E0      		ldi r25,hi8(__c.2844)
 2352 016a 9F93      		push r25
 2353               	.LCFI185:
 2354               		.cfi_def_cfa_offset 6
 2355 016c 8F93      		push r24
 2356               	.LCFI186:
 2357               		.cfi_def_cfa_offset 7
 2358 016e 0E94 0000 		call __xprintf
 2359 0172 80E0      		ldi r24,lo8(__c.2846)
 2360 0174 90E0      		ldi r25,hi8(__c.2846)
 2361 0176 0E94 0000 		call xputs
 431:../../common/command.c ****     print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
 2362               		.loc 1 431 0
 2363 017a 80E0      		ldi r24,lo8(__c.2848)
 2364 017c 90E0      		ldi r25,hi8(__c.2848)
 2365 017e 0E94 0000 		call xputs
 2366 0182 8091 0000 		lds r24,mk_interval
 2367 0186 1F92      		push __zero_reg__
 2368               	.LCFI187:
 2369               		.cfi_def_cfa_offset 8
 2370 0188 8F93      		push r24
 2371               	.LCFI188:
 2372               		.cfi_def_cfa_offset 9
 2373 018a 80E0      		ldi r24,lo8(__c.2850)
 2374 018c 90E0      		ldi r25,hi8(__c.2850)
 2375 018e 9F93      		push r25
 2376               	.LCFI189:
 2377               		.cfi_def_cfa_offset 10
 2378 0190 8F93      		push r24
 2379               	.LCFI190:
 2380               		.cfi_def_cfa_offset 11
 2381 0192 0E94 0000 		call __xprintf
 2382 0196 80E0      		ldi r24,lo8(__c.2852)
 2383 0198 90E0      		ldi r25,hi8(__c.2852)
 2384 019a 0E94 0000 		call xputs
 432:../../common/command.c ****     print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
 2385               		.loc 1 432 0
 2386 019e 80E0      		ldi r24,lo8(__c.2854)
 2387 01a0 90E0      		ldi r25,hi8(__c.2854)
 2388 01a2 0E94 0000 		call xputs
 2389 01a6 8091 0000 		lds r24,mk_max_speed
 2390 01aa 1F92      		push __zero_reg__
 2391               	.LCFI191:
 2392               		.cfi_def_cfa_offset 12
 2393 01ac 8F93      		push r24
 2394               	.LCFI192:
 2395               		.cfi_def_cfa_offset 13
 2396 01ae 80E0      		ldi r24,lo8(__c.2856)
 2397 01b0 90E0      		ldi r25,hi8(__c.2856)
 2398 01b2 9F93      		push r25
 2399               	.LCFI193:
 2400               		.cfi_def_cfa_offset 14
 2401 01b4 8F93      		push r24
 2402               	.LCFI194:
 2403               		.cfi_def_cfa_offset 15
 2404 01b6 0E94 0000 		call __xprintf
 2405 01ba 80E0      		ldi r24,lo8(__c.2858)
 2406 01bc 90E0      		ldi r25,hi8(__c.2858)
 2407 01be 0E94 0000 		call xputs
 433:../../common/command.c ****     print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 2408               		.loc 1 433 0
 2409 01c2 80E0      		ldi r24,lo8(__c.2860)
 2410 01c4 90E0      		ldi r25,hi8(__c.2860)
 2411 01c6 0E94 0000 		call xputs
 2412 01ca 8091 0000 		lds r24,mk_time_to_max
 2413 01ce 1F92      		push __zero_reg__
 2414               	.LCFI195:
 2415               		.cfi_def_cfa_offset 16
 2416 01d0 8F93      		push r24
 2417               	.LCFI196:
 2418               		.cfi_def_cfa_offset 17
 2419 01d2 80E0      		ldi r24,lo8(__c.2862)
 2420 01d4 90E0      		ldi r25,hi8(__c.2862)
 2421 01d6 9F93      		push r25
 2422               	.LCFI197:
 2423               		.cfi_def_cfa_offset 18
 2424 01d8 8F93      		push r24
 2425               	.LCFI198:
 2426               		.cfi_def_cfa_offset 19
 2427 01da 0E94 0000 		call __xprintf
 2428 01de 80E0      		ldi r24,lo8(__c.2864)
 2429 01e0 90E0      		ldi r25,hi8(__c.2864)
 2430 01e2 0E94 0000 		call xputs
 434:../../common/command.c ****     print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 2431               		.loc 1 434 0
 2432 01e6 80E0      		ldi r24,lo8(__c.2866)
 2433 01e8 90E0      		ldi r25,hi8(__c.2866)
 2434 01ea 0E94 0000 		call xputs
 2435 01ee 8091 0000 		lds r24,mk_wheel_max_speed
 2436 01f2 1F92      		push __zero_reg__
 2437               	.LCFI199:
 2438               		.cfi_def_cfa_offset 20
 2439 01f4 8F93      		push r24
 2440               	.LCFI200:
 2441               		.cfi_def_cfa_offset 21
 2442 01f6 80E0      		ldi r24,lo8(__c.2868)
 2443 01f8 90E0      		ldi r25,hi8(__c.2868)
 2444 01fa 9F93      		push r25
 2445               	.LCFI201:
 2446               		.cfi_def_cfa_offset 22
 2447 01fc 8F93      		push r24
 2448               	.LCFI202:
 2449               		.cfi_def_cfa_offset 23
 2450 01fe 0E94 0000 		call __xprintf
 2451 0202 80E0      		ldi r24,lo8(__c.2870)
 2452 0204 90E0      		ldi r25,hi8(__c.2870)
 2453 0206 0E94 0000 		call xputs
 435:../../common/command.c **** }
 2454               		.loc 1 435 0
 2455 020a 80E0      		ldi r24,lo8(__c.2872)
 2456 020c 90E0      		ldi r25,hi8(__c.2872)
 2457 020e 0E94 0000 		call xputs
 2458 0212 8091 0000 		lds r24,mk_wheel_time_to_max
 2459 0216 1F92      		push __zero_reg__
 2460               	.LCFI203:
 2461               		.cfi_def_cfa_offset 24
 2462 0218 8F93      		push r24
 2463               	.LCFI204:
 2464               		.cfi_def_cfa_offset 25
 2465 021a 80E0      		ldi r24,lo8(__c.2874)
 2466 021c 90E0      		ldi r25,hi8(__c.2874)
 2467 021e 9F93      		push r25
 2468               	.LCFI205:
 2469               		.cfi_def_cfa_offset 26
 2470 0220 8F93      		push r24
 2471               	.LCFI206:
 2472               		.cfi_def_cfa_offset 27
 2473 0222 0E94 0000 		call __xprintf
 2474 0226 80E0      		ldi r24,lo8(__c.2876)
 2475 0228 90E0      		ldi r25,hi8(__c.2876)
 2476 022a 0E94 0000 		call xputs
 2477 022e 8DB7      		in r24,__SP_L__
 2478 0230 9EB7      		in r25,__SP_H__
 2479 0232 4896      		adiw r24,24
 2480 0234 0FB6      		in __tmp_reg__,__SREG__
 2481 0236 F894      		cli
 2482 0238 9EBF      		out __SP_H__,r25
 2483 023a 0FBE      		out __SREG__,__tmp_reg__
 2484 023c 8DBF      		out __SP_L__,r24
 2485               	.LCFI207:
 2486               		.cfi_def_cfa_offset 3
 2487 023e 00C0      		rjmp .L125
 2488               	.L114:
 2489 0240 CE51      		subi r28,lo8(-(-30))
 2490 0242 EC2F      		mov r30,r28
 2491 0244 F0E0      		ldi r31,0
 2492 0246 E050      		subi r30,lo8(-(CSWTCH.51))
 2493 0248 F040      		sbci r31,hi8(-(CSWTCH.51))
 2494               	.LBE204:
 2495               	.LBE203:
 584:../../common/command.c ****             print("selected parameter: "); pdec(mousekey_param); print("\n");
 2496               		.loc 1 584 0
 2497 024a 8081      		ld r24,Z
 2498 024c 8093 0000 		sts mousekey_param,r24
 585:../../common/command.c ****             break;
 2499               		.loc 1 585 0
 2500 0250 80E0      		ldi r24,lo8(__c.3040)
 2501 0252 90E0      		ldi r25,hi8(__c.3040)
 2502 0254 0E94 0000 		call xputs
 2503 0258 8091 0000 		lds r24,mousekey_param
 2504 025c 1F92      		push __zero_reg__
 2505               	.LCFI208:
 2506               		.cfi_def_cfa_offset 4
 2507 025e 8F93      		push r24
 2508               	.LCFI209:
 2509               		.cfi_def_cfa_offset 5
 2510 0260 80E0      		ldi r24,lo8(__c.3042)
 2511 0262 90E0      		ldi r25,hi8(__c.3042)
 2512 0264 9F93      		push r25
 2513               	.LCFI210:
 2514               		.cfi_def_cfa_offset 6
 2515 0266 8F93      		push r24
 2516               	.LCFI211:
 2517               		.cfi_def_cfa_offset 7
 2518 0268 0E94 0000 		call __xprintf
 2519 026c 80E0      		ldi r24,lo8(__c.3044)
 2520 026e 90E0      		ldi r25,hi8(__c.3044)
 2521 0270 0E94 0000 		call xputs
 2522 0274 0F90      		pop __tmp_reg__
 2523 0276 0F90      		pop __tmp_reg__
 2524 0278 0F90      		pop __tmp_reg__
 2525 027a 0F90      		pop __tmp_reg__
 2526               	.LCFI212:
 2527               		.cfi_def_cfa_offset 3
 2528 027c 00C0      		rjmp .L125
 2529               	.L123:
 588:../../common/command.c ****             break;
 2530               		.loc 1 588 0
 2531 027e 61E0      		ldi r22,lo8(1)
 2532 0280 00C0      		rjmp .L162
 2533               	.L122:
 591:../../common/command.c ****             break;
 2534               		.loc 1 591 0
 2535 0282 61E0      		ldi r22,lo8(1)
 2536 0284 00C0      		rjmp .L163
 2537               	.L120:
 594:../../common/command.c ****             break;
 2538               		.loc 1 594 0
 2539 0286 6AE0      		ldi r22,lo8(10)
 2540               	.L162:
 2541 0288 8091 0000 		lds r24,mousekey_param
 2542 028c 0E94 0000 		call mousekey_param_inc
 2543 0290 00C0      		rjmp .L125
 2544               	.L163:
 597:../../common/command.c ****             break;
 2545               		.loc 1 597 0
 2546 0292 8091 0000 		lds r24,mousekey_param
 2547 0296 0E94 0000 		call mousekey_param_dec
 2548 029a 00C0      		rjmp .L125
 2549               	.L112:
 609:../../common/command.c ****             return false;
 2550               		.loc 1 609 0
 2551 029c 80E0      		ldi r24,lo8(__c.3054)
 2552 029e 90E0      		ldi r25,hi8(__c.3054)
 2553 02a0 0E94 0000 		call xputs
 2554 02a4 00C0      		rjmp .L164
 2555               	.L125:
 612:../../common/command.c ****     return true;
 2556               		.loc 1 612 0
 2557 02a6 80E0      		ldi r24,lo8(__c.3056)
 2558 02a8 90E0      		ldi r25,hi8(__c.3056)
 2559 02aa 0E94 0000 		call xputs
 2560 02ae 8091 0000 		lds r24,mousekey_param
 2561 02b2 1F92      		push __zero_reg__
 2562               	.LCFI213:
 2563               		.cfi_def_cfa_offset 4
 2564 02b4 8F93      		push r24
 2565               	.LCFI214:
 2566               		.cfi_def_cfa_offset 5
 2567 02b6 80E0      		ldi r24,lo8(__c.3058)
 2568 02b8 90E0      		ldi r25,hi8(__c.3058)
 2569 02ba 9F93      		push r25
 2570               	.LCFI215:
 2571               		.cfi_def_cfa_offset 6
 2572 02bc 8F93      		push r24
 2573               	.LCFI216:
 2574               		.cfi_def_cfa_offset 7
 2575 02be 0E94 0000 		call __xprintf
 2576 02c2 80E0      		ldi r24,lo8(__c.3060)
 2577 02c4 90E0      		ldi r25,hi8(__c.3060)
 2578 02c6 0E94 0000 		call xputs
 2579 02ca 0F90      		pop __tmp_reg__
 2580 02cc 0F90      		pop __tmp_reg__
 2581 02ce 0F90      		pop __tmp_reg__
 2582 02d0 0F90      		pop __tmp_reg__
 2583               	.LCFI217:
 2584               		.cfi_def_cfa_offset 3
 2585               	.L164:
 2586               	.LBE202:
 2587               	.LBE201:
  92:../../common/command.c **** }
 2588               		.loc 1 92 0
 2589 02d2 81E0      		ldi r24,lo8(1)
 2590 02d4 00C0      		rjmp .L161
 2591               	.L167:
  89:../../common/command.c ****             return false;
 2592               		.loc 1 89 0
 2593 02d6 1092 0000 		sts command_state,__zero_reg__
 2594               	.L126:
  74:../../common/command.c ****             return (command_extra(code) || command_common(code));
 2595               		.loc 1 74 0
 2596 02da 80E0      		ldi r24,0
 2597 02dc 00C0      		rjmp .L161
 2598               	.L111:
  81:../../common/command.c ****             break;
 2599               		.loc 1 81 0
 2600 02de 80E0      		ldi r24,0
 2601 02e0 00C0      		rjmp .L104
 2602               	.L161:
 2603               	/* epilogue start */
  93:../../common/command.c **** 
 2604               		.loc 1 93 0
 2605 02e2 CF91      		pop r28
 2606 02e4 0895      		ret
 2607               		.cfi_endproc
 2608               	.LFE12:
 2610               		.section	.rodata
 2613               	CSWTCH.51:
 2614 0000 01        		.byte	1
 2615 0001 02        		.byte	2
 2616 0002 03        		.byte	3
 2617 0003 04        		.byte	4
 2618 0004 05        		.byte	5
 2619 0005 06        		.byte	6
 2620 0006 07        		.byte	7
 2621 0007 08        		.byte	8
 2622 0008 09        		.byte	9
 2623 0009 00        		.byte	0
 2624               		.section	.progmem.data,"a",@progbits
 2627               	__c.2970:
 2628 0000 0A00      		.string	"\n"
 2631               	__c.2968:
 2632 0002 2575 00   		.string	"%u"
 2635               	__c.2966:
 2636 0005 6D6B 5F77 		.string	"mk_wheel_time_to_max = "
 2636      6865 656C 
 2636      5F74 696D 
 2636      655F 746F 
 2636      5F6D 6178 
 2639               	__c.2963:
 2640 001d 0A00      		.string	"\n"
 2643               	__c.2961:
 2644 001f 2575 00   		.string	"%u"
 2647               	__c.2959:
 2648 0022 6D6B 5F77 		.string	"mk_wheel_max_speed = "
 2648      6865 656C 
 2648      5F6D 6178 
 2648      5F73 7065 
 2648      6564 203D 
 2651               	__c.2956:
 2652 0038 0A00      		.string	"\n"
 2655               	__c.2954:
 2656 003a 2575 00   		.string	"%u"
 2659               	__c.2952:
 2660 003d 6D6B 5F74 		.string	"mk_time_to_max = "
 2660      696D 655F 
 2660      746F 5F6D 
 2660      6178 203D 
 2660      2000 
 2663               	__c.2949:
 2664 004f 0A00      		.string	"\n"
 2667               	__c.2947:
 2668 0051 2575 00   		.string	"%u"
 2671               	__c.2945:
 2672 0054 6D6B 5F6D 		.string	"mk_max_speed = "
 2672      6178 5F73 
 2672      7065 6564 
 2672      203D 2000 
 2675               	__c.2942:
 2676 0064 0A00      		.string	"\n"
 2679               	__c.2940:
 2680 0066 2575 00   		.string	"%u"
 2683               	__c.2938:
 2684 0069 6D6B 5F69 		.string	"mk_interval = "
 2684      6E74 6572 
 2684      7661 6C20 
 2684      3D20 00
 2687               	__c.2934:
 2688 0078 0A00      		.string	"\n"
 2691               	__c.2932:
 2692 007a 2575 00   		.string	"%u"
 2695               	__c.2930:
 2696 007d 6D6B 5F64 		.string	"mk_delay = "
 2696      656C 6179 
 2696      203D 2000 
 2699               	__c.2923:
 2700 0089 0A00      		.string	"\n"
 2703               	__c.2921:
 2704 008b 2575 00   		.string	"%u"
 2707               	__c.2919:
 2708 008e 6D6B 5F77 		.string	"mk_wheel_time_to_max = "
 2708      6865 656C 
 2708      5F74 696D 
 2708      655F 746F 
 2708      5F6D 6178 
 2711               	__c.2916:
 2712 00a6 0A00      		.string	"\n"
 2715               	__c.2914:
 2716 00a8 2575 00   		.string	"%u"
 2719               	__c.2912:
 2720 00ab 6D6B 5F77 		.string	"mk_wheel_max_speed = "
 2720      6865 656C 
 2720      5F6D 6178 
 2720      5F73 7065 
 2720      6564 203D 
 2723               	__c.2909:
 2724 00c1 0A00      		.string	"\n"
 2727               	__c.2907:
 2728 00c3 2575 00   		.string	"%u"
 2731               	__c.2905:
 2732 00c6 6D6B 5F74 		.string	"mk_time_to_max = "
 2732      696D 655F 
 2732      746F 5F6D 
 2732      6178 203D 
 2732      2000 
 2735               	__c.2902:
 2736 00d8 0A00      		.string	"\n"
 2739               	__c.2900:
 2740 00da 2575 00   		.string	"%u"
 2743               	__c.2898:
 2744 00dd 6D6B 5F6D 		.string	"mk_max_speed = "
 2744      6178 5F73 
 2744      7065 6564 
 2744      203D 2000 
 2747               	__c.2895:
 2748 00ed 0A00      		.string	"\n"
 2751               	__c.2893:
 2752 00ef 2575 00   		.string	"%u"
 2755               	__c.2891:
 2756 00f2 6D6B 5F69 		.string	"mk_interval = "
 2756      6E74 6572 
 2756      7661 6C20 
 2756      3D20 00
 2759               	__c.2887:
 2760 0101 0A00      		.string	"\n"
 2763               	__c.2885:
 2764 0103 2575 00   		.string	"%u"
 2767               	__c.2883:
 2768 0106 6D6B 5F64 		.string	"mk_delay = "
 2768      656C 6179 
 2768      203D 2000 
 2771               	__c.2876:
 2772 0112 0A00      		.string	"\n"
 2775               	__c.2874:
 2776 0114 2575 00   		.string	"%u"
 2779               	__c.2872:
 2780 0117 363A 206D 		.string	"6: mk_wheel_time_to_max: "
 2780      6B5F 7768 
 2780      6565 6C5F 
 2780      7469 6D65 
 2780      5F74 6F5F 
 2783               	__c.2870:
 2784 0131 0A00      		.string	"\n"
 2787               	__c.2868:
 2788 0133 2575 00   		.string	"%u"
 2791               	__c.2866:
 2792 0136 353A 206D 		.string	"5: mk_wheel_max_speed: "
 2792      6B5F 7768 
 2792      6565 6C5F 
 2792      6D61 785F 
 2792      7370 6565 
 2795               	__c.2864:
 2796 014e 0A00      		.string	"\n"
 2799               	__c.2862:
 2800 0150 2575 00   		.string	"%u"
 2803               	__c.2860:
 2804 0153 343A 206D 		.string	"4: mk_time_to_max: "
 2804      6B5F 7469 
 2804      6D65 5F74 
 2804      6F5F 6D61 
 2804      783A 2000 
 2807               	__c.2858:
 2808 0167 0A00      		.string	"\n"
 2811               	__c.2856:
 2812 0169 2575 00   		.string	"%u"
 2815               	__c.2854:
 2816 016c 333A 206D 		.string	"3: mk_max_speed: "
 2816      6B5F 6D61 
 2816      785F 7370 
 2816      6565 643A 
 2816      2000 
 2819               	__c.2852:
 2820 017e 0A00      		.string	"\n"
 2823               	__c.2850:
 2824 0180 2575 00   		.string	"%u"
 2827               	__c.2848:
 2828 0183 323A 206D 		.string	"2: mk_interval(ms): "
 2828      6B5F 696E 
 2828      7465 7276 
 2828      616C 286D 
 2828      7329 3A20 
 2831               	__c.2846:
 2832 0198 0A00      		.string	"\n"
 2835               	__c.2844:
 2836 019a 2575 00   		.string	"%u"
 2839               	__c.2842:
 2840 019d 313A 206D 		.string	"1: mk_delay(*10ms): "
 2840      6B5F 6465 
 2840      6C61 7928 
 2840      2A31 306D 
 2840      7329 3A20 
 2843               	__c.2840:
 2844 01b2 0A0A 2D2D 		.string	"\n\n----- Mousekey Parameters -----\n"
 2844      2D2D 2D20 
 2844      4D6F 7573 
 2844      656B 6579 
 2844      2050 6172 
 2847               	__c.3060:
 2848 01d5 3E20 00   		.string	"> "
 2851               	__c.3058:
 2852 01d8 2575 00   		.string	"%u"
 2855               	__c.3056:
 2856 01db 4D00      		.string	"M"
 2859               	__c.3054:
 2860 01dd 3F00      		.string	"?"
 2863               	__c.3051:
 2864 01df 7365 7420 		.string	"set default values.\n"
 2864      6465 6661 
 2864      756C 7420 
 2864      7661 6C75 
 2864      6573 2E0A 
 2867               	__c.3044:
 2868 01f4 0A00      		.string	"\n"
 2871               	__c.3042:
 2872 01f6 2575 00   		.string	"%u"
 2875               	__c.3040:
 2876 01f9 7365 6C65 		.string	"selected parameter: "
 2876      6374 6564 
 2876      2070 6172 
 2876      616D 6574 
 2876      6572 3A20 
 2879               	__c.3027:
 2880 020e 433E 2000 		.string	"C> "
 2883               	__c.3025:
 2884 0212 0A51 7569 		.string	"\nQuit Mousekey Console\n"
 2884      7420 4D6F 
 2884      7573 656B 
 2884      6579 2043 
 2884      6F6E 736F 
 2887               	__c.3015:
 2888 022a 5365 6520 		.string	"See http://en.wikipedia.org/wiki/Mouse_keys\n"
 2888      6874 7470 
 2888      3A2F 2F65 
 2888      6E2E 7769 
 2888      6B69 7065 
 2891               	__c.3013:
 2892 0257 0A00      		.string	"\n"
 2895               	__c.3011:
 2896 0259 2575 00   		.string	"%u"
 2899               	__c.3009:
 2900 025c 2C20 7768 		.string	", wheel="
 2900      6565 6C3D 
 2900      00
 2903               	__c.3007:
 2904 0265 2575 00   		.string	"%u"
 2907               	__c.3005:
 2908 0268 7768 6572 		.string	"where delta: cursor="
 2908      6520 6465 
 2908      6C74 613A 
 2908      2063 7572 
 2908      736F 723D 
 2911               	__c.3003:
 2912 027d 0A73 7065 		.string	"\nspeed = delta * max_speed * (repeat / time_to_max)\n"
 2912      6564 203D 
 2912      2064 656C 
 2912      7461 202A 
 2912      206D 6178 
 2915               	__c.3001:
 2916 02b2 7067 646F 		.string	"pgdown:\tdecrease parameters(-10)\n"
 2916      776E 3A09 
 2916      6465 6372 
 2916      6561 7365 
 2916      2070 6172 
 2919               	__c.2999:
 2920 02d4 7067 7570 		.string	"pgup:\tincrease parameters(+10)\n"
 2920      3A09 696E 
 2920      6372 6561 
 2920      7365 2070 
 2920      6172 616D 
 2923               	__c.2997:
 2924 02f4 646F 776E 		.string	"down:\tdecrease parameters(-1)\n"
 2924      3A09 6465 
 2924      6372 6561 
 2924      7365 2070 
 2924      6172 616D 
 2927               	__c.2995:
 2928 0313 7570 3A09 		.string	"up:\tincrease parameters(+1)\n"
 2928      696E 6372 
 2928      6561 7365 
 2928      2070 6172 
 2928      616D 6574 
 2931               	__c.2993:
 2932 0330 643A 0973 		.string	"d:\tset default values\n"
 2932      6574 2064 
 2932      6566 6175 
 2932      6C74 2076 
 2932      616C 7565 
 2935               	__c.2991:
 2936 0347 703A 0970 		.string	"p:\tprint parameters\n"
 2936      7269 6E74 
 2936      2070 6172 
 2936      616D 6574 
 2936      6572 730A 
 2939               	__c.2989:
 2940 035c 363A 0973 		.string	"6:\tselect mk_wheel_time_to_max\n"
 2940      656C 6563 
 2940      7420 6D6B 
 2940      5F77 6865 
 2940      656C 5F74 
 2943               	__c.2987:
 2944 037c 353A 0973 		.string	"5:\tselect mk_wheel_max_speed\n"
 2944      656C 6563 
 2944      7420 6D6B 
 2944      5F77 6865 
 2944      656C 5F6D 
 2947               	__c.2985:
 2948 039a 343A 0973 		.string	"4:\tselect mk_time_to_max\n"
 2948      656C 6563 
 2948      7420 6D6B 
 2948      5F74 696D 
 2948      655F 746F 
 2951               	__c.2983:
 2952 03b4 333A 0973 		.string	"3:\tselect mk_max_speed\n"
 2952      656C 6563 
 2952      7420 6D6B 
 2952      5F6D 6178 
 2952      5F73 7065 
 2955               	__c.2981:
 2956 03cc 323A 0973 		.string	"2:\tselect mk_interval(ms)\n"
 2956      656C 6563 
 2956      7420 6D6B 
 2956      5F69 6E74 
 2956      6572 7661 
 2959               	__c.2979:
 2960 03e7 313A 0973 		.string	"1:\tselect mk_delay(*10ms)\n"
 2960      656C 6563 
 2960      7420 6D6B 
 2960      5F64 656C 
 2960      6179 282A 
 2963               	__c.2977:
 2964 0402 4553 432F 		.string	"ESC/q:\tquit\n"
 2964      713A 0971 
 2964      7569 740A 
 2964      00
 2967               	__c.2975:
 2968 040f 0A0A 2D2D 		.string	"\n\n----- Mousekey Parameters Help -----\n"
 2968      2D2D 2D20 
 2968      4D6F 7573 
 2968      656B 6579 
 2968      2050 6172 
 2971               	__c.2832:
 2972 0437 3F00      		.string	"?"
 2975               	__c.2829:
 2976 0439 4D30 3E00 		.string	"M0>"
 2979               	__c.2827:
 2980 043d 0A45 6E74 		.string	"\nEnter Mousekey Console\n"
 2980      6572 204D 
 2980      6F75 7365 
 2980      6B65 7920 
 2980      436F 6E73 
 2983               	__c.2824:
 2984 0456 0A51 7569 		.string	"\nQuit Console Mode\n"
 2984      7420 436F 
 2984      6E73 6F6C 
 2984      6520 4D6F 
 2984      6465 0A00 
 2987               	__c.2834:
 2988 046a 433E 2000 		.string	"C> "
 2991               	__c.3086:
 2992 046e 0A00      		.string	"\n"
 2995               	__c.3084:
 2996 0470 2575 00   		.string	"%u"
 2999               	__c.3082:
 3000 0473 2074 6F20 		.string	" to "
 3000      00
 3003               	__c.3080:
 3004 0478 2575 00   		.string	"%u"
 3007               	__c.3078:
 3008 047b 7377 6974 		.string	"switch_default_layer: "
 3008      6368 5F64 
 3008      6566 6175 
 3008      6C74 5F6C 
 3008      6179 6572 
 3011               	__c.2814:
 3012 0492 6D3A 096D 		.string	"m:\tmousekey\n"
 3012      6F75 7365 
 3012      6B65 790A 
 3012      00
 3015               	__c.2812:
 3016 049f 4553 432F 		.string	"ESC/q:\tquit\n"
 3016      713A 0971 
 3016      7569 740A 
 3016      00
 3019               	__c.2810:
 3020 04ac 0A0A 2D2D 		.string	"\n\n----- Console Help -----\n"
 3020      2D2D 2D20 
 3020      436F 6E73 
 3020      6F6C 6520 
 3020      4865 6C70 
 3023               	__c.2613:
 3024 04c8 5061 7573 		.string	"Paus:\tjump to bootloader\n"
 3024      3A09 6A75 
 3024      6D70 2074 
 3024      6F20 626F 
 3024      6F74 6C6F 
 3027               	__c.2611:
 3028 04e2 4361 7073 		.string	"Caps:\tLock Keyboard(Child Proof)\n"
 3028      3A09 4C6F 
 3028      636B 204B 
 3028      6579 626F 
 3028      6172 6428 
 3031               	__c.2609:
 3032 0504 5053 6372 		.string	"PScr:\tpower down/remote wake-up\n"
 3032      3A09 706F 
 3032      7765 7220 
 3032      646F 776E 
 3032      2F72 656D 
 3035               	__c.2607:
 3036 0525 342F 4634 		.string	"4/F4:\tswitch to Layer4 \n"
 3036      3A09 7377 
 3036      6974 6368 
 3036      2074 6F20 
 3036      4C61 7965 
 3039               	__c.2605:
 3040 053e 332F 4633 		.string	"3/F3:\tswitch to Layer3 \n"
 3040      3A09 7377 
 3040      6974 6368 
 3040      2074 6F20 
 3040      4C61 7965 
 3043               	__c.2603:
 3044 0557 322F 4632 		.string	"2/F2:\tswitch to Layer2 \n"
 3044      3A09 7377 
 3044      6974 6368 
 3044      2074 6F20 
 3044      4C61 7965 
 3047               	__c.2601:
 3048 0570 312F 4631 		.string	"1/F1:\tswitch to Layer1 \n"
 3048      3A09 7377 
 3048      6974 6368 
 3048      2074 6F20 
 3048      4C61 7965 
 3051               	__c.2599:
 3052 0589 302F 4631 		.string	"0/F10:\tswitch to Layer0 \n"
 3052      303A 0973 
 3052      7769 7463 
 3052      6820 746F 
 3052      204C 6179 
 3055               	__c.2597:
 3056 05a3 6E3A 0974 		.string	"n:\ttoggle NKRO\n"
 3056      6F67 676C 
 3056      6520 4E4B 
 3056      524F 0A00 
 3059               	__c.2595:
 3060 05b3 653A 0970 		.string	"e:\tprint eeprom config\n"
 3060      7269 6E74 
 3060      2065 6570 
 3060      726F 6D20 
 3060      636F 6E66 
 3063               	__c.2593:
 3064 05cb 733A 0970 		.string	"s:\tprint status\n"
 3064      7269 6E74 
 3064      2073 7461 
 3064      7475 730A 
 3064      00
 3067               	__c.2591:
 3068 05dc 743A 0970 		.string	"t:\tprint timer count\n"
 3068      7269 6E74 
 3068      2074 696D 
 3068      6572 2063 
 3068      6F75 6E74 
 3071               	__c.2589:
 3072 05f2 763A 0970 		.string	"v:\tprint device version & info\n"
 3072      7269 6E74 
 3072      2064 6576 
 3072      6963 6520 
 3072      7665 7273 
 3075               	__c.2587:
 3076 0612 7A3A 0974 		.string	"z:\ttoggle sleep LED test\n"
 3076      6F67 676C 
 3076      6520 736C 
 3076      6565 7020 
 3076      4C45 4420 
 3079               	__c.2585:
 3080 062c 6D3A 0974 		.string	"m:\ttoggle mouse debug\n"
 3080      6F67 676C 
 3080      6520 6D6F 
 3080      7573 6520 
 3080      6465 6275 
 3083               	__c.2583:
 3084 0643 6B3A 0974 		.string	"k:\ttoggle keyboard debug\n"
 3084      6F67 676C 
 3084      6520 6B65 
 3084      7962 6F61 
 3084      7264 2064 
 3087               	__c.2581:
 3088 065d 783A 0974 		.string	"x:\ttoggle matrix debug\n"
 3088      6F67 676C 
 3088      6520 6D61 
 3088      7472 6978 
 3088      2064 6562 
 3091               	__c.2579:
 3092 0675 643A 0974 		.string	"d:\ttoggle debug enable\n"
 3092      6F67 676C 
 3092      6520 6465 
 3092      6275 6720 
 3092      656E 6162 
 3095               	__c.2577:
 3096 068d 633A 0965 		.string	"c:\tenter console mode\n"
 3096      6E74 6572 
 3096      2063 6F6E 
 3096      736F 6C65 
 3096      206D 6F64 
 3099               	__c.2575:
 3100 06a4 0A0A 2D2D 		.string	"\n\n----- Command Help -----\n"
 3100      2D2D 2D20 
 3100      436F 6D6D 
 3100      616E 6420 
 3100      4865 6C70 
 3103               	__c.2708:
 3104 06c0 0A00      		.string	"\n"
 3107               	__c.2706:
 3108 06c2 2575 00   		.string	"%u"
 3111               	__c.2704:
 3112 06c5 2E6E 6B72 		.string	".nkro: "
 3112      6F3A 2000 
 3115               	__c.2702:
 3116 06cd 0A00      		.string	"\n"
 3119               	__c.2700:
 3120 06cf 2575 00   		.string	"%u"
 3123               	__c.2698:
 3124 06d2 2E73 7761 		.string	".swap_backslash_backspace: "
 3124      705F 6261 
 3124      636B 736C 
 3124      6173 685F 
 3124      6261 636B 
 3127               	__c.2696:
 3128 06ee 0A00      		.string	"\n"
 3131               	__c.2694:
 3132 06f0 2575 00   		.string	"%u"
 3135               	__c.2692:
 3136 06f3 2E73 7761 		.string	".swap_grave_esc: "
 3136      705F 6772 
 3136      6176 655F 
 3136      6573 633A 
 3136      2000 
 3139               	__c.2690:
 3140 0705 0A00      		.string	"\n"
 3143               	__c.2688:
 3144 0707 2575 00   		.string	"%u"
 3147               	__c.2686:
 3148 070a 2E6E 6F5F 		.string	".no_gui: "
 3148      6775 693A 
 3148      2000 
 3151               	__c.2684:
 3152 0714 0A00      		.string	"\n"
 3155               	__c.2682:
 3156 0716 2575 00   		.string	"%u"
 3159               	__c.2680:
 3160 0719 2E73 7761 		.string	".swap_ralt_rgui: "
 3160      705F 7261 
 3160      6C74 5F72 
 3160      6775 693A 
 3160      2000 
 3163               	__c.2678:
 3164 072b 0A00      		.string	"\n"
 3167               	__c.2676:
 3168 072d 2575 00   		.string	"%u"
 3171               	__c.2674:
 3172 0730 2E73 7761 		.string	".swap_lalt_lgui: "
 3172      705F 6C61 
 3172      6C74 5F6C 
 3172      6775 693A 
 3172      2000 
 3175               	__c.2672:
 3176 0742 0A00      		.string	"\n"
 3179               	__c.2670:
 3180 0744 2575 00   		.string	"%u"
 3183               	__c.2668:
 3184 0747 2E63 6170 		.string	".capslock_to_control: "
 3184      736C 6F63 
 3184      6B5F 746F 
 3184      5F63 6F6E 
 3184      7472 6F6C 
 3187               	__c.2666:
 3188 075e 0A00      		.string	"\n"
 3191               	__c.2664:
 3192 0760 2575 00   		.string	"%u"
 3195               	__c.2662:
 3196 0763 2E73 7761 		.string	".swap_control_capslock: "
 3196      705F 636F 
 3196      6E74 726F 
 3196      6C5F 6361 
 3196      7073 6C6F 
 3199               	__c.2660:
 3200 077c 0A00      		.string	"\n"
 3203               	__c.2658:
 3204 077e 2530 3258 		.string	"%02X"
 3204      00
 3207               	__c.2656:
 3208 0783 6B65 796D 		.string	"keymap_config.raw: "
 3208      6170 5F63 
 3208      6F6E 6669 
 3208      672E 7261 
 3208      773A 2000 
 3211               	__c.2653:
 3212 0797 0A00      		.string	"\n"
 3215               	__c.2651:
 3216 0799 2575 00   		.string	"%u"
 3219               	__c.2649:
 3220 079c 2E6D 6F75 		.string	".mouse: "
 3220      7365 3A20 
 3220      00
 3223               	__c.2647:
 3224 07a5 0A00      		.string	"\n"
 3227               	__c.2645:
 3228 07a7 2575 00   		.string	"%u"
 3231               	__c.2643:
 3232 07aa 2E6B 6579 		.string	".keyboard: "
 3232      626F 6172 
 3232      643A 2000 
 3235               	__c.2641:
 3236 07b6 0A00      		.string	"\n"
 3239               	__c.2639:
 3240 07b8 2575 00   		.string	"%u"
 3243               	__c.2637:
 3244 07bb 2E6D 6174 		.string	".matrix: "
 3244      7269 783A 
 3244      2000 
 3247               	__c.2635:
 3248 07c5 0A00      		.string	"\n"
 3251               	__c.2633:
 3252 07c7 2575 00   		.string	"%u"
 3255               	__c.2631:
 3256 07ca 2E65 6E61 		.string	".enable: "
 3256      626C 653A 
 3256      2000 
 3259               	__c.2629:
 3260 07d4 0A00      		.string	"\n"
 3263               	__c.2627:
 3264 07d6 2530 3258 		.string	"%02X"
 3264      00
 3267               	__c.2625:
 3268 07db 6465 6275 		.string	"debug_config.raw: "
 3268      675F 636F 
 3268      6E66 6967 
 3268      2E72 6177 
 3268      3A20 00
 3271               	__c.2622:
 3272 07ee 0A00      		.string	"\n"
 3275               	__c.2620:
 3276 07f0 2575 00   		.string	"%u"
 3279               	__c.2618:
 3280 07f3 6465 6661 		.string	"default_layer: "
 3280      756C 745F 
 3280      6C61 7965 
 3280      723A 2000 
 3283               	__c.2805:
 3284 0803 3F00      		.string	"?"
 3287               	__c.2796:
 3288 0805 4E4B 524F 		.string	"NKRO: disabled\n"
 3288      3A20 6469 
 3288      7361 626C 
 3288      6564 0A00 
 3291               	__c.2794:
 3292 0815 4E4B 524F 		.string	"NKRO: enabled\n"
 3292      3A20 656E 
 3292      6162 6C65 
 3292      640A 00
 3295               	__c.2791:
 3296 0824 7573 625F 		.string	"usb_keyboard_idle_count: %X\n"
 3296      6B65 7962 
 3296      6F61 7264 
 3296      5F69 646C 
 3296      655F 636F 
 3299               	__c.2789:
 3300 0841 7573 625F 		.string	"usb_keyboard_leds: %X\n"
 3300      6B65 7962 
 3300      6F61 7264 
 3300      5F6C 6564 
 3300      733A 2025 
 3303               	__c.2787:
 3304 0858 5544 494E 		.string	"UDINT: %X\n"
 3304      543A 2025 
 3304      580A 00
 3307               	__c.2785:
 3308 0863 5544 4945 		.string	"UDIEN: %X\n"
 3308      4E3A 2025 
 3308      580A 00
 3311               	__c.2783:
 3312 086e 5544 434F 		.string	"UDCON: %X\n"
 3312      4E3A 2025 
 3312      580A 00
 3315               	__c.2781:
 3316 0879 6B65 7962 		.string	"keyboard_idle: %X\n"
 3316      6F61 7264 
 3316      5F69 646C 
 3316      653A 2025 
 3316      580A 00
 3319               	__c.2779:
 3320 088c 6B65 7962 		.string	"keyboard_protocol: %X\n"
 3320      6F61 7264 
 3320      5F70 726F 
 3320      746F 636F 
 3320      6C3A 2025 
 3323               	__c.2777:
 3324 08a3 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 3324      5F6B 6579 
 3324      626F 6172 
 3324      645F 6C65 
 3324      6473 2829 
 3327               	__c.2775:
 3328 08bd 0A0A 2D2D 		.string	"\n\n----- Status -----\n"
 3328      2D2D 2D20 
 3328      5374 6174 
 3328      7573 202D 
 3328      2D2D 2D2D 
 3331               	__c.2772:
 3332 08d3 7469 6D65 		.string	"timer_count: %04lX\n"
 3332      725F 636F 
 3332      756E 743A 
 3332      2025 3034 
 3332      6C58 0A00 
 3335               	__c.2769:
 3336 08e7 4743 433A 		.string	"GCC: 4.8.1 AVR-LIBC: 1.8.0svn AVR_ARCH: avr5\n"
 3336      2034 2E38 
 3336      2E31 2041 
 3336      5652 2D4C 
 3336      4942 433A 
 3339               	__c.2767:
 3340 0915 4F50 5449 		.string	"OPTIONS: PJRC BOOTMAGIC MOUSEKEY EXTRAKEY CONSOLE COMMAND NKRO 512\n"
 3340      4F4E 533A 
 3340      2050 4A52 
 3340      4320 424F 
 3340      4F54 4D41 
 3343               	__c.2765:
 3344 0959 4255 494C 		.string	"BUILD: 091115b-dirty (09:09:30 Dec 10 2015)\n"
 3344      443A 2030 
 3344      3931 3131 
 3344      3562 2D64 
 3344      6972 7479 
 3347               	__c.2763:
 3348 0986 5649 443A 		.string	"VID: 0xFEED(TMK/Cub) PID: 0x1307(Ergodox) VER: 0x0001\n"
 3348      2030 7846 
 3348      4545 4428 
 3348      544D 4B2F 
 3348      4375 6229 
 3351               	__c.2761:
 3352 09bd 4445 5343 		.string	"DESC: t.m.k. keyboard firmware for Ergodox\n"
 3352      3A20 742E 
 3352      6D2E 6B2E 
 3352      206B 6579 
 3352      626F 6172 
 3355               	__c.2759:
 3356 09e9 0A0A 2D2D 		.string	"\n\n----- Version -----\n"
 3356      2D2D 2D20 
 3356      5665 7273 
 3356      696F 6E20 
 3356      2D2D 2D2D 
 3359               	__c.2756:
 3360 0a00 0A44 4542 		.string	"\nDEBUG: mouse disabled.\n"
 3360      5547 3A20 
 3360      6D6F 7573 
 3360      6520 6469 
 3360      7361 626C 
 3363               	__c.2754:
 3364 0a19 0A44 4542 		.string	"\nDEBUG: mouse enabled.\n"
 3364      5547 3A20 
 3364      6D6F 7573 
 3364      6520 656E 
 3364      6162 6C65 
 3367               	__c.2751:
 3368 0a31 0A44 4542 		.string	"\nDEBUG: keyboard disabled.\n"
 3368      5547 3A20 
 3368      6B65 7962 
 3368      6F61 7264 
 3368      2064 6973 
 3371               	__c.2749:
 3372 0a4d 0A44 4542 		.string	"\nDEBUG: keyboard enabled.\n"
 3372      5547 3A20 
 3372      6B65 7962 
 3372      6F61 7264 
 3372      2065 6E61 
 3375               	__c.2746:
 3376 0a68 0A44 4542 		.string	"\nDEBUG: matrix disabled.\n"
 3376      5547 3A20 
 3376      6D61 7472 
 3376      6978 2064 
 3376      6973 6162 
 3379               	__c.2744:
 3380 0a82 0A44 4542 		.string	"\nDEBUG: matrix enabled.\n"
 3380      5547 3A20 
 3380      6D61 7472 
 3380      6978 2065 
 3380      6E61 626C 
 3383               	__c.2741:
 3384 0a9b 0A44 4542 		.string	"\nDEBUG: enabled.\n"
 3384      5547 3A20 
 3384      656E 6162 
 3384      6C65 642E 
 3384      0A00 
 3387               	__c.2739:
 3388 0aad 0A44 4542 		.string	"\nDEBUG: disabled.\n"
 3388      5547 3A20 
 3388      6469 7361 
 3388      626C 6564 
 3388      2E0A 00
 3391               	__c.2736:
 3392 0ac0 6E6F 7420 		.string	"not supported.\n"
 3392      7375 7070 
 3392      6F72 7465 
 3392      642E 0A00 
 3395               	__c.2734:
 3396 0ad0 0A0A 4A75 		.string	"\n\nJump to bootloader... "
 3396      6D70 2074 
 3396      6F20 626F 
 3396      6F74 6C6F 
 3396      6164 6572 
 3399               	__c.2731:
 3400 0ae9 433E 2000 		.string	"C> "
 3403               	__c.2729:
 3404 0aed 0A45 6E74 		.string	"\nEnter Console Mode\n"
 3404      6572 2043 
 3404      6F6E 736F 
 3404      6C65 204D 
 3404      6F64 650A 
 3407               	__c.2724:
 3408 0b02 556E 6C6F 		.string	"Unlocked.\n"
 3408      636B 6564 
 3408      2E0A 00
 3411               	__c.2722:
 3412 0b0d 4C6F 636B 		.string	"Locked.\n"
 3412      6564 2E0A 
 3412      00
 3413               		.local	host_driver.2713
 3414               		.comm	host_driver.2713,2,1
 3417               	__c.2719:
 3418 0b16 6565 636F 		.string	"eeconfig:\n"
 3418      6E66 6967 
 3418      3A0A 00
 3421               	__c.2715:
 3422 0b21 536C 6565 		.string	"Sleep LED test\n"
 3422      7020 4C45 
 3422      4420 7465 
 3422      7374 0A00 
 3423               		.local	mousekey_param
 3424               		.comm	mousekey_param,1,1
 3425               	.global	command_state
 3426               		.section .bss
 3429               	command_state:
 3430 0000 00        		.zero	1
 3431               		.comm	keymap_config,1,1
 3432               		.text
 3433               	.Letext0:
 3434               		.file 4 "/usr/lib/avr/include/stdint.h"
 3435               		.file 5 "../../common/report.h"
 3436               		.file 6 "../../common/host_driver.h"
 3437               		.file 7 "../../common/keymap.h"
 3438               		.file 8 "../../common/debug.h"
 3439               		.file 9 "../../common/command.h"
 3440               		.file 10 "../../protocol/pjrc/usb.h"
 3441               		.file 11 "../../common/host.h"
 3442               		.file 12 "../../common/timer.h"
 3443               		.file 13 "../../common/action_layer.h"
 3444               		.file 14 "../../common/action_util.h"
 3445               		.file 15 "../../common/mousekey.h"
 3446               		.file 16 "../../protocol/pjrc/usb_keyboard.h"
 3447               		.file 17 "../../common/avr/xprintf.h"
 3448               		.file 18 "../../common/action.h"
 3449               		.file 19 "../../common/keycode.h"
 3450               		.file 20 "../../common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccZAekBZ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccZAekBZ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccZAekBZ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccZAekBZ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccZAekBZ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccZAekBZ.s:12     .text.command_console_help:0000000000000000 command_console_help
     /tmp/ccZAekBZ.s:3019   .progmem.data:00000000000004ac __c.2810
     /tmp/ccZAekBZ.s:3015   .progmem.data:000000000000049f __c.2812
     /tmp/ccZAekBZ.s:3011   .progmem.data:0000000000000492 __c.2814
     /tmp/ccZAekBZ.s:41     .text.mousekey_console_help:0000000000000000 mousekey_console_help
     /tmp/ccZAekBZ.s:2967   .progmem.data:000000000000040f __c.2975
     /tmp/ccZAekBZ.s:2963   .progmem.data:0000000000000402 __c.2977
     /tmp/ccZAekBZ.s:2959   .progmem.data:00000000000003e7 __c.2979
     /tmp/ccZAekBZ.s:2955   .progmem.data:00000000000003cc __c.2981
     /tmp/ccZAekBZ.s:2951   .progmem.data:00000000000003b4 __c.2983
     /tmp/ccZAekBZ.s:2947   .progmem.data:000000000000039a __c.2985
     /tmp/ccZAekBZ.s:2943   .progmem.data:000000000000037c __c.2987
     /tmp/ccZAekBZ.s:2939   .progmem.data:000000000000035c __c.2989
     /tmp/ccZAekBZ.s:2935   .progmem.data:0000000000000347 __c.2991
     /tmp/ccZAekBZ.s:2931   .progmem.data:0000000000000330 __c.2993
     /tmp/ccZAekBZ.s:2927   .progmem.data:0000000000000313 __c.2995
     /tmp/ccZAekBZ.s:2923   .progmem.data:00000000000002f4 __c.2997
     /tmp/ccZAekBZ.s:2919   .progmem.data:00000000000002d4 __c.2999
     /tmp/ccZAekBZ.s:2915   .progmem.data:00000000000002b2 __c.3001
     /tmp/ccZAekBZ.s:2911   .progmem.data:000000000000027d __c.3003
     /tmp/ccZAekBZ.s:2907   .progmem.data:0000000000000268 __c.3005
     /tmp/ccZAekBZ.s:2903   .progmem.data:0000000000000265 __c.3007
     /tmp/ccZAekBZ.s:2899   .progmem.data:000000000000025c __c.3009
     /tmp/ccZAekBZ.s:2895   .progmem.data:0000000000000259 __c.3011
     /tmp/ccZAekBZ.s:2891   .progmem.data:0000000000000257 __c.3013
     /tmp/ccZAekBZ.s:2887   .progmem.data:000000000000022a __c.3015
     /tmp/ccZAekBZ.s:192    .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
     /tmp/ccZAekBZ.s:2767   .progmem.data:0000000000000106 __c.2883
     /tmp/ccZAekBZ.s:2763   .progmem.data:0000000000000103 __c.2885
     /tmp/ccZAekBZ.s:2759   .progmem.data:0000000000000101 __c.2887
     /tmp/ccZAekBZ.s:2755   .progmem.data:00000000000000f2 __c.2891
     /tmp/ccZAekBZ.s:2751   .progmem.data:00000000000000ef __c.2893
     /tmp/ccZAekBZ.s:2747   .progmem.data:00000000000000ed __c.2895
     /tmp/ccZAekBZ.s:2743   .progmem.data:00000000000000dd __c.2898
     /tmp/ccZAekBZ.s:2739   .progmem.data:00000000000000da __c.2900
     /tmp/ccZAekBZ.s:2735   .progmem.data:00000000000000d8 __c.2902
     /tmp/ccZAekBZ.s:2731   .progmem.data:00000000000000c6 __c.2905
     /tmp/ccZAekBZ.s:2727   .progmem.data:00000000000000c3 __c.2907
     /tmp/ccZAekBZ.s:2723   .progmem.data:00000000000000c1 __c.2909
     /tmp/ccZAekBZ.s:2719   .progmem.data:00000000000000ab __c.2912
     /tmp/ccZAekBZ.s:2715   .progmem.data:00000000000000a8 __c.2914
     /tmp/ccZAekBZ.s:2711   .progmem.data:00000000000000a6 __c.2916
     /tmp/ccZAekBZ.s:2707   .progmem.data:000000000000008e __c.2919
     /tmp/ccZAekBZ.s:2703   .progmem.data:000000000000008b __c.2921
     /tmp/ccZAekBZ.s:2699   .progmem.data:0000000000000089 __c.2923
     /tmp/ccZAekBZ.s:557    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
     /tmp/ccZAekBZ.s:2695   .progmem.data:000000000000007d __c.2930
     /tmp/ccZAekBZ.s:2691   .progmem.data:000000000000007a __c.2932
     /tmp/ccZAekBZ.s:2687   .progmem.data:0000000000000078 __c.2934
     /tmp/ccZAekBZ.s:2683   .progmem.data:0000000000000069 __c.2938
     /tmp/ccZAekBZ.s:2679   .progmem.data:0000000000000066 __c.2940
     /tmp/ccZAekBZ.s:2675   .progmem.data:0000000000000064 __c.2942
     /tmp/ccZAekBZ.s:2671   .progmem.data:0000000000000054 __c.2945
     /tmp/ccZAekBZ.s:2667   .progmem.data:0000000000000051 __c.2947
     /tmp/ccZAekBZ.s:2663   .progmem.data:000000000000004f __c.2949
     /tmp/ccZAekBZ.s:2659   .progmem.data:000000000000003d __c.2952
     /tmp/ccZAekBZ.s:2655   .progmem.data:000000000000003a __c.2954
     /tmp/ccZAekBZ.s:2651   .progmem.data:0000000000000038 __c.2956
     /tmp/ccZAekBZ.s:2647   .progmem.data:0000000000000022 __c.2959
     /tmp/ccZAekBZ.s:2643   .progmem.data:000000000000001f __c.2961
     /tmp/ccZAekBZ.s:2639   .progmem.data:000000000000001d __c.2963
     /tmp/ccZAekBZ.s:2635   .progmem.data:0000000000000005 __c.2966
     /tmp/ccZAekBZ.s:2631   .progmem.data:0000000000000002 __c.2968
     /tmp/ccZAekBZ.s:2627   .progmem.data:0000000000000000 __c.2970
     /tmp/ccZAekBZ.s:868    .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/ccZAekBZ.s:3007   .progmem.data:000000000000047b __c.3078
     /tmp/ccZAekBZ.s:3003   .progmem.data:0000000000000478 __c.3080
     /tmp/ccZAekBZ.s:2999   .progmem.data:0000000000000473 __c.3082
     /tmp/ccZAekBZ.s:2995   .progmem.data:0000000000000470 __c.3084
     /tmp/ccZAekBZ.s:2991   .progmem.data:000000000000046e __c.3086
     /tmp/ccZAekBZ.s:974    .text.command_common:0000000000000000 command_common
     /tmp/ccZAekBZ.s:3421   .progmem.data:0000000000000b21 __c.2715
     /tmp/ccZAekBZ.s:3417   .progmem.data:0000000000000b16 __c.2719
     /tmp/ccZAekBZ.s:3279   .progmem.data:00000000000007f3 __c.2618
     /tmp/ccZAekBZ.s:3275   .progmem.data:00000000000007f0 __c.2620
     /tmp/ccZAekBZ.s:3271   .progmem.data:00000000000007ee __c.2622
     /tmp/ccZAekBZ.s:3267   .progmem.data:00000000000007db __c.2625
     /tmp/ccZAekBZ.s:3263   .progmem.data:00000000000007d6 __c.2627
     /tmp/ccZAekBZ.s:3259   .progmem.data:00000000000007d4 __c.2629
     /tmp/ccZAekBZ.s:3255   .progmem.data:00000000000007ca __c.2631
     /tmp/ccZAekBZ.s:3251   .progmem.data:00000000000007c7 __c.2633
     /tmp/ccZAekBZ.s:3247   .progmem.data:00000000000007c5 __c.2635
     /tmp/ccZAekBZ.s:3243   .progmem.data:00000000000007bb __c.2637
     /tmp/ccZAekBZ.s:3239   .progmem.data:00000000000007b8 __c.2639
     /tmp/ccZAekBZ.s:3235   .progmem.data:00000000000007b6 __c.2641
     /tmp/ccZAekBZ.s:3231   .progmem.data:00000000000007aa __c.2643
     /tmp/ccZAekBZ.s:3227   .progmem.data:00000000000007a7 __c.2645
     /tmp/ccZAekBZ.s:3223   .progmem.data:00000000000007a5 __c.2647
     /tmp/ccZAekBZ.s:3219   .progmem.data:000000000000079c __c.2649
     /tmp/ccZAekBZ.s:3215   .progmem.data:0000000000000799 __c.2651
     /tmp/ccZAekBZ.s:3211   .progmem.data:0000000000000797 __c.2653
     /tmp/ccZAekBZ.s:3207   .progmem.data:0000000000000783 __c.2656
     /tmp/ccZAekBZ.s:3203   .progmem.data:000000000000077e __c.2658
     /tmp/ccZAekBZ.s:3199   .progmem.data:000000000000077c __c.2660
     /tmp/ccZAekBZ.s:3195   .progmem.data:0000000000000763 __c.2662
     /tmp/ccZAekBZ.s:3191   .progmem.data:0000000000000760 __c.2664
     /tmp/ccZAekBZ.s:3187   .progmem.data:000000000000075e __c.2666
     /tmp/ccZAekBZ.s:3183   .progmem.data:0000000000000747 __c.2668
     /tmp/ccZAekBZ.s:3179   .progmem.data:0000000000000744 __c.2670
     /tmp/ccZAekBZ.s:3175   .progmem.data:0000000000000742 __c.2672
     /tmp/ccZAekBZ.s:3171   .progmem.data:0000000000000730 __c.2674
     /tmp/ccZAekBZ.s:3167   .progmem.data:000000000000072d __c.2676
     /tmp/ccZAekBZ.s:3163   .progmem.data:000000000000072b __c.2678
     /tmp/ccZAekBZ.s:3159   .progmem.data:0000000000000719 __c.2680
     /tmp/ccZAekBZ.s:3155   .progmem.data:0000000000000716 __c.2682
     /tmp/ccZAekBZ.s:3151   .progmem.data:0000000000000714 __c.2684
     /tmp/ccZAekBZ.s:3147   .progmem.data:000000000000070a __c.2686
     /tmp/ccZAekBZ.s:3143   .progmem.data:0000000000000707 __c.2688
     /tmp/ccZAekBZ.s:3139   .progmem.data:0000000000000705 __c.2690
     /tmp/ccZAekBZ.s:3135   .progmem.data:00000000000006f3 __c.2692
     /tmp/ccZAekBZ.s:3131   .progmem.data:00000000000006f0 __c.2694
     /tmp/ccZAekBZ.s:3127   .progmem.data:00000000000006ee __c.2696
     /tmp/ccZAekBZ.s:3123   .progmem.data:00000000000006d2 __c.2698
     /tmp/ccZAekBZ.s:3119   .progmem.data:00000000000006cf __c.2700
     /tmp/ccZAekBZ.s:3115   .progmem.data:00000000000006cd __c.2702
     /tmp/ccZAekBZ.s:3111   .progmem.data:00000000000006c5 __c.2704
     /tmp/ccZAekBZ.s:3107   .progmem.data:00000000000006c2 __c.2706
     /tmp/ccZAekBZ.s:3103   .progmem.data:00000000000006c0 __c.2708
                             .bss:0000000000000001 host_driver.2713
     /tmp/ccZAekBZ.s:3411   .progmem.data:0000000000000b0d __c.2722
     /tmp/ccZAekBZ.s:3407   .progmem.data:0000000000000b02 __c.2724
     /tmp/ccZAekBZ.s:3099   .progmem.data:00000000000006a4 __c.2575
     /tmp/ccZAekBZ.s:3095   .progmem.data:000000000000068d __c.2577
     /tmp/ccZAekBZ.s:3091   .progmem.data:0000000000000675 __c.2579
     /tmp/ccZAekBZ.s:3087   .progmem.data:000000000000065d __c.2581
     /tmp/ccZAekBZ.s:3083   .progmem.data:0000000000000643 __c.2583
     /tmp/ccZAekBZ.s:3079   .progmem.data:000000000000062c __c.2585
     /tmp/ccZAekBZ.s:3075   .progmem.data:0000000000000612 __c.2587
     /tmp/ccZAekBZ.s:3071   .progmem.data:00000000000005f2 __c.2589
     /tmp/ccZAekBZ.s:3067   .progmem.data:00000000000005dc __c.2591
     /tmp/ccZAekBZ.s:3063   .progmem.data:00000000000005cb __c.2593
     /tmp/ccZAekBZ.s:3059   .progmem.data:00000000000005b3 __c.2595
     /tmp/ccZAekBZ.s:3055   .progmem.data:00000000000005a3 __c.2597
     /tmp/ccZAekBZ.s:3051   .progmem.data:0000000000000589 __c.2599
     /tmp/ccZAekBZ.s:3047   .progmem.data:0000000000000570 __c.2601
     /tmp/ccZAekBZ.s:3043   .progmem.data:0000000000000557 __c.2603
     /tmp/ccZAekBZ.s:3039   .progmem.data:000000000000053e __c.2605
     /tmp/ccZAekBZ.s:3035   .progmem.data:0000000000000525 __c.2607
     /tmp/ccZAekBZ.s:3031   .progmem.data:0000000000000504 __c.2609
     /tmp/ccZAekBZ.s:3027   .progmem.data:00000000000004e2 __c.2611
     /tmp/ccZAekBZ.s:3023   .progmem.data:00000000000004c8 __c.2613
     /tmp/ccZAekBZ.s:3403   .progmem.data:0000000000000aed __c.2729
     /tmp/ccZAekBZ.s:3399   .progmem.data:0000000000000ae9 __c.2731
     /tmp/ccZAekBZ.s:3429   .bss:0000000000000000 command_state
     /tmp/ccZAekBZ.s:3395   .progmem.data:0000000000000ad0 __c.2734
     /tmp/ccZAekBZ.s:3391   .progmem.data:0000000000000ac0 __c.2736
     /tmp/ccZAekBZ.s:3387   .progmem.data:0000000000000aad __c.2739
     /tmp/ccZAekBZ.s:3383   .progmem.data:0000000000000a9b __c.2741
     /tmp/ccZAekBZ.s:3379   .progmem.data:0000000000000a82 __c.2744
     /tmp/ccZAekBZ.s:3375   .progmem.data:0000000000000a68 __c.2746
     /tmp/ccZAekBZ.s:3371   .progmem.data:0000000000000a4d __c.2749
     /tmp/ccZAekBZ.s:3367   .progmem.data:0000000000000a31 __c.2751
     /tmp/ccZAekBZ.s:3363   .progmem.data:0000000000000a19 __c.2754
     /tmp/ccZAekBZ.s:3359   .progmem.data:0000000000000a00 __c.2756
     /tmp/ccZAekBZ.s:3355   .progmem.data:00000000000009e9 __c.2759
     /tmp/ccZAekBZ.s:3351   .progmem.data:00000000000009bd __c.2761
     /tmp/ccZAekBZ.s:3347   .progmem.data:0000000000000986 __c.2763
     /tmp/ccZAekBZ.s:3343   .progmem.data:0000000000000959 __c.2765
     /tmp/ccZAekBZ.s:3339   .progmem.data:0000000000000915 __c.2767
     /tmp/ccZAekBZ.s:3335   .progmem.data:00000000000008e7 __c.2769
     /tmp/ccZAekBZ.s:3331   .progmem.data:00000000000008d3 __c.2772
     /tmp/ccZAekBZ.s:3327   .progmem.data:00000000000008bd __c.2775
     /tmp/ccZAekBZ.s:3323   .progmem.data:00000000000008a3 __c.2777
     /tmp/ccZAekBZ.s:3319   .progmem.data:000000000000088c __c.2779
     /tmp/ccZAekBZ.s:3315   .progmem.data:0000000000000879 __c.2781
     /tmp/ccZAekBZ.s:3311   .progmem.data:000000000000086e __c.2783
     /tmp/ccZAekBZ.s:3307   .progmem.data:0000000000000863 __c.2785
     /tmp/ccZAekBZ.s:3303   .progmem.data:0000000000000858 __c.2787
     /tmp/ccZAekBZ.s:3299   .progmem.data:0000000000000841 __c.2789
     /tmp/ccZAekBZ.s:3295   .progmem.data:0000000000000824 __c.2791
     /tmp/ccZAekBZ.s:3291   .progmem.data:0000000000000815 __c.2794
     /tmp/ccZAekBZ.s:3287   .progmem.data:0000000000000805 __c.2796
     /tmp/ccZAekBZ.s:3283   .progmem.data:0000000000000803 __c.2805
     /tmp/ccZAekBZ.s:2056   .text.matrix_power_up:0000000000000000 matrix_power_up
     /tmp/ccZAekBZ.s:2072   .text.matrix_power_down:0000000000000000 matrix_power_down
     /tmp/ccZAekBZ.s:2087   .text.command_extra:0000000000000000 command_extra
     /tmp/ccZAekBZ.s:2106   .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccZAekBZ.s:2125   .text.command_proc:0000000000000000 command_proc
     /tmp/ccZAekBZ.s:2979   .progmem.data:000000000000043d __c.2827
     /tmp/ccZAekBZ.s:2975   .progmem.data:0000000000000439 __c.2829
     /tmp/ccZAekBZ.s:2987   .progmem.data:000000000000046a __c.2834
     /tmp/ccZAekBZ.s:2983   .progmem.data:0000000000000456 __c.2824
     /tmp/ccZAekBZ.s:2971   .progmem.data:0000000000000437 __c.2832
     /tmp/ccZAekBZ.s:2863   .progmem.data:00000000000001df __c.3051
     /tmp/ccZAekBZ.s:3414   .bss:0000000000000003 mousekey_param
     /tmp/ccZAekBZ.s:2883   .progmem.data:0000000000000212 __c.3025
     /tmp/ccZAekBZ.s:2879   .progmem.data:000000000000020e __c.3027
     /tmp/ccZAekBZ.s:2843   .progmem.data:00000000000001b2 __c.2840
     /tmp/ccZAekBZ.s:2839   .progmem.data:000000000000019d __c.2842
     /tmp/ccZAekBZ.s:2835   .progmem.data:000000000000019a __c.2844
     /tmp/ccZAekBZ.s:2831   .progmem.data:0000000000000198 __c.2846
     /tmp/ccZAekBZ.s:2827   .progmem.data:0000000000000183 __c.2848
     /tmp/ccZAekBZ.s:2823   .progmem.data:0000000000000180 __c.2850
     /tmp/ccZAekBZ.s:2819   .progmem.data:000000000000017e __c.2852
     /tmp/ccZAekBZ.s:2815   .progmem.data:000000000000016c __c.2854
     /tmp/ccZAekBZ.s:2811   .progmem.data:0000000000000169 __c.2856
     /tmp/ccZAekBZ.s:2807   .progmem.data:0000000000000167 __c.2858
     /tmp/ccZAekBZ.s:2803   .progmem.data:0000000000000153 __c.2860
     /tmp/ccZAekBZ.s:2799   .progmem.data:0000000000000150 __c.2862
     /tmp/ccZAekBZ.s:2795   .progmem.data:000000000000014e __c.2864
     /tmp/ccZAekBZ.s:2791   .progmem.data:0000000000000136 __c.2866
     /tmp/ccZAekBZ.s:2787   .progmem.data:0000000000000133 __c.2868
     /tmp/ccZAekBZ.s:2783   .progmem.data:0000000000000131 __c.2870
     /tmp/ccZAekBZ.s:2779   .progmem.data:0000000000000117 __c.2872
     /tmp/ccZAekBZ.s:2775   .progmem.data:0000000000000114 __c.2874
     /tmp/ccZAekBZ.s:2771   .progmem.data:0000000000000112 __c.2876
     /tmp/ccZAekBZ.s:2613   .rodata:0000000000000000 CSWTCH.51
     /tmp/ccZAekBZ.s:2875   .progmem.data:00000000000001f9 __c.3040
     /tmp/ccZAekBZ.s:2871   .progmem.data:00000000000001f6 __c.3042
     /tmp/ccZAekBZ.s:2867   .progmem.data:00000000000001f4 __c.3044
     /tmp/ccZAekBZ.s:2859   .progmem.data:00000000000001dd __c.3054
     /tmp/ccZAekBZ.s:2855   .progmem.data:00000000000001db __c.3056
     /tmp/ccZAekBZ.s:2851   .progmem.data:00000000000001d8 __c.3058
     /tmp/ccZAekBZ.s:2847   .progmem.data:00000000000001d5 __c.3060
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_state
biton32
default_layer_set
clear_keyboard
__tablejump2__
sleep_led_toggle
host_keyboard_leds
led_set
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
host_get_driver
host_set_driver
debug_config
bootloader_jump
timer_count
keyboard_protocol
keyboard_idle
usb_keyboard_leds
usb_keyboard_idle_count
keyboard_nkro
suspend
remote_wakeup
usb_remote_wakeup
host_system_send
keyboard_report
__do_copy_data
__do_clear_bss
