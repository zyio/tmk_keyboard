   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_power_up,"ax",@progbits
  11               		.weak	matrix_power_up
  13               	matrix_power_up:
  14               	.LFB3:
  15               		.file 1 "../../common/keyboard.h"
   1:../../common/keyboard.h **** /*
   2:../../common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.h **** 
   4:../../common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.h **** (at your option) any later version.
   8:../../common/keyboard.h **** 
   9:../../common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.h **** GNU General Public License for more details.
  13:../../common/keyboard.h **** 
  14:../../common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.h **** */
  17:../../common/keyboard.h **** 
  18:../../common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../common/keyboard.h **** #define KEYBOARD_H
  20:../../common/keyboard.h **** 
  21:../../common/keyboard.h **** #include <stdbool.h>
  22:../../common/keyboard.h **** #include <stdint.h>
  23:../../common/keyboard.h **** 
  24:../../common/keyboard.h **** 
  25:../../common/keyboard.h **** #ifdef __cplusplus
  26:../../common/keyboard.h **** extern "C" {
  27:../../common/keyboard.h **** #endif
  28:../../common/keyboard.h **** 
  29:../../common/keyboard.h **** /* key matrix position */
  30:../../common/keyboard.h **** typedef struct {
  31:../../common/keyboard.h ****     uint8_t col;
  32:../../common/keyboard.h ****     uint8_t row;
  33:../../common/keyboard.h **** } keypos_t;
  34:../../common/keyboard.h **** 
  35:../../common/keyboard.h **** /* key event */
  36:../../common/keyboard.h **** typedef struct {
  37:../../common/keyboard.h ****     keypos_t key;
  38:../../common/keyboard.h ****     bool     pressed;
  39:../../common/keyboard.h ****     uint16_t time;
  40:../../common/keyboard.h **** } keyevent_t;
  41:../../common/keyboard.h **** 
  42:../../common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../common/keyboard.h **** 
  45:../../common/keyboard.h **** /* Rules for No Event:
  46:../../common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../common/keyboard.h ****  */
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  50:../../common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  51:../../common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
  52:../../common/keyboard.h **** 
  53:../../common/keyboard.h **** /* Tick event */
  54:../../common/keyboard.h **** #define TICK                    (keyevent_t){           \
  55:../../common/keyboard.h ****     .key = (keypos_t){ .row = 255, .col = 255 },           \
  56:../../common/keyboard.h ****     .pressed = false,                                   \
  57:../../common/keyboard.h ****     .time = (timer_read() | 1)                          \
  58:../../common/keyboard.h **** }
  59:../../common/keyboard.h **** 
  60:../../common/keyboard.h **** 
  61:../../common/keyboard.h **** void keyboard_init(void);
  62:../../common/keyboard.h **** void keyboard_task(void);
  63:../../common/keyboard.h **** void keyboard_set_leds(uint8_t leds);
  64:../../common/keyboard.h **** 
  65:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_up(void) {}
  16               		.loc 1 65 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE3:
  26               		.section	.text.matrix_power_down,"ax",@progbits
  27               		.weak	matrix_power_down
  29               	matrix_power_down:
  30               	.LFB4:
  66:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_down(void) {}
  31               		.loc 1 66 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  37 0000 0895      		ret
  38               		.cfi_endproc
  39               	.LFE4:
  41               		.section	.text.suspend_idle,"ax",@progbits
  42               	.global	suspend_idle
  44               	suspend_idle:
  45               	.LFB6:
  46               		.file 2 "../../common/avr/suspend.c"
   1:../../common/avr/suspend.c **** #include <stdbool.h>
   2:../../common/avr/suspend.c **** #include <avr/sleep.h>
   3:../../common/avr/suspend.c **** #include <avr/wdt.h>
   4:../../common/avr/suspend.c **** #include <avr/interrupt.h>
   5:../../common/avr/suspend.c **** #include "matrix.h"
   6:../../common/avr/suspend.c **** #include "action.h"
   7:../../common/avr/suspend.c **** #include "backlight.h"
   8:../../common/avr/suspend.c **** #include "suspend_avr.h"
   9:../../common/avr/suspend.c **** #include "suspend.h"
  10:../../common/avr/suspend.c **** #include "timer.h"
  11:../../common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  12:../../common/avr/suspend.c **** #include "lufa.h"
  13:../../common/avr/suspend.c **** #endif
  14:../../common/avr/suspend.c **** 
  15:../../common/avr/suspend.c **** 
  16:../../common/avr/suspend.c **** #define wdt_intr_enable(value)   \
  17:../../common/avr/suspend.c **** __asm__ __volatile__ (  \
  18:../../common/avr/suspend.c ****     "in __tmp_reg__,__SREG__" "\n\t"    \
  19:../../common/avr/suspend.c ****     "cli" "\n\t"    \
  20:../../common/avr/suspend.c ****     "wdr" "\n\t"    \
  21:../../common/avr/suspend.c ****     "sts %0,%1" "\n\t"  \
  22:../../common/avr/suspend.c ****     "out __SREG__,__tmp_reg__" "\n\t"   \
  23:../../common/avr/suspend.c ****     "sts %0,%2" "\n\t" \
  24:../../common/avr/suspend.c ****     : /* no outputs */  \
  25:../../common/avr/suspend.c ****     : "M" (_SFR_MEM_ADDR(_WD_CONTROL_REG)), \
  26:../../common/avr/suspend.c ****     "r" (_BV(_WD_CHANGE_BIT) | _BV(WDE)), \
  27:../../common/avr/suspend.c ****     "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) | \
  28:../../common/avr/suspend.c ****         _BV(WDIE) | (value & 0x07)) ) \
  29:../../common/avr/suspend.c ****     : "r0"  \
  30:../../common/avr/suspend.c **** )
  31:../../common/avr/suspend.c **** 
  32:../../common/avr/suspend.c **** 
  33:../../common/avr/suspend.c **** void suspend_idle(uint8_t time)
  34:../../common/avr/suspend.c **** {
  47               		.loc 2 34 0
  48               		.cfi_startproc
  49               	.LVL0:
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  35:../../common/avr/suspend.c ****     cli();
  54               		.loc 2 35 0
  55               	/* #APP */
  56               	 ;  35 "../../common/avr/suspend.c" 1
  57 0000 F894      		cli
  58               	 ;  0 "" 2
  36:../../common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  59               		.loc 2 36 0
  60               	/* #NOAPP */
  61 0002 83B7      		in r24,0x33
  62               	.LVL1:
  63 0004 817F      		andi r24,lo8(-15)
  64 0006 83BF      		out 0x33,r24
  37:../../common/avr/suspend.c ****     sleep_enable();
  65               		.loc 2 37 0
  66 0008 83B7      		in r24,0x33
  67 000a 8160      		ori r24,lo8(1)
  68 000c 83BF      		out 0x33,r24
  38:../../common/avr/suspend.c ****     sei();
  69               		.loc 2 38 0
  70               	/* #APP */
  71               	 ;  38 "../../common/avr/suspend.c" 1
  72 000e 7894      		sei
  73               	 ;  0 "" 2
  39:../../common/avr/suspend.c ****     sleep_cpu();
  74               		.loc 2 39 0
  75               	 ;  39 "../../common/avr/suspend.c" 1
  76 0010 8895      		sleep
  77               		
  78               	 ;  0 "" 2
  40:../../common/avr/suspend.c ****     sleep_disable();
  79               		.loc 2 40 0
  80               	/* #NOAPP */
  81 0012 83B7      		in r24,0x33
  82 0014 8E7F      		andi r24,lo8(-2)
  83 0016 83BF      		out 0x33,r24
  84 0018 0895      		ret
  85               		.cfi_endproc
  86               	.LFE6:
  88               		.section	.text.suspend_power_down,"ax",@progbits
  89               	.global	suspend_power_down
  91               	suspend_power_down:
  92               	.LFB8:
  41:../../common/avr/suspend.c **** }
  42:../../common/avr/suspend.c **** 
  43:../../common/avr/suspend.c **** /* Power down MCU with watchdog timer
  44:../../common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  45:../../common/avr/suspend.c ****  *          WDTO_15MS
  46:../../common/avr/suspend.c ****  *          WDTO_30MS
  47:../../common/avr/suspend.c ****  *          WDTO_60MS
  48:../../common/avr/suspend.c ****  *          WDTO_120MS
  49:../../common/avr/suspend.c ****  *          WDTO_250MS
  50:../../common/avr/suspend.c ****  *          WDTO_500MS
  51:../../common/avr/suspend.c ****  *          WDTO_1S
  52:../../common/avr/suspend.c ****  *          WDTO_2S
  53:../../common/avr/suspend.c ****  *          WDTO_4S
  54:../../common/avr/suspend.c ****  *          WDTO_8S
  55:../../common/avr/suspend.c ****  */
  56:../../common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  57:../../common/avr/suspend.c **** static void power_down(uint8_t wdto)
  58:../../common/avr/suspend.c **** {
  59:../../common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  60:../../common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
  61:../../common/avr/suspend.c **** #endif
  62:../../common/avr/suspend.c ****     wdt_timeout = wdto;
  63:../../common/avr/suspend.c **** 
  64:../../common/avr/suspend.c ****     // Watchdog Interrupt Mode
  65:../../common/avr/suspend.c ****     wdt_intr_enable(wdto);
  66:../../common/avr/suspend.c **** 
  67:../../common/avr/suspend.c ****     // TODO: more power saving
  68:../../common/avr/suspend.c ****     // See PicoPower application note
  69:../../common/avr/suspend.c ****     // - I/O port input with pullup
  70:../../common/avr/suspend.c ****     // - prescale clock
  71:../../common/avr/suspend.c ****     // - BOD disable
  72:../../common/avr/suspend.c ****     // - Power Reduction Register PRR
  73:../../common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  74:../../common/avr/suspend.c ****     sleep_enable();
  75:../../common/avr/suspend.c ****     sei();
  76:../../common/avr/suspend.c ****     sleep_cpu();
  77:../../common/avr/suspend.c ****     sleep_disable();
  78:../../common/avr/suspend.c **** 
  79:../../common/avr/suspend.c ****     // Disable watchdog after sleep
  80:../../common/avr/suspend.c ****     wdt_disable();
  81:../../common/avr/suspend.c **** }
  82:../../common/avr/suspend.c **** 
  83:../../common/avr/suspend.c **** void suspend_power_down(void)
  84:../../common/avr/suspend.c **** {
  93               		.loc 2 84 0
  94               		.cfi_startproc
  95               	/* prologue: function */
  96               	/* frame size = 0 */
  97               	/* stack size = 0 */
  98               	.L__stack_usage = 0
  99               	.LVL2:
 100               	.LBB4:
 101               	.LBB5:
  62:../../common/avr/suspend.c **** 
 102               		.loc 2 62 0
 103 0000 1092 0000 		sts wdt_timeout,__zero_reg__
  65:../../common/avr/suspend.c **** 
 104               		.loc 2 65 0
 105 0004 20E4      		ldi r18,lo8(64)
 106 0006 88E1      		ldi r24,lo8(24)
 107 0008 90E0      		ldi r25,0
 108               	/* #APP */
 109               	 ;  65 "../../common/avr/suspend.c" 1
 110 000a 0FB6      		in __tmp_reg__,__SREG__
 111 000c F894      		cli
 112 000e A895      		wdr
 113 0010 8093 6000 		sts 96,r24
 114 0014 0FBE      		out __SREG__,__tmp_reg__
 115 0016 2093 6000 		sts 96,r18
 116               		
 117               	 ;  0 "" 2
  73:../../common/avr/suspend.c ****     sleep_enable();
 118               		.loc 2 73 0
 119               	/* #NOAPP */
 120 001a 83B7      		in r24,0x33
 121 001c 817F      		andi r24,lo8(-15)
 122 001e 8460      		ori r24,lo8(4)
 123 0020 83BF      		out 0x33,r24
  74:../../common/avr/suspend.c ****     sei();
 124               		.loc 2 74 0
 125 0022 83B7      		in r24,0x33
 126 0024 8160      		ori r24,lo8(1)
 127 0026 83BF      		out 0x33,r24
  75:../../common/avr/suspend.c ****     sleep_cpu();
 128               		.loc 2 75 0
 129               	/* #APP */
 130               	 ;  75 "../../common/avr/suspend.c" 1
 131 0028 7894      		sei
 132               	 ;  0 "" 2
  76:../../common/avr/suspend.c ****     sleep_disable();
 133               		.loc 2 76 0
 134               	 ;  76 "../../common/avr/suspend.c" 1
 135 002a 8895      		sleep
 136               		
 137               	 ;  0 "" 2
  77:../../common/avr/suspend.c **** 
 138               		.loc 2 77 0
 139               	/* #NOAPP */
 140 002c 83B7      		in r24,0x33
 141 002e 8E7F      		andi r24,lo8(-2)
 142 0030 83BF      		out 0x33,r24
  80:../../common/avr/suspend.c **** }
 143               		.loc 2 80 0
 144 0032 88E1      		ldi r24,lo8(24)
 145               	/* #APP */
 146               	 ;  80 "../../common/avr/suspend.c" 1
 147 0034 0FB6      		in __tmp_reg__, __SREG__
 148 0036 F894      		cli
 149 0038 8093 6000 		sts 96, r24
 150 003c 1092 6000 		sts 96, __zero_reg__
 151 0040 0FBE      		out __SREG__,__tmp_reg__
 152               		
 153               	 ;  0 "" 2
 154               	/* #NOAPP */
 155 0042 0895      		ret
 156               	.LBE5:
 157               	.LBE4:
 158               		.cfi_endproc
 159               	.LFE8:
 161               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 162               	.global	suspend_wakeup_condition
 164               	suspend_wakeup_condition:
 165               	.LFB9:
  85:../../common/avr/suspend.c ****     power_down(WDTO_15MS);
  86:../../common/avr/suspend.c **** }
  87:../../common/avr/suspend.c **** 
  88:../../common/avr/suspend.c **** bool suspend_wakeup_condition(void)
  89:../../common/avr/suspend.c **** {
 166               		.loc 2 89 0
 167               		.cfi_startproc
 168 0000 CF93      		push r28
 169               	.LCFI0:
 170               		.cfi_def_cfa_offset 3
 171               		.cfi_offset 28, -2
 172               	/* prologue: function */
 173               	/* frame size = 0 */
 174               	/* stack size = 1 */
 175               	.L__stack_usage = 1
  90:../../common/avr/suspend.c ****     matrix_power_up();
 176               		.loc 2 90 0
 177 0002 0E94 0000 		call matrix_power_up
 178               	.LVL3:
  91:../../common/avr/suspend.c ****     matrix_scan();
 179               		.loc 2 91 0
 180 0006 0E94 0000 		call matrix_scan
 181               	.LVL4:
  92:../../common/avr/suspend.c ****     matrix_power_down();
 182               		.loc 2 92 0
 183 000a 0E94 0000 		call matrix_power_down
 184               	.LVL5:
 185               	.LBB6:
  93:../../common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 186               		.loc 2 93 0
 187 000e C0E0      		ldi r28,0
 188               	.LVL6:
 189               	.L7:
  94:../../common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 190               		.loc 2 94 0
 191 0010 8C2F      		mov r24,r28
 192 0012 0E94 0000 		call matrix_get_row
 193               	.LVL7:
 194 0016 8111      		cpse r24,__zero_reg__
 195 0018 00C0      		rjmp .L8
  93:../../common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 196               		.loc 2 93 0
 197 001a CF5F      		subi r28,lo8(-(1))
 198               	.LVL8:
 199 001c CE30      		cpi r28,lo8(14)
 200 001e 01F4      		brne .L7
 201               	.LBE6:
  95:../../common/avr/suspend.c ****     }
  96:../../common/avr/suspend.c ****     return false;
 202               		.loc 2 96 0
 203 0020 80E0      		ldi r24,0
 204 0022 00C0      		rjmp .L6
 205               	.L8:
 206               	.LBB7:
  94:../../common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 207               		.loc 2 94 0
 208 0024 81E0      		ldi r24,lo8(1)
 209               	.L6:
 210               	/* epilogue start */
 211               	.LBE7:
  97:../../common/avr/suspend.c **** }
 212               		.loc 2 97 0
 213 0026 CF91      		pop r28
 214               	.LVL9:
 215 0028 0895      		ret
 216               		.cfi_endproc
 217               	.LFE9:
 219               		.section	.text.suspend_wakeup_init,"ax",@progbits
 220               	.global	suspend_wakeup_init
 222               	suspend_wakeup_init:
 223               	.LFB10:
  98:../../common/avr/suspend.c **** 
  99:../../common/avr/suspend.c **** // run immediately after wakeup
 100:../../common/avr/suspend.c **** void suspend_wakeup_init(void)
 101:../../common/avr/suspend.c **** {
 224               		.loc 2 101 0
 225               		.cfi_startproc
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
 102:../../common/avr/suspend.c ****     // clear keyboard state
 103:../../common/avr/suspend.c ****     clear_keyboard();
 230               		.loc 2 103 0
 231 0000 0C94 0000 		jmp clear_keyboard
 232               	.LVL10:
 233               		.cfi_endproc
 234               	.LFE10:
 236               		.local	wdt_timeout
 237               		.comm	wdt_timeout,1,1
 238               		.text
 239               	.Letext0:
 240               		.file 3 "/usr/lib/avr/include/stdint.h"
 241               		.file 4 "../../common/matrix.h"
 242               		.file 5 "../../common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
     /tmp/ccDWeYIO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccDWeYIO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccDWeYIO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccDWeYIO.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccDWeYIO.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccDWeYIO.s:13     .text.matrix_power_up:0000000000000000 matrix_power_up
     /tmp/ccDWeYIO.s:29     .text.matrix_power_down:0000000000000000 matrix_power_down
     /tmp/ccDWeYIO.s:44     .text.suspend_idle:0000000000000000 suspend_idle
     /tmp/ccDWeYIO.s:91     .text.suspend_power_down:0000000000000000 suspend_power_down
                             .bss:0000000000000000 wdt_timeout
     /tmp/ccDWeYIO.s:164    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
     /tmp/ccDWeYIO.s:222    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init

UNDEFINED SYMBOLS
matrix_scan
matrix_get_row
clear_keyboard
__do_clear_bss
