   1               		.file	"bootloader.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.bootloader_jump,"ax",@progbits
  11               	.global	bootloader_jump
  13               	bootloader_jump:
  14               	.LFB6:
  15               		.file 1 "../../common/avr/bootloader.c"
   1:../../common/avr/bootloader.c **** #include <stdint.h>
   2:../../common/avr/bootloader.c **** #include <stdbool.h>
   3:../../common/avr/bootloader.c **** #include <avr/io.h>
   4:../../common/avr/bootloader.c **** #include <avr/interrupt.h>
   5:../../common/avr/bootloader.c **** #include <avr/wdt.h>
   6:../../common/avr/bootloader.c **** #include <util/delay.h>
   7:../../common/avr/bootloader.c **** #include "bootloader.h"
   8:../../common/avr/bootloader.c **** 
   9:../../common/avr/bootloader.c **** #ifdef PROTOCOL_LUFA
  10:../../common/avr/bootloader.c **** #include <LUFA/Drivers/USB/USB.h>
  11:../../common/avr/bootloader.c **** #endif
  12:../../common/avr/bootloader.c **** 
  13:../../common/avr/bootloader.c **** 
  14:../../common/avr/bootloader.c **** /* Boot Section Size in *BYTEs*
  15:../../common/avr/bootloader.c ****  *   Teensy   halfKay    512
  16:../../common/avr/bootloader.c ****  *   Teensy++ halfKay    1024
  17:../../common/avr/bootloader.c ****  *   Atmel DFU loader    4096
  18:../../common/avr/bootloader.c ****  *   LUFA bootloader     4096
  19:../../common/avr/bootloader.c ****  *   USBaspLoader        2048
  20:../../common/avr/bootloader.c ****  */
  21:../../common/avr/bootloader.c **** #ifndef BOOTLOADER_SIZE
  22:../../common/avr/bootloader.c **** #warning To use bootloader_jump() you need to define BOOTLOADER_SIZE in config.h.
  23:../../common/avr/bootloader.c **** #define BOOTLOADER_SIZE     4096
  24:../../common/avr/bootloader.c **** #endif
  25:../../common/avr/bootloader.c **** 
  26:../../common/avr/bootloader.c **** #define FLASH_SIZE          (FLASHEND + 1L)
  27:../../common/avr/bootloader.c **** #define BOOTLOADER_START    (FLASH_SIZE - BOOTLOADER_SIZE)
  28:../../common/avr/bootloader.c **** 
  29:../../common/avr/bootloader.c **** 
  30:../../common/avr/bootloader.c **** /* 
  31:../../common/avr/bootloader.c ****  * Entering the Bootloader via Software 
  32:../../common/avr/bootloader.c ****  * http://www.fourwalledcubicle.com/files/LUFA/Doc/120730/html/_page__software_bootloader_start.htm
  33:../../common/avr/bootloader.c ****  */
  34:../../common/avr/bootloader.c **** #define BOOTLOADER_RESET_KEY 0xB007B007
  35:../../common/avr/bootloader.c **** uint32_t reset_key  __attribute__ ((section (".noinit")));
  36:../../common/avr/bootloader.c **** 
  37:../../common/avr/bootloader.c **** /* initialize MCU status by watchdog reset */
  38:../../common/avr/bootloader.c **** void bootloader_jump(void) {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  39:../../common/avr/bootloader.c **** #ifdef PROTOCOL_LUFA
  40:../../common/avr/bootloader.c ****     USB_Disable();
  41:../../common/avr/bootloader.c ****     cli();
  42:../../common/avr/bootloader.c ****     _delay_ms(2000);
  43:../../common/avr/bootloader.c **** #endif
  44:../../common/avr/bootloader.c **** 
  45:../../common/avr/bootloader.c **** #ifdef PROTOCOL_PJRC
  46:../../common/avr/bootloader.c ****     cli();
  22               		.loc 1 46 0
  23               	/* #APP */
  24               	 ;  46 "../../common/avr/bootloader.c" 1
  25 0000 F894      		cli
  26               	 ;  0 "" 2
  47:../../common/avr/bootloader.c ****     UDCON = 1;
  27               		.loc 1 47 0
  28               	/* #NOAPP */
  29 0002 81E0      		ldi r24,lo8(1)
  30 0004 8093 E000 		sts 224,r24
  48:../../common/avr/bootloader.c ****     USBCON = (1<<FRZCLK);
  31               		.loc 1 48 0
  32 0008 80E2      		ldi r24,lo8(32)
  33 000a 8093 D800 		sts 216,r24
  49:../../common/avr/bootloader.c ****     UCSR1B = 0;
  34               		.loc 1 49 0
  35 000e 1092 C900 		sts 201,__zero_reg__
  36               	.LVL0:
  37               	.LBB4:
  38               	.LBB5:
  39               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  40               		.loc 2 163 0
  41 0012 8FE1      		ldi r24,lo8(19999)
  42 0014 9EE4      		ldi r25,hi8(19999)
  43 0016 0197      		1: sbiw r24,1
  44 0018 01F4      		brne 1b
  45 001a 00C0      		rjmp .
  46 001c 0000      		nop
  47               	.LBE5:
  48               	.LBE4:
  50:../../common/avr/bootloader.c ****     _delay_ms(5);
  51:../../common/avr/bootloader.c **** #endif
  52:../../common/avr/bootloader.c **** 
  53:../../common/avr/bootloader.c ****     // watchdog reset
  54:../../common/avr/bootloader.c ****     reset_key = BOOTLOADER_RESET_KEY;
  49               		.loc 1 54 0
  50 001e 87E0      		ldi r24,lo8(7)
  51 0020 90EB      		ldi r25,lo8(-80)
  52 0022 DC01      		movw r26,r24
  53 0024 8093 0000 		sts reset_key,r24
  54 0028 9093 0000 		sts reset_key+1,r25
  55 002c A093 0000 		sts reset_key+2,r26
  56 0030 B093 0000 		sts reset_key+3,r27
  55:../../common/avr/bootloader.c ****     wdt_enable(WDTO_250MS);
  57               		.loc 1 55 0
  58 0034 2CE0      		ldi r18,lo8(12)
  59 0036 88E1      		ldi r24,lo8(24)
  60 0038 90E0      		ldi r25,0
  61               	/* #APP */
  62               	 ;  55 "../../common/avr/bootloader.c" 1
  63 003a 0FB6      		in __tmp_reg__,__SREG__
  64 003c F894      		cli
  65 003e A895      		wdr
  66 0040 8093 6000 		sts 96,r24
  67 0044 0FBE      		out __SREG__,__tmp_reg__
  68 0046 2093 6000 		sts 96,r18
  69               		
  70               	 ;  0 "" 2
  71               	/* #NOAPP */
  72               	.L2:
  73 004a 00C0      		rjmp .L2
  74               		.cfi_endproc
  75               	.LFE6:
  77               		.section	.init3,"ax",@progbits
  78               	.global	bootloader_jump_after_watchdog_reset
  80               	bootloader_jump_after_watchdog_reset:
  81               	.LFB7:
  56:../../common/avr/bootloader.c ****     for (;;);
  57:../../common/avr/bootloader.c **** }
  58:../../common/avr/bootloader.c **** 
  59:../../common/avr/bootloader.c **** 
  60:../../common/avr/bootloader.c **** /* this runs before main() */
  61:../../common/avr/bootloader.c **** void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
  62:../../common/avr/bootloader.c **** void bootloader_jump_after_watchdog_reset(void)
  63:../../common/avr/bootloader.c **** {
  82               		.loc 1 63 0
  83               		.cfi_startproc
  84               	/* prologue: naked */
  85               	/* frame size = 0 */
  86               	/* stack size = 0 */
  87               	.L__stack_usage = 0
  64:../../common/avr/bootloader.c ****     if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
  88               		.loc 1 64 0
  89 0000 04B6      		in __tmp_reg__,0x34
  90 0002 03FE      		sbrs __tmp_reg__,3
  91 0004 00C0      		rjmp .L4
  92               		.loc 1 64 0 is_stmt 0 discriminator 1
  93 0006 8091 0000 		lds r24,reset_key
  94 000a 9091 0000 		lds r25,reset_key+1
  95 000e A091 0000 		lds r26,reset_key+2
  96 0012 B091 0000 		lds r27,reset_key+3
  97 0016 8730      		cpi r24,7
  98 0018 904B      		sbci r25,-80
  99 001a A740      		sbci r26,7
 100 001c B04B      		sbci r27,-80
 101 001e 01F4      		brne .L4
  65:../../common/avr/bootloader.c ****         reset_key = 0;
 102               		.loc 1 65 0 is_stmt 1
 103 0020 1092 0000 		sts reset_key,__zero_reg__
 104 0024 1092 0000 		sts reset_key+1,__zero_reg__
 105 0028 1092 0000 		sts reset_key+2,__zero_reg__
 106 002c 1092 0000 		sts reset_key+3,__zero_reg__
  66:../../common/avr/bootloader.c **** 
  67:../../common/avr/bootloader.c ****         // My custom USBasploader requires this to come up.
  68:../../common/avr/bootloader.c ****         MCUSR = 0;
 107               		.loc 1 68 0
 108 0030 14BE      		out 0x34,__zero_reg__
  69:../../common/avr/bootloader.c **** 
  70:../../common/avr/bootloader.c ****         // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
  71:../../common/avr/bootloader.c ****         MCUSR &= ~(1<<WDRF);
 109               		.loc 1 71 0
 110 0032 84B7      		in r24,0x34
 111 0034 877F      		andi r24,lo8(-9)
 112 0036 84BF      		out 0x34,r24
  72:../../common/avr/bootloader.c ****         wdt_disable();
 113               		.loc 1 72 0
 114 0038 88E1      		ldi r24,lo8(24)
 115               	/* #APP */
 116               	 ;  72 "../../common/avr/bootloader.c" 1
 117 003a 0FB6      		in __tmp_reg__, __SREG__
 118 003c F894      		cli
 119 003e 8093 6000 		sts 96, r24
 120 0042 1092 6000 		sts 96, __zero_reg__
 121 0046 0FBE      		out __SREG__,__tmp_reg__
 122               		
 123               	 ;  0 "" 2
  73:../../common/avr/bootloader.c **** 
  74:../../common/avr/bootloader.c ****         // This is compled into 'icall', address should be in word unit, not byte.
  75:../../common/avr/bootloader.c ****         ((void (*)(void))(BOOTLOADER_START/2))();
 124               		.loc 1 75 0
 125               	/* #NOAPP */
 126 0048 E0E0      		ldi r30,0
 127 004a FFE3      		ldi r31,lo8(63)
 128 004c 0995      		icall
 129               	.LVL1:
 130               	.L4:
 131               	/* epilogue start */
  76:../../common/avr/bootloader.c ****     }
  77:../../common/avr/bootloader.c **** }
 132               		.loc 1 77 0
 133               		.cfi_endproc
 134               	.LFE7:
 136               	.global	reset_key
 137               		.section	.noinit,"aw",@nobits
 140               	reset_key:
 141 0000 0000 0000 		.zero	4
 142               		.text
 143               	.Letext0:
 144               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootloader.c
     /tmp/cc8pv8vX.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc8pv8vX.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc8pv8vX.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc8pv8vX.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc8pv8vX.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc8pv8vX.s:13     .text.bootloader_jump:0000000000000000 bootloader_jump
     /tmp/cc8pv8vX.s:140    .noinit:0000000000000000 reset_key
     /tmp/cc8pv8vX.s:80     .init3:0000000000000000 bootloader_jump_after_watchdog_reset

NO UNDEFINED SYMBOLS
