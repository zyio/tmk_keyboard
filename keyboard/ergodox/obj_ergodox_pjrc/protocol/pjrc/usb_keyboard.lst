   1               		.file	"usb_keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.send_report.constprop.0,"ax",@progbits
  12               	send_report.constprop.0:
  13               	.LFB4:
  14               		.file 1 "../../protocol/pjrc/usb_keyboard.c"
   1:../../protocol/pjrc/usb_keyboard.c **** /* USB Keyboard Plus Debug Channel Example for Teensy USB Development Board
   2:../../protocol/pjrc/usb_keyboard.c ****  * http://www.pjrc.com/teensy/usb_keyboard.html
   3:../../protocol/pjrc/usb_keyboard.c ****  * Copyright (c) 2009 PJRC.COM, LLC
   4:../../protocol/pjrc/usb_keyboard.c ****  *
   5:../../protocol/pjrc/usb_keyboard.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   6:../../protocol/pjrc/usb_keyboard.c ****  * of this software and associated documentation files (the "Software"), to deal
   7:../../protocol/pjrc/usb_keyboard.c ****  * in the Software without restriction, including without limitation the rights
   8:../../protocol/pjrc/usb_keyboard.c ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:../../protocol/pjrc/usb_keyboard.c ****  * copies of the Software, and to permit persons to whom the Software is
  10:../../protocol/pjrc/usb_keyboard.c ****  * furnished to do so, subject to the following conditions:
  11:../../protocol/pjrc/usb_keyboard.c ****  *
  12:../../protocol/pjrc/usb_keyboard.c ****  * The above copyright notice and this permission notice shall be included in
  13:../../protocol/pjrc/usb_keyboard.c ****  * all copies or substantial portions of the Software.
  14:../../protocol/pjrc/usb_keyboard.c ****  *
  15:../../protocol/pjrc/usb_keyboard.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../protocol/pjrc/usb_keyboard.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:../../protocol/pjrc/usb_keyboard.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:../../protocol/pjrc/usb_keyboard.c ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:../../protocol/pjrc/usb_keyboard.c ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:../../protocol/pjrc/usb_keyboard.c ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:../../protocol/pjrc/usb_keyboard.c ****  * THE SOFTWARE.
  22:../../protocol/pjrc/usb_keyboard.c ****  */
  23:../../protocol/pjrc/usb_keyboard.c **** 
  24:../../protocol/pjrc/usb_keyboard.c **** #include <avr/interrupt.h>
  25:../../protocol/pjrc/usb_keyboard.c **** #include <avr/pgmspace.h>
  26:../../protocol/pjrc/usb_keyboard.c **** #include "keycode.h"
  27:../../protocol/pjrc/usb_keyboard.c **** #include "usb_keyboard.h"
  28:../../protocol/pjrc/usb_keyboard.c **** #include "print.h"
  29:../../protocol/pjrc/usb_keyboard.c **** #include "debug.h"
  30:../../protocol/pjrc/usb_keyboard.c **** #include "util.h"
  31:../../protocol/pjrc/usb_keyboard.c **** #include "host.h"
  32:../../protocol/pjrc/usb_keyboard.c **** 
  33:../../protocol/pjrc/usb_keyboard.c **** 
  34:../../protocol/pjrc/usb_keyboard.c **** // protocol setting from the host.  We use exactly the same report
  35:../../protocol/pjrc/usb_keyboard.c **** // either way, so this variable only stores the setting since we
  36:../../protocol/pjrc/usb_keyboard.c **** // are required to be able to report which setting is in use.
  37:../../protocol/pjrc/usb_keyboard.c **** uint8_t keyboard_protocol=1;
  38:../../protocol/pjrc/usb_keyboard.c **** 
  39:../../protocol/pjrc/usb_keyboard.c **** // the idle configuration, how often we send the report to the
  40:../../protocol/pjrc/usb_keyboard.c **** // host (ms * 4) even when it hasn't changed
  41:../../protocol/pjrc/usb_keyboard.c **** // Windows and Linux set 0 while OS X sets 6(24ms) by SET_IDLE request.
  42:../../protocol/pjrc/usb_keyboard.c **** uint8_t keyboard_idle=125;
  43:../../protocol/pjrc/usb_keyboard.c **** 
  44:../../protocol/pjrc/usb_keyboard.c **** // count until idle timeout
  45:../../protocol/pjrc/usb_keyboard.c **** uint8_t usb_keyboard_idle_count=0;
  46:../../protocol/pjrc/usb_keyboard.c **** 
  47:../../protocol/pjrc/usb_keyboard.c **** // 1=num lock, 2=caps lock, 4=scroll lock, 8=compose, 16=kana
  48:../../protocol/pjrc/usb_keyboard.c **** volatile uint8_t usb_keyboard_leds=0;
  49:../../protocol/pjrc/usb_keyboard.c **** 
  50:../../protocol/pjrc/usb_keyboard.c **** 
  51:../../protocol/pjrc/usb_keyboard.c **** static inline int8_t send_report(report_keyboard_t *report, uint8_t endpoint, uint8_t keys_start, u
  52:../../protocol/pjrc/usb_keyboard.c **** 
  53:../../protocol/pjrc/usb_keyboard.c **** 
  54:../../protocol/pjrc/usb_keyboard.c **** int8_t usb_keyboard_send_report(report_keyboard_t *report)
  55:../../protocol/pjrc/usb_keyboard.c **** {
  56:../../protocol/pjrc/usb_keyboard.c ****     int8_t result = 0;
  57:../../protocol/pjrc/usb_keyboard.c **** 
  58:../../protocol/pjrc/usb_keyboard.c **** #ifdef NKRO_ENABLE
  59:../../protocol/pjrc/usb_keyboard.c ****     if (keyboard_nkro)
  60:../../protocol/pjrc/usb_keyboard.c ****         result = send_report(report, KBD2_ENDPOINT, 0, KBD2_SIZE);
  61:../../protocol/pjrc/usb_keyboard.c ****     else
  62:../../protocol/pjrc/usb_keyboard.c **** #endif
  63:../../protocol/pjrc/usb_keyboard.c ****     {
  64:../../protocol/pjrc/usb_keyboard.c ****         result = send_report(report, KBD_ENDPOINT, 0, KBD_SIZE);
  65:../../protocol/pjrc/usb_keyboard.c ****     }
  66:../../protocol/pjrc/usb_keyboard.c **** 
  67:../../protocol/pjrc/usb_keyboard.c ****     if (result) return result;
  68:../../protocol/pjrc/usb_keyboard.c ****     usb_keyboard_idle_count = 0;
  69:../../protocol/pjrc/usb_keyboard.c ****     usb_keyboard_print_report(report);
  70:../../protocol/pjrc/usb_keyboard.c ****     return 0;
  71:../../protocol/pjrc/usb_keyboard.c **** }
  72:../../protocol/pjrc/usb_keyboard.c **** 
  73:../../protocol/pjrc/usb_keyboard.c **** void usb_keyboard_print_report(report_keyboard_t *report)
  74:../../protocol/pjrc/usb_keyboard.c **** {
  75:../../protocol/pjrc/usb_keyboard.c ****     if (!debug_keyboard) return;
  76:../../protocol/pjrc/usb_keyboard.c ****     print("keys: ");
  77:../../protocol/pjrc/usb_keyboard.c ****     for (int i = 0; i < KEYBOARD_REPORT_KEYS; i++) { phex(report->keys[i]); print(" "); }
  78:../../protocol/pjrc/usb_keyboard.c ****     print(" mods: "); phex(report->mods); print("\n");
  79:../../protocol/pjrc/usb_keyboard.c **** }
  80:../../protocol/pjrc/usb_keyboard.c **** 
  81:../../protocol/pjrc/usb_keyboard.c **** 
  82:../../protocol/pjrc/usb_keyboard.c **** static inline int8_t send_report(report_keyboard_t *report, uint8_t endpoint, uint8_t keys_start, u
  15               		.loc 1 82 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 FF92      		push r15
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 15, -2
  22 0002 0F93      		push r16
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 16, -3
  26 0004 1F93      		push r17
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 17, -4
  30 0006 CF93      		push r28
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 28, -5
  34 0008 DF93      		push r29
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 29, -6
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 5 */
  41               	.L__stack_usage = 5
  42 000a D82F      		mov r29,r24
  43 000c F92E      		mov r15,r25
  44 000e 162F      		mov r17,r22
  45 0010 042F      		mov r16,r20
  46               	.LVL1:
  83:../../protocol/pjrc/usb_keyboard.c **** {
  84:../../protocol/pjrc/usb_keyboard.c ****     uint8_t intr_state, timeout;
  85:../../protocol/pjrc/usb_keyboard.c **** 
  86:../../protocol/pjrc/usb_keyboard.c ****     if (!usb_configured()) return -1;
  47               		.loc 1 86 0
  48 0012 0E94 0000 		call usb_configured
  49               	.LVL2:
  50 0016 8111      		cpse r24,__zero_reg__
  51 0018 00C0      		rjmp .L2
  52               	.L6:
  53 001a 8FEF      		ldi r24,lo8(-1)
  54 001c 00C0      		rjmp .L3
  55               	.L2:
  87:../../protocol/pjrc/usb_keyboard.c ****     intr_state = SREG;
  56               		.loc 1 87 0
  57 001e 2FB7      		in r18,__SREG__
  58               	.LVL3:
  88:../../protocol/pjrc/usb_keyboard.c ****     cli();
  59               		.loc 1 88 0
  60               	/* #APP */
  61               	 ;  88 "../../protocol/pjrc/usb_keyboard.c" 1
  62 0020 F894      		cli
  63               	 ;  0 "" 2
  89:../../protocol/pjrc/usb_keyboard.c ****     UENUM = endpoint;
  64               		.loc 1 89 0
  65               	/* #NOAPP */
  66 0022 1093 E900 		sts 233,r17
  90:../../protocol/pjrc/usb_keyboard.c ****     timeout = UDFNUML + 50;
  67               		.loc 1 90 0
  68 0026 C091 E400 		lds r28,228
  69 002a CE5C      		subi r28,lo8(-(50))
  70               	.LVL4:
  71               	.L7:
  91:../../protocol/pjrc/usb_keyboard.c ****     while (1) {
  92:../../protocol/pjrc/usb_keyboard.c ****             // are we ready to transmit?
  93:../../protocol/pjrc/usb_keyboard.c ****             if (UEINTX & (1<<RWAL)) break;
  72               		.loc 1 93 0
  73 002c 8091 E800 		lds r24,232
  74 0030 85FF      		sbrs r24,5
  75 0032 00C0      		rjmp .L4
  76 0034 9D2F      		mov r25,r29
  77 0036 ED2F      		mov r30,r29
  78 0038 FF2D      		mov r31,r15
  79 003a 00C0      		rjmp .L5
  80               	.L4:
  94:../../protocol/pjrc/usb_keyboard.c ****             SREG = intr_state;
  81               		.loc 1 94 0
  82 003c 2FBF      		out __SREG__,r18
  95:../../protocol/pjrc/usb_keyboard.c ****             // has the USB gone offline?
  96:../../protocol/pjrc/usb_keyboard.c ****             if (!usb_configured()) return -1;
  83               		.loc 1 96 0
  84 003e 0E94 0000 		call usb_configured
  85               	.LVL5:
  86 0042 8823      		tst r24
  87 0044 01F0      		breq .L6
  97:../../protocol/pjrc/usb_keyboard.c ****             // have we waited too long?
  98:../../protocol/pjrc/usb_keyboard.c ****             if (UDFNUML == timeout) return -1;
  88               		.loc 1 98 0
  89 0046 8091 E400 		lds r24,228
  90 004a 8C17      		cp r24,r28
  91 004c 01F0      		breq .L6
  99:../../protocol/pjrc/usb_keyboard.c ****             // get ready to try checking again
 100:../../protocol/pjrc/usb_keyboard.c ****             intr_state = SREG;
  92               		.loc 1 100 0
  93 004e 2FB7      		in r18,__SREG__
  94               	.LVL6:
 101:../../protocol/pjrc/usb_keyboard.c ****             cli();
  95               		.loc 1 101 0
  96               	/* #APP */
  97               	 ;  101 "../../protocol/pjrc/usb_keyboard.c" 1
  98 0050 F894      		cli
  99               	 ;  0 "" 2
 102:../../protocol/pjrc/usb_keyboard.c ****             UENUM = endpoint;
 100               		.loc 1 102 0
 101               	/* #NOAPP */
 102 0052 1093 E900 		sts 233,r17
 103 0056 00C0      		rjmp .L7
 104               	.L5:
 105               	.LVL7:
 106 0058 8E2F      		mov r24,r30
 107 005a 891B      		sub r24,r25
 108               	.LBB3:
 103:../../protocol/pjrc/usb_keyboard.c ****     }
 104:../../protocol/pjrc/usb_keyboard.c ****     for (uint8_t i = keys_start; i < keys_end; i++) {
 109               		.loc 1 104 0
 110 005c 8017      		cp r24,r16
 111 005e 00F4      		brsh .L13
 105:../../protocol/pjrc/usb_keyboard.c ****             UEDATX = report->raw[i];
 112               		.loc 1 105 0
 113 0060 8191      		ld r24,Z+
 114               	.LVL8:
 115 0062 8093 F100 		sts 241,r24
 116               	.LVL9:
 117 0066 00C0      		rjmp .L5
 118               	.L13:
 119               	.LBE3:
 106:../../protocol/pjrc/usb_keyboard.c ****     }
 107:../../protocol/pjrc/usb_keyboard.c ****     UEINTX = 0x3A;
 120               		.loc 1 107 0
 121 0068 8AE3      		ldi r24,lo8(58)
 122 006a 8093 E800 		sts 232,r24
 108:../../protocol/pjrc/usb_keyboard.c ****     SREG = intr_state;
 123               		.loc 1 108 0
 124 006e 2FBF      		out __SREG__,r18
 109:../../protocol/pjrc/usb_keyboard.c ****     return 0;
 125               		.loc 1 109 0
 126 0070 80E0      		ldi r24,0
 127               	.LVL10:
 128               	.L3:
 129               	/* epilogue start */
 110:../../protocol/pjrc/usb_keyboard.c **** }
 130               		.loc 1 110 0
 131 0072 DF91      		pop r29
 132 0074 CF91      		pop r28
 133 0076 1F91      		pop r17
 134               	.LVL11:
 135 0078 0F91      		pop r16
 136               	.LVL12:
 137 007a FF90      		pop r15
 138 007c 0895      		ret
 139               		.cfi_endproc
 140               	.LFE4:
 142               		.section	.text.usb_keyboard_print_report,"ax",@progbits
 143               	.global	usb_keyboard_print_report
 145               	usb_keyboard_print_report:
 146               	.LFB2:
  74:../../protocol/pjrc/usb_keyboard.c ****     if (!debug_keyboard) return;
 147               		.loc 1 74 0
 148               		.cfi_startproc
 149               	.LVL13:
 150 0000 EF92      		push r14
 151               	.LCFI5:
 152               		.cfi_def_cfa_offset 3
 153               		.cfi_offset 14, -2
 154 0002 FF92      		push r15
 155               	.LCFI6:
 156               		.cfi_def_cfa_offset 4
 157               		.cfi_offset 15, -3
 158 0004 0F93      		push r16
 159               	.LCFI7:
 160               		.cfi_def_cfa_offset 5
 161               		.cfi_offset 16, -4
 162 0006 1F93      		push r17
 163               	.LCFI8:
 164               		.cfi_def_cfa_offset 6
 165               		.cfi_offset 17, -5
 166 0008 CF93      		push r28
 167               	.LCFI9:
 168               		.cfi_def_cfa_offset 7
 169               		.cfi_offset 28, -6
 170 000a DF93      		push r29
 171               	.LCFI10:
 172               		.cfi_def_cfa_offset 8
 173               		.cfi_offset 29, -7
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 6 */
 177               	.L__stack_usage = 6
 178 000c 8C01      		movw r16,r24
  75:../../protocol/pjrc/usb_keyboard.c ****     print("keys: ");
 179               		.loc 1 75 0
 180 000e 8091 0000 		lds r24,debug_config
 181               	.LVL14:
 182 0012 82FF      		sbrs r24,2
 183 0014 00C0      		rjmp .L14
  76:../../protocol/pjrc/usb_keyboard.c ****     for (int i = 0; i < KEYBOARD_REPORT_KEYS; i++) { phex(report->keys[i]); print(" "); }
 184               		.loc 1 76 0
 185 0016 80E0      		ldi r24,lo8(__c.2038)
 186 0018 90E0      		ldi r25,hi8(__c.2038)
 187 001a 0E94 0000 		call xputs
 188               	.LVL15:
 189               	.LBB4:
  77:../../protocol/pjrc/usb_keyboard.c ****     print(" mods: "); phex(report->mods); print("\n");
 190               		.loc 1 77 0
 191 001e C0E0      		ldi r28,0
 192 0020 D0E0      		ldi r29,0
 193 0022 80E0      		ldi r24,lo8(__c.2041)
 194 0024 E82E      		mov r14,r24
 195 0026 80E0      		ldi r24,hi8(__c.2041)
 196 0028 F82E      		mov r15,r24
 197               	.LVL16:
 198               	.L17:
 199 002a F801      		movw r30,r16
 200 002c EC0F      		add r30,r28
 201 002e FD1F      		adc r31,r29
  77:../../protocol/pjrc/usb_keyboard.c ****     print(" mods: "); phex(report->mods); print("\n");
 202               		.loc 1 77 0 is_stmt 0 discriminator 2
 203 0030 8281      		ldd r24,Z+2
 204 0032 1F92      		push __zero_reg__
 205               	.LCFI11:
 206               		.cfi_def_cfa_offset 9
 207 0034 8F93      		push r24
 208               	.LCFI12:
 209               		.cfi_def_cfa_offset 10
 210 0036 FF92      		push r15
 211               	.LCFI13:
 212               		.cfi_def_cfa_offset 11
 213 0038 EF92      		push r14
 214               	.LCFI14:
 215               		.cfi_def_cfa_offset 12
 216 003a 0E94 0000 		call __xprintf
 217               	.LVL17:
 218 003e 80E0      		ldi r24,lo8(__c.2043)
 219 0040 90E0      		ldi r25,hi8(__c.2043)
 220 0042 0E94 0000 		call xputs
 221               	.LVL18:
 222 0046 2196      		adiw r28,1
 223               	.LVL19:
 224 0048 0F90      		pop __tmp_reg__
 225 004a 0F90      		pop __tmp_reg__
 226 004c 0F90      		pop __tmp_reg__
 227 004e 0F90      		pop __tmp_reg__
 228               	.LCFI15:
 229               		.cfi_def_cfa_offset 8
 230 0050 CE30      		cpi r28,14
 231 0052 D105      		cpc r29,__zero_reg__
 232 0054 01F4      		brne .L17
 233               	.LBE4:
  78:../../protocol/pjrc/usb_keyboard.c **** }
 234               		.loc 1 78 0 is_stmt 1
 235 0056 80E0      		ldi r24,lo8(__c.2048)
 236 0058 90E0      		ldi r25,hi8(__c.2048)
 237 005a 0E94 0000 		call xputs
 238               	.LVL20:
 239 005e F801      		movw r30,r16
 240 0060 8081      		ld r24,Z
 241 0062 1F92      		push __zero_reg__
 242               	.LCFI16:
 243               		.cfi_def_cfa_offset 9
 244 0064 8F93      		push r24
 245               	.LCFI17:
 246               		.cfi_def_cfa_offset 10
 247 0066 80E0      		ldi r24,lo8(__c.2050)
 248 0068 90E0      		ldi r25,hi8(__c.2050)
 249 006a 9F93      		push r25
 250               	.LCFI18:
 251               		.cfi_def_cfa_offset 11
 252 006c 8F93      		push r24
 253               	.LCFI19:
 254               		.cfi_def_cfa_offset 12
 255 006e 0E94 0000 		call __xprintf
 256               	.LVL21:
 257 0072 0F90      		pop __tmp_reg__
 258 0074 0F90      		pop __tmp_reg__
 259 0076 0F90      		pop __tmp_reg__
 260 0078 0F90      		pop __tmp_reg__
 261               	.LCFI20:
 262               		.cfi_def_cfa_offset 8
 263 007a 80E0      		ldi r24,lo8(__c.2052)
 264 007c 90E0      		ldi r25,hi8(__c.2052)
 265               	/* epilogue start */
  79:../../protocol/pjrc/usb_keyboard.c **** 
 266               		.loc 1 79 0
 267 007e DF91      		pop r29
 268 0080 CF91      		pop r28
 269               	.LVL22:
 270 0082 1F91      		pop r17
 271 0084 0F91      		pop r16
 272               	.LVL23:
 273 0086 FF90      		pop r15
 274 0088 EF90      		pop r14
  78:../../protocol/pjrc/usb_keyboard.c **** }
 275               		.loc 1 78 0
 276 008a 0C94 0000 		jmp xputs
 277               	.LVL24:
 278               	.L14:
 279               	/* epilogue start */
  79:../../protocol/pjrc/usb_keyboard.c **** 
 280               		.loc 1 79 0
 281 008e DF91      		pop r29
 282 0090 CF91      		pop r28
 283 0092 1F91      		pop r17
 284 0094 0F91      		pop r16
 285               	.LVL25:
 286 0096 FF90      		pop r15
 287 0098 EF90      		pop r14
 288 009a 0895      		ret
 289               		.cfi_endproc
 290               	.LFE2:
 292               		.section	.text.usb_keyboard_send_report,"ax",@progbits
 293               	.global	usb_keyboard_send_report
 295               	usb_keyboard_send_report:
 296               	.LFB1:
  55:../../protocol/pjrc/usb_keyboard.c ****     int8_t result = 0;
 297               		.loc 1 55 0
 298               		.cfi_startproc
 299               	.LVL26:
 300 0000 1F93      		push r17
 301               	.LCFI21:
 302               		.cfi_def_cfa_offset 3
 303               		.cfi_offset 17, -2
 304 0002 CF93      		push r28
 305               	.LCFI22:
 306               		.cfi_def_cfa_offset 4
 307               		.cfi_offset 28, -3
 308 0004 DF93      		push r29
 309               	.LCFI23:
 310               		.cfi_def_cfa_offset 5
 311               		.cfi_offset 29, -4
 312               	/* prologue: function */
 313               	/* frame size = 0 */
 314               	/* stack size = 3 */
 315               	.L__stack_usage = 3
 316 0006 EC01      		movw r28,r24
 317               	.LVL27:
  59:../../protocol/pjrc/usb_keyboard.c ****         result = send_report(report, KBD2_ENDPOINT, 0, KBD2_SIZE);
 318               		.loc 1 59 0
 319 0008 8091 0000 		lds r24,keyboard_nkro
 320               	.LVL28:
 321 000c 8823      		tst r24
 322 000e 01F0      		breq .L19
  60:../../protocol/pjrc/usb_keyboard.c ****     else
 323               		.loc 1 60 0
 324 0010 40E1      		ldi r20,lo8(16)
 325 0012 65E0      		ldi r22,lo8(5)
 326 0014 00C0      		rjmp .L22
 327               	.L19:
  64:../../protocol/pjrc/usb_keyboard.c ****     }
 328               		.loc 1 64 0
 329 0016 48E0      		ldi r20,lo8(8)
 330 0018 61E0      		ldi r22,lo8(1)
 331               	.L22:
 332 001a CE01      		movw r24,r28
 333 001c 0E94 0000 		call send_report.constprop.0
 334               	.LVL29:
 335 0020 182F      		mov r17,r24
 336               	.LVL30:
  67:../../protocol/pjrc/usb_keyboard.c ****     usb_keyboard_idle_count = 0;
 337               		.loc 1 67 0
 338 0022 8111      		cpse r24,__zero_reg__
 339 0024 00C0      		rjmp .L21
  68:../../protocol/pjrc/usb_keyboard.c ****     usb_keyboard_print_report(report);
 340               		.loc 1 68 0
 341 0026 1092 0000 		sts usb_keyboard_idle_count,__zero_reg__
  69:../../protocol/pjrc/usb_keyboard.c ****     return 0;
 342               		.loc 1 69 0
 343 002a CE01      		movw r24,r28
 344 002c 0E94 0000 		call usb_keyboard_print_report
 345               	.LVL31:
 346               	.L21:
  71:../../protocol/pjrc/usb_keyboard.c **** 
 347               		.loc 1 71 0
 348 0030 812F      		mov r24,r17
 349               	/* epilogue start */
 350 0032 DF91      		pop r29
 351 0034 CF91      		pop r28
 352               	.LVL32:
 353 0036 1F91      		pop r17
 354               	.LVL33:
 355 0038 0895      		ret
 356               		.cfi_endproc
 357               	.LFE1:
 359               		.section	.progmem.data,"a",@progbits
 362               	__c.2052:
 363 0000 0A00      		.string	"\n"
 366               	__c.2050:
 367 0002 2530 3258 		.string	"%02X"
 367      00
 370               	__c.2048:
 371 0007 206D 6F64 		.string	" mods: "
 371      733A 2000 
 374               	__c.2043:
 375 000f 2000      		.string	" "
 378               	__c.2041:
 379 0011 2530 3258 		.string	"%02X"
 379      00
 382               	__c.2038:
 383 0016 6B65 7973 		.string	"keys: "
 383      3A20 00
 384               	.global	usb_keyboard_leds
 385               		.section .bss
 388               	usb_keyboard_leds:
 389 0000 00        		.zero	1
 390               	.global	usb_keyboard_idle_count
 393               	usb_keyboard_idle_count:
 394 0001 00        		.zero	1
 395               	.global	keyboard_idle
 396               		.data
 399               	keyboard_idle:
 400 0000 7D        		.byte	125
 401               	.global	keyboard_protocol
 404               	keyboard_protocol:
 405 0001 01        		.byte	1
 406               		.text
 407               	.Letext0:
 408               		.file 2 "/usr/lib/avr/include/stdint.h"
 409               		.file 3 "../../common/report.h"
 410               		.file 4 "../../common/debug.h"
 411               		.file 5 "../../common/host.h"
 412               		.file 6 "../../protocol/pjrc/usb.h"
 413               		.file 7 "../../common/avr/xprintf.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_keyboard.c
     /tmp/ccYmn2S2.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccYmn2S2.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccYmn2S2.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccYmn2S2.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccYmn2S2.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccYmn2S2.s:12     .text.send_report.constprop.0:0000000000000000 send_report.constprop.0
     /tmp/ccYmn2S2.s:145    .text.usb_keyboard_print_report:0000000000000000 usb_keyboard_print_report
     /tmp/ccYmn2S2.s:382    .progmem.data:0000000000000016 __c.2038
     /tmp/ccYmn2S2.s:378    .progmem.data:0000000000000011 __c.2041
     /tmp/ccYmn2S2.s:374    .progmem.data:000000000000000f __c.2043
     /tmp/ccYmn2S2.s:370    .progmem.data:0000000000000007 __c.2048
     /tmp/ccYmn2S2.s:366    .progmem.data:0000000000000002 __c.2050
     /tmp/ccYmn2S2.s:362    .progmem.data:0000000000000000 __c.2052
     /tmp/ccYmn2S2.s:295    .text.usb_keyboard_send_report:0000000000000000 usb_keyboard_send_report
     /tmp/ccYmn2S2.s:393    .bss:0000000000000001 usb_keyboard_idle_count
     /tmp/ccYmn2S2.s:388    .bss:0000000000000000 usb_keyboard_leds
     /tmp/ccYmn2S2.s:399    .data:0000000000000000 keyboard_idle
     /tmp/ccYmn2S2.s:404    .data:0000000000000001 keyboard_protocol

UNDEFINED SYMBOLS
usb_configured
debug_config
xputs
__xprintf
keyboard_nkro
__do_copy_data
__do_clear_bss
