
ergodox_pjrc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00005b18  00005bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  00800122  00800122  00005bce  2**0
                  ALLOC
  3 .noinit       00000004  008001cb  008001cb  00005bce  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000006a  00000000  00000000  00006488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000064f2  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000938  00000000  00000000  00006503  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000cf93  00000000  00000000  00006e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000036da  00000000  00000000  00013dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000302d  00000000  00000000  000174a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001830  00000000  00000000  0001a4d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002870  00000000  00000000  0001bd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000063ae  00000000  00000000  0001e578  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009a0  00000000  00000000  00024926  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__ctors_end>
       4:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
       8:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
       c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      10:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      14:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      18:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      1c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      20:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      24:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      28:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__vector_10>
      2c:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__vector_11>
      30:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      34:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      38:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      3c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      40:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      44:	0c 94 ca 2b 	jmp	0x5794	; 0x5794 <__vector_17>
      48:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      4c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      50:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      54:	0c 94 16 20 	jmp	0x402c	; 0x402c <__vector_21>
      58:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      5c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      60:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      64:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      68:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      6c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      70:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      74:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      78:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      7c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      80:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      84:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      88:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      8c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      90:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      94:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      98:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      9c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      a0:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      a4:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      a8:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__bad_interrupt>
      ac:	d5 14       	cp	r13, r5
      ae:	d5 14       	cp	r13, r5
      b0:	03 15       	cp	r16, r3
      b2:	03 15       	cp	r16, r3
      b4:	58 15       	cp	r21, r8
      b6:	94 15       	cp	r25, r4
      b8:	85 17       	cp	r24, r21
      ba:	85 17       	cp	r24, r21
      bc:	ac 15       	cp	r26, r12
      be:	85 17       	cp	r24, r21
      c0:	a3 16       	cp	r10, r19
      c2:	a3 16       	cp	r10, r19
      c4:	5f 17       	cp	r21, r31
      c6:	85 17       	cp	r24, r21
      c8:	85 17       	cp	r24, r21
      ca:	73 17       	cp	r23, r19
      cc:	e1 28       	or	r14, r1
      ce:	09 29       	or	r16, r9
      d0:	44 27       	eor	r20, r20
      d2:	26 2a       	or	r2, r22
      d4:	26 2a       	or	r2, r22
      d6:	92 28       	or	r9, r2
      d8:	26 2a       	or	r2, r22
      da:	26 2a       	or	r2, r22
      dc:	35 29       	or	r19, r5
      de:	26 2a       	or	r2, r22
      e0:	48 29       	or	r20, r8
      e2:	ef 29       	or	r30, r15
      e4:	26 2a       	or	r2, r22
      e6:	26 2a       	or	r2, r22
      e8:	26 2a       	or	r2, r22
      ea:	26 2a       	or	r2, r22
      ec:	92 29       	or	r25, r2
      ee:	79 29       	or	r23, r9
      f0:	26 2a       	or	r2, r22
      f2:	62 29       	or	r22, r2
      f4:	26 2a       	or	r2, r22
      f6:	22 29       	or	r18, r2
      f8:	26 2a       	or	r2, r22
      fa:	39 27       	eor	r19, r25
      fc:	20 2a       	or	r2, r16
      fe:	20 2a       	or	r2, r16
     100:	20 2a       	or	r2, r16
     102:	20 2a       	or	r2, r16
     104:	20 2a       	or	r2, r16
     106:	20 2a       	or	r2, r16
     108:	20 2a       	or	r2, r16
     10a:	20 2a       	or	r2, r16
     10c:	20 2a       	or	r2, r16
     10e:	1e 2a       	or	r1, r30
     110:	26 2a       	or	r2, r22
     112:	1e 2a       	or	r1, r30
     114:	26 2a       	or	r2, r22
     116:	26 2a       	or	r2, r22
     118:	26 2a       	or	r2, r22
     11a:	26 2a       	or	r2, r22
     11c:	26 2a       	or	r2, r22
     11e:	26 2a       	or	r2, r22
     120:	26 2a       	or	r2, r22
     122:	26 2a       	or	r2, r22
     124:	26 2a       	or	r2, r22
     126:	26 2a       	or	r2, r22
     128:	26 2a       	or	r2, r22
     12a:	1e 2a       	or	r1, r30
     12c:	26 2a       	or	r2, r22
     12e:	26 2a       	or	r2, r22
     130:	92 28       	or	r9, r2
     132:	73 28       	or	r7, r3
     134:	22 2a       	or	r2, r18
     136:	22 2a       	or	r2, r18
     138:	22 2a       	or	r2, r18
     13a:	22 2a       	or	r2, r18
     13c:	22 2a       	or	r2, r18
     13e:	22 2a       	or	r2, r18
     140:	22 2a       	or	r2, r18
     142:	22 2a       	or	r2, r18
     144:	22 2a       	or	r2, r18
     146:	22 2a       	or	r2, r18
     148:	22 2a       	or	r2, r18
     14a:	22 2a       	or	r2, r18
     14c:	01 2a       	or	r0, r17
     14e:	26 2a       	or	r2, r22
     150:	f5 28       	or	r15, r5

00000152 <__trampolines_end>:
     152:	6e 6f       	ori	r22, 0xFE	; 254
     154:	74 20       	and	r7, r4
     156:	73 75       	andi	r23, 0x53	; 83
     158:	70 70       	andi	r23, 0x00	; 0
     15a:	6f 72       	andi	r22, 0x2F	; 47
     15c:	74 65       	ori	r23, 0x54	; 84
     15e:	64 2e       	mov	r6, r20
     160:	0a 00       	.word	0x000a	; ????

00000162 <__c.2533>:
     162:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     172:	61 64 65 72 2e 2e 2e 20 00                          ader... .

0000017b <fn_actions>:
     17b:	00 f0 f1 a1 04 8d 08 8a 01 8d                       ..........

00000185 <keymaps>:
     185:	29 2b e0 e1 e3 00 1e 14 04 1d 35 4d 1f 1a 16 1b     )+........5M....
     195:	32 2a 20 08 07 06 34 2c 21 15 09 19 31 4a 22 17     2* ...4,!...1J".
     1a5:	0a 05 00 e0 2d 2f 00 c1 00 e2 2e 30 00 c1 00 46     ....-/.....0...F
     1b5:	23 1c 0b 11 00 49 24 18 0d 10 50 4b 25 0c 0e 36     #....I$...PK%..6
     1c5:	51 2c 26 12 0f 37 52 28 27 13 33 38 4f 4e 4c 64     Q,&..7R('.38ONLd
     1d5:	34 e5 e7 00 01 01 01 01 01 00 3a 01 01 01 01 01     4.........:.....
     1e5:	3b 01 01 01 01 01 3c 01 01 01 01 01 3d 01 01 01     ;.....<.....=...
     1f5:	01 01 3e 01 01 01 00 01 44 c4 00 01 00 01 45 01     ..>.....D.....E.
     205:	00 01 00 01 3f 01 01 01 00 01 40 01 01 01 01 01     ....?.....@.....
     215:	41 5f 5c 59 62 01 42 60 5d 5a 62 01 43 61 5e 5b     A_\Yb.B`]Zb.Ca^[
     225:	63 01 01 54 55 56 67 00 c0 01 01 01 01 00 01 01     c..TUVg.........
     235:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     245:	01 01 01 01 01 01 01 01 01 01 00 01 01 01 00 01     ................
     255:	00 01 c4 01 00 01 00 01 01 01 01 01 00 01 01 01     ................
     265:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     275:	01 01 01 01 01 01 01 01 01 01 01 00 01 01 01 01     ................
     285:	01 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     295:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 01     ................
     2a5:	01 01 00 01 00 01 01 01 00 01 00 01 53 00 00 00     ............S...
     2b5:	00 01 54 5f 5c 59 62 01 55 60 5d 5a 63 01 55 61     ..T_\Yb.U`]Zc.Ua
     2c5:	5e 5b 38 01 56 56 57 57 58 01 2a 2a 58 58 58 00     ^[8.VVWWX.**XXX.

000002d5 <__c.2489>:
     2d5:	0a 00                                               ..

000002d7 <__c.2487>:
     2d7:	25 30 31 36 62 00                                   %016b.

000002dd <__c.2485>:
     2dd:	3a 20 00                                            : .

000002e0 <__c.2483>:
     2e0:	25 30 32 58 00                                      %02X.

000002e5 <__c.2480>:
     2e5:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     2f5:	42 43 44 45 46 0a 00                                BCDEF..

000002fc <__c.2458>:
     2fc:	0a 00                                               ..

000002fe <__c.2456>:
     2fe:	25 30 32 58 00                                      %02X.

00000303 <__c.2454>:
     303:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

0000030d <__c.2450>:
     30d:	6c 65 66 74 20 73 69 64 65 20 61 74 74 61 63 68     left side attach
     31d:	65 64 0a 00                                         ed..

00000321 <__c.2448>:
     321:	6c 65 66 74 20 73 69 64 65 20 6e 6f 74 20 72 65     left side not re
     331:	73 70 6f 6e 64 69 6e 67 0a 00                       sponding..

0000033b <__c.2446>:
     33b:	74 72 79 69 6e 67 20 74 6f 20 72 65 73 65 74 20     trying to reset 
     34b:	6d 63 70 32 33 30 31 38 0a 00                       mcp23018..

00000355 <__c.2052>:
     355:	0a 00                                               ..

00000357 <__c.2050>:
     357:	25 30 32 58 00                                      %02X.

0000035c <__c.2048>:
     35c:	20 6d 6f 64 73 3a 20 00                              mods: .

00000364 <__c.2043>:
     364:	20 00                                                .

00000366 <__c.2041>:
     366:	25 30 32 58 00                                      %02X.

0000036b <__c.2038>:
     36b:	6b 65 79 73 3a 20 00                                keys: .

00000372 <descriptor_list>:
     372:	00 01 00 00 97 05 12 00 02 00 00 03 04 86 00 21     ...............!
     382:	00 00 15 04 09 00 22 00 00 58 05 3f 00 21 01 00     ......"..X.?.!..
     392:	2e 04 09 00 22 01 00 ce 04 51 00 21 02 00 47 04     ...."....Q.!..G.
     3a2:	09 00 22 02 00 b9 04 15 00 21 03 00 60 04 09 00     .."......!..`...
     3b2:	22 03 00 89 04 30 00 21 04 00 60 04 09 00 22 04     "....0.!..`...".
     3c2:	00 1f 05 39 00 03 00 00 ff 03 04 01 03 09 04 ed     ...9............
     3d2:	03 10 02 03 09 04 db 03 10                          .........

000003db <string2>:
     3db:	10 03 45 00 72 00 67 00 6f 00 64 00 6f 00 78 00     ..E.r.g.o.d.o.x.
     3eb:	00 00                                               ..

000003ed <string1>:
     3ed:	10 03 54 00 4d 00 4b 00 2f 00 43 00 75 00 62 00     ..T.M.K./.C.u.b.
     3fd:	00 00                                               ..

000003ff <string0>:
     3ff:	04 03 09 04                                         ....

00000403 <config1_descriptor>:
     403:	09 02 86 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     413:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     423:	00 0a 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
     433:	01 22 51 00 07 05 82 03 08 00 01 09 04 02 00 01     ."Q.............
     443:	03 00 00 00 09 21 11 01 00 01 22 15 00 07 05 83     .....!....".....
     453:	03 20 00 01 09 04 03 00 01 03 00 00 00 09 21 11     . ............!.
     463:	01 00 01 22 30 00 07 05 84 03 08 00 0a 09 04 04     ..."0...........
     473:	00 01 03 00 00 00 09 21 11 01 00 01 22 39 00 07     .......!...."9..
     483:	05 85 03 10 00 01                                   ......

00000489 <extra_hid_report_desc>:
     489:	05 01 09 80 a1 01 85 02 15 01 25 b7 19 01 29 b7     ..........%...).
     499:	75 10 95 01 81 00 c0 05 0c 09 01 a1 01 85 03 15     u...............
     4a9:	01 26 9c 02 19 01 2a 9c 02 75 10 95 01 81 00 c0     .&....*..u......

000004b9 <debug_hid_report_desc>:
     4b9:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
     4c9:	09 75 81 02 c0                                      .u...

000004ce <mouse_hid_report_desc>:
     4ce:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     4de:	15 00 25 01 75 01 95 05 81 02 75 03 95 01 81 03     ..%.u.....u.....
     4ee:	05 01 09 30 09 31 15 81 25 7f 75 08 95 02 81 06     ...0.1..%.u.....
     4fe:	09 38 15 81 25 7f 35 00 45 00 75 08 95 01 81 06     .8..%.5.E.u.....
     50e:	05 0c 0a 38 02 15 81 25 7f 75 08 95 01 81 06 c0     ...8...%.u......
     51e:	c0                                                  .

0000051f <keyboard2_hid_report_desc>:
     51f:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
     52f:	15 00 25 01 81 02 95 05 75 01 05 08 19 01 29 05     ..%.....u.....).
     53f:	91 02 95 01 75 03 91 03 95 78 75 01 15 00 25 01     ....u....xu...%.
     54f:	05 07 19 00 29 77 81 02 c0                          ....)w...

00000558 <keyboard_hid_report_desc>:
     558:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
     568:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
     578:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
     588:	75 08 15 00 25 ff 05 07 19 00 29 ff 81 00 c0        u...%.....)....

00000597 <device_descriptor>:
     597:	12 01 00 02 00 00 00 20 ed fe 07 13 01 00 01 02     ....... ........
     5a7:	00 01                                               ..

000005a9 <endpoint_config_table>:
     5a9:	01 c1 02 01 c1 02 01 c1 26 01 c1 06 01 c1 16 00     ........&.......

000005b9 <__c.2040>:
     5b9:	0a 00                                               ..

000005bb <__c.2035>:
     5bb:	25 30 32 58 20 00                                   %02X .

000005c1 <__c.2032>:
     5c1:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     5d1:	20 00                                                .

000005d3 <__c.2373>:
     5d3:	0a 00                                               ..

000005d5 <__c.2371>:
     5d5:	25 30 32 58 00                                      %02X.

000005da <__c.2369>:
     5da:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     5ea:	3a 20 00                                            : .

000005ed <__c.2180>:
     5ed:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     5fd:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

0000060b <__c.2175>:
     60b:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     61b:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000629 <__c.2444>:
     629:	64 6f 6e 65 2e 0a 00                                done...

00000630 <__c.2438>:
     630:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     640:	2e 2e 2e 20 00                                      ... .

00000645 <__c.2112>:
     645:	29 0a 00                                            )..

00000648 <__c.2110>:
     648:	25 75 00                                            %u.

0000064b <__c.2108>:
     64b:	2f 00                                               /.

0000064d <__c.2106>:
     64d:	25 75 00                                            %u.

00000650 <__c.2104>:
     650:	5d 28 00                                            ](.

00000653 <__c.2102>:
     653:	25 64 00                                            %d.

00000656 <__c.2100>:
     656:	20 00                                                .

00000658 <__c.2098>:
     658:	25 64 00                                            %d.

0000065b <__c.2096>:
     65b:	20 00                                                .

0000065d <__c.2094>:
     65d:	25 64 00                                            %d.

00000660 <__c.2092>:
     660:	20 00                                                .

00000662 <__c.2090>:
     662:	25 64 00                                            %d.

00000665 <__c.2088>:
     665:	7c 00                                               |.

00000667 <__c.2086>:
     667:	25 30 32 58 00                                      %02X.

0000066c <__c.2084>:
     66c:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     67c:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     68c:	20 5b 00                                             [.

0000068f <__c.2970>:
     68f:	0a 00                                               ..

00000691 <__c.2968>:
     691:	25 75 00                                            %u.

00000694 <__c.2966>:
     694:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     6a4:	5f 6d 61 78 20 3d 20 00                             _max = .

000006ac <__c.2963>:
     6ac:	0a 00                                               ..

000006ae <__c.2961>:
     6ae:	25 75 00                                            %u.

000006b1 <__c.2959>:
     6b1:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     6c1:	65 64 20 3d 20 00                                   ed = .

000006c7 <__c.2956>:
     6c7:	0a 00                                               ..

000006c9 <__c.2954>:
     6c9:	25 75 00                                            %u.

000006cc <__c.2952>:
     6cc:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     6dc:	20 00                                                .

000006de <__c.2949>:
     6de:	0a 00                                               ..

000006e0 <__c.2947>:
     6e0:	25 75 00                                            %u.

000006e3 <__c.2945>:
     6e3:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

000006f3 <__c.2942>:
     6f3:	0a 00                                               ..

000006f5 <__c.2940>:
     6f5:	25 75 00                                            %u.

000006f8 <__c.2938>:
     6f8:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

00000707 <__c.2934>:
     707:	0a 00                                               ..

00000709 <__c.2932>:
     709:	25 75 00                                            %u.

0000070c <__c.2930>:
     70c:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

00000718 <__c.2923>:
     718:	0a 00                                               ..

0000071a <__c.2921>:
     71a:	25 75 00                                            %u.

0000071d <__c.2919>:
     71d:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     72d:	5f 6d 61 78 20 3d 20 00                             _max = .

00000735 <__c.2916>:
     735:	0a 00                                               ..

00000737 <__c.2914>:
     737:	25 75 00                                            %u.

0000073a <__c.2912>:
     73a:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     74a:	65 64 20 3d 20 00                                   ed = .

00000750 <__c.2909>:
     750:	0a 00                                               ..

00000752 <__c.2907>:
     752:	25 75 00                                            %u.

00000755 <__c.2905>:
     755:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     765:	20 00                                                .

00000767 <__c.2902>:
     767:	0a 00                                               ..

00000769 <__c.2900>:
     769:	25 75 00                                            %u.

0000076c <__c.2898>:
     76c:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

0000077c <__c.2895>:
     77c:	0a 00                                               ..

0000077e <__c.2893>:
     77e:	25 75 00                                            %u.

00000781 <__c.2891>:
     781:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

00000790 <__c.2887>:
     790:	0a 00                                               ..

00000792 <__c.2885>:
     792:	25 75 00                                            %u.

00000795 <__c.2883>:
     795:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

000007a1 <__c.2876>:
     7a1:	0a 00                                               ..

000007a3 <__c.2874>:
     7a3:	25 75 00                                            %u.

000007a6 <__c.2872>:
     7a6:	36 3a 20 6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65     6: mk_wheel_time
     7b6:	5f 74 6f 5f 6d 61 78 3a 20 00                       _to_max: .

000007c0 <__c.2870>:
     7c0:	0a 00                                               ..

000007c2 <__c.2868>:
     7c2:	25 75 00                                            %u.

000007c5 <__c.2866>:
     7c5:	35 3a 20 6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f     5: mk_wheel_max_
     7d5:	73 70 65 65 64 3a 20 00                             speed: .

000007dd <__c.2864>:
     7dd:	0a 00                                               ..

000007df <__c.2862>:
     7df:	25 75 00                                            %u.

000007e2 <__c.2860>:
     7e2:	34 3a 20 6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61     4: mk_time_to_ma
     7f2:	78 3a 20 00                                         x: .

000007f6 <__c.2858>:
     7f6:	0a 00                                               ..

000007f8 <__c.2856>:
     7f8:	25 75 00                                            %u.

000007fb <__c.2854>:
     7fb:	33 3a 20 6d 6b 5f 6d 61 78 5f 73 70 65 65 64 3a     3: mk_max_speed:
     80b:	20 00                                                .

0000080d <__c.2852>:
     80d:	0a 00                                               ..

0000080f <__c.2850>:
     80f:	25 75 00                                            %u.

00000812 <__c.2848>:
     812:	32 3a 20 6d 6b 5f 69 6e 74 65 72 76 61 6c 28 6d     2: mk_interval(m
     822:	73 29 3a 20 00                                      s): .

00000827 <__c.2846>:
     827:	0a 00                                               ..

00000829 <__c.2844>:
     829:	25 75 00                                            %u.

0000082c <__c.2842>:
     82c:	31 3a 20 6d 6b 5f 64 65 6c 61 79 28 2a 31 30 6d     1: mk_delay(*10m
     83c:	73 29 3a 20 00                                      s): .

00000841 <__c.2840>:
     841:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     851:	20 50 61 72 61 6d 65 74 65 72 73 20 2d 2d 2d 2d      Parameters ----
     861:	2d 0a 00                                            -..

00000864 <__c.3060>:
     864:	3e 20 00                                            > .

00000867 <__c.3058>:
     867:	25 75 00                                            %u.

0000086a <__c.3056>:
     86a:	4d 00                                               M.

0000086c <__c.3054>:
     86c:	3f 00                                               ?.

0000086e <__c.3051>:
     86e:	73 65 74 20 64 65 66 61 75 6c 74 20 76 61 6c 75     set default valu
     87e:	65 73 2e 0a 00                                      es...

00000883 <__c.3044>:
     883:	0a 00                                               ..

00000885 <__c.3042>:
     885:	25 75 00                                            %u.

00000888 <__c.3040>:
     888:	73 65 6c 65 63 74 65 64 20 70 61 72 61 6d 65 74     selected paramet
     898:	65 72 3a 20 00                                      er: .

0000089d <__c.3027>:
     89d:	43 3e 20 00                                         C> .

000008a1 <__c.3025>:
     8a1:	0a 51 75 69 74 20 4d 6f 75 73 65 6b 65 79 20 43     .Quit Mousekey C
     8b1:	6f 6e 73 6f 6c 65 0a 00                             onsole..

000008b9 <__c.3015>:
     8b9:	53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77 69     See http://en.wi
     8c9:	6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b 69     kipedia.org/wiki
     8d9:	2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00              /Mouse_keys..

000008e6 <__c.3013>:
     8e6:	0a 00                                               ..

000008e8 <__c.3011>:
     8e8:	25 75 00                                            %u.

000008eb <__c.3009>:
     8eb:	2c 20 77 68 65 65 6c 3d 00                          , wheel=.

000008f4 <__c.3007>:
     8f4:	25 75 00                                            %u.

000008f7 <__c.3005>:
     8f7:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     907:	73 6f 72 3d 00                                      sor=.

0000090c <__c.3003>:
     90c:	0a 73 70 65 65 64 20 3d 20 64 65 6c 74 61 20 2a     .speed = delta *
     91c:	20 6d 61 78 5f 73 70 65 65 64 20 2a 20 28 72 65      max_speed * (re
     92c:	70 65 61 74 20 2f 20 74 69 6d 65 5f 74 6f 5f 6d     peat / time_to_m
     93c:	61 78 29 0a 00                                      ax)..

00000941 <__c.3001>:
     941:	70 67 64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65     pgdown:.decrease
     951:	20 70 61 72 61 6d 65 74 65 72 73 28 2d 31 30 29      parameters(-10)
     961:	0a 00                                               ..

00000963 <__c.2999>:
     963:	70 67 75 70 3a 09 69 6e 63 72 65 61 73 65 20 70     pgup:.increase p
     973:	61 72 61 6d 65 74 65 72 73 28 2b 31 30 29 0a 00     arameters(+10)..

00000983 <__c.2997>:
     983:	64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65 20 70     down:.decrease p
     993:	61 72 61 6d 65 74 65 72 73 28 2d 31 29 0a 00        arameters(-1)..

000009a2 <__c.2995>:
     9a2:	75 70 3a 09 69 6e 63 72 65 61 73 65 20 70 61 72     up:.increase par
     9b2:	61 6d 65 74 65 72 73 28 2b 31 29 0a 00              ameters(+1)..

000009bf <__c.2993>:
     9bf:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 20 76     d:.set default v
     9cf:	61 6c 75 65 73 0a 00                                alues..

000009d6 <__c.2991>:
     9d6:	70 3a 09 70 72 69 6e 74 20 70 61 72 61 6d 65 74     p:.print paramet
     9e6:	65 72 73 0a 00                                      ers..

000009eb <__c.2989>:
     9eb:	36 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     6:.select mk_whe
     9fb:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 00     el_time_to_max..

00000a0b <__c.2987>:
     a0b:	35 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     5:.select mk_whe
     a1b:	65 6c 5f 6d 61 78 5f 73 70 65 65 64 0a 00           el_max_speed..

00000a29 <__c.2985>:
     a29:	34 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 74 69 6d     4:.select mk_tim
     a39:	65 5f 74 6f 5f 6d 61 78 0a 00                       e_to_max..

00000a43 <__c.2983>:
     a43:	33 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 6d 61 78     3:.select mk_max
     a53:	5f 73 70 65 65 64 0a 00                             _speed..

00000a5b <__c.2981>:
     a5b:	32 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 69 6e 74     2:.select mk_int
     a6b:	65 72 76 61 6c 28 6d 73 29 0a 00                    erval(ms)..

00000a76 <__c.2979>:
     a76:	31 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 64 65 6c     1:.select mk_del
     a86:	61 79 28 2a 31 30 6d 73 29 0a 00                    ay(*10ms)..

00000a91 <__c.2977>:
     a91:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000a9e <__c.2975>:
     a9e:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     aae:	20 50 61 72 61 6d 65 74 65 72 73 20 48 65 6c 70      Parameters Help
     abe:	20 2d 2d 2d 2d 2d 0a 00                              -----..

00000ac6 <__c.2832>:
     ac6:	3f 00                                               ?.

00000ac8 <__c.2829>:
     ac8:	4d 30 3e 00                                         M0>.

00000acc <__c.2827>:
     acc:	0a 45 6e 74 65 72 20 4d 6f 75 73 65 6b 65 79 20     .Enter Mousekey 
     adc:	43 6f 6e 73 6f 6c 65 0a 00                          Console..

00000ae5 <__c.2824>:
     ae5:	0a 51 75 69 74 20 43 6f 6e 73 6f 6c 65 20 4d 6f     .Quit Console Mo
     af5:	64 65 0a 00                                         de..

00000af9 <__c.2834>:
     af9:	43 3e 20 00                                         C> .

00000afd <__c.3086>:
     afd:	0a 00                                               ..

00000aff <__c.3084>:
     aff:	25 75 00                                            %u.

00000b02 <__c.3082>:
     b02:	20 74 6f 20 00                                       to .

00000b07 <__c.3080>:
     b07:	25 75 00                                            %u.

00000b0a <__c.3078>:
     b0a:	73 77 69 74 63 68 5f 64 65 66 61 75 6c 74 5f 6c     switch_default_l
     b1a:	61 79 65 72 3a 20 00                                ayer: .

00000b21 <__c.2814>:
     b21:	6d 3a 09 6d 6f 75 73 65 6b 65 79 0a 00              m:.mousekey..

00000b2e <__c.2812>:
     b2e:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000b3b <__c.2810>:
     b3b:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6e 73 6f 6c 65 20     ..----- Console 
     b4b:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000b57 <__c.2613>:
     b57:	50 61 75 73 3a 09 6a 75 6d 70 20 74 6f 20 62 6f     Paus:.jump to bo
     b67:	6f 74 6c 6f 61 64 65 72 0a 00                       otloader..

00000b71 <__c.2611>:
     b71:	43 61 70 73 3a 09 4c 6f 63 6b 20 4b 65 79 62 6f     Caps:.Lock Keybo
     b81:	61 72 64 28 43 68 69 6c 64 20 50 72 6f 6f 66 29     ard(Child Proof)
     b91:	0a 00                                               ..

00000b93 <__c.2609>:
     b93:	50 53 63 72 3a 09 70 6f 77 65 72 20 64 6f 77 6e     PScr:.power down
     ba3:	2f 72 65 6d 6f 74 65 20 77 61 6b 65 2d 75 70 0a     /remote wake-up.
     bb3:	00                                                  .

00000bb4 <__c.2607>:
     bb4:	34 2f 46 34 3a 09 73 77 69 74 63 68 20 74 6f 20     4/F4:.switch to 
     bc4:	4c 61 79 65 72 34 20 0a 00                          Layer4 ..

00000bcd <__c.2605>:
     bcd:	33 2f 46 33 3a 09 73 77 69 74 63 68 20 74 6f 20     3/F3:.switch to 
     bdd:	4c 61 79 65 72 33 20 0a 00                          Layer3 ..

00000be6 <__c.2603>:
     be6:	32 2f 46 32 3a 09 73 77 69 74 63 68 20 74 6f 20     2/F2:.switch to 
     bf6:	4c 61 79 65 72 32 20 0a 00                          Layer2 ..

00000bff <__c.2601>:
     bff:	31 2f 46 31 3a 09 73 77 69 74 63 68 20 74 6f 20     1/F1:.switch to 
     c0f:	4c 61 79 65 72 31 20 0a 00                          Layer1 ..

00000c18 <__c.2599>:
     c18:	30 2f 46 31 30 3a 09 73 77 69 74 63 68 20 74 6f     0/F10:.switch to
     c28:	20 4c 61 79 65 72 30 20 0a 00                        Layer0 ..

00000c32 <__c.2597>:
     c32:	6e 3a 09 74 6f 67 67 6c 65 20 4e 4b 52 4f 0a 00     n:.toggle NKRO..

00000c42 <__c.2595>:
     c42:	65 3a 09 70 72 69 6e 74 20 65 65 70 72 6f 6d 20     e:.print eeprom 
     c52:	63 6f 6e 66 69 67 0a 00                             config..

00000c5a <__c.2593>:
     c5a:	73 3a 09 70 72 69 6e 74 20 73 74 61 74 75 73 0a     s:.print status.
     c6a:	00                                                  .

00000c6b <__c.2591>:
     c6b:	74 3a 09 70 72 69 6e 74 20 74 69 6d 65 72 20 63     t:.print timer c
     c7b:	6f 75 6e 74 0a 00                                   ount..

00000c81 <__c.2589>:
     c81:	76 3a 09 70 72 69 6e 74 20 64 65 76 69 63 65 20     v:.print device 
     c91:	76 65 72 73 69 6f 6e 20 26 20 69 6e 66 6f 0a 00     version & info..

00000ca1 <__c.2587>:
     ca1:	7a 3a 09 74 6f 67 67 6c 65 20 73 6c 65 65 70 20     z:.toggle sleep 
     cb1:	4c 45 44 20 74 65 73 74 0a 00                       LED test..

00000cbb <__c.2585>:
     cbb:	6d 3a 09 74 6f 67 67 6c 65 20 6d 6f 75 73 65 20     m:.toggle mouse 
     ccb:	64 65 62 75 67 0a 00                                debug..

00000cd2 <__c.2583>:
     cd2:	6b 3a 09 74 6f 67 67 6c 65 20 6b 65 79 62 6f 61     k:.toggle keyboa
     ce2:	72 64 20 64 65 62 75 67 0a 00                       rd debug..

00000cec <__c.2581>:
     cec:	78 3a 09 74 6f 67 67 6c 65 20 6d 61 74 72 69 78     x:.toggle matrix
     cfc:	20 64 65 62 75 67 0a 00                              debug..

00000d04 <__c.2579>:
     d04:	64 3a 09 74 6f 67 67 6c 65 20 64 65 62 75 67 20     d:.toggle debug 
     d14:	65 6e 61 62 6c 65 0a 00                             enable..

00000d1c <__c.2577>:
     d1c:	63 3a 09 65 6e 74 65 72 20 63 6f 6e 73 6f 6c 65     c:.enter console
     d2c:	20 6d 6f 64 65 0a 00                                 mode..

00000d33 <__c.2575>:
     d33:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6d 6d 61 6e 64 20     ..----- Command 
     d43:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000d4f <__c.2708>:
     d4f:	0a 00                                               ..

00000d51 <__c.2706>:
     d51:	25 75 00                                            %u.

00000d54 <__c.2704>:
     d54:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000d5c <__c.2702>:
     d5c:	0a 00                                               ..

00000d5e <__c.2700>:
     d5e:	25 75 00                                            %u.

00000d61 <__c.2698>:
     d61:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     d71:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000d7d <__c.2696>:
     d7d:	0a 00                                               ..

00000d7f <__c.2694>:
     d7f:	25 75 00                                            %u.

00000d82 <__c.2692>:
     d82:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     d92:	20 00                                                .

00000d94 <__c.2690>:
     d94:	0a 00                                               ..

00000d96 <__c.2688>:
     d96:	25 75 00                                            %u.

00000d99 <__c.2686>:
     d99:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000da3 <__c.2684>:
     da3:	0a 00                                               ..

00000da5 <__c.2682>:
     da5:	25 75 00                                            %u.

00000da8 <__c.2680>:
     da8:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     db8:	20 00                                                .

00000dba <__c.2678>:
     dba:	0a 00                                               ..

00000dbc <__c.2676>:
     dbc:	25 75 00                                            %u.

00000dbf <__c.2674>:
     dbf:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     dcf:	20 00                                                .

00000dd1 <__c.2672>:
     dd1:	0a 00                                               ..

00000dd3 <__c.2670>:
     dd3:	25 75 00                                            %u.

00000dd6 <__c.2668>:
     dd6:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     de6:	74 72 6f 6c 3a 20 00                                trol: .

00000ded <__c.2666>:
     ded:	0a 00                                               ..

00000def <__c.2664>:
     def:	25 75 00                                            %u.

00000df2 <__c.2662>:
     df2:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     e02:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000e0b <__c.2660>:
     e0b:	0a 00                                               ..

00000e0d <__c.2658>:
     e0d:	25 30 32 58 00                                      %02X.

00000e12 <__c.2656>:
     e12:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     e22:	77 3a 20 00                                         w: .

00000e26 <__c.2653>:
     e26:	0a 00                                               ..

00000e28 <__c.2651>:
     e28:	25 75 00                                            %u.

00000e2b <__c.2649>:
     e2b:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000e34 <__c.2647>:
     e34:	0a 00                                               ..

00000e36 <__c.2645>:
     e36:	25 75 00                                            %u.

00000e39 <__c.2643>:
     e39:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000e45 <__c.2641>:
     e45:	0a 00                                               ..

00000e47 <__c.2639>:
     e47:	25 75 00                                            %u.

00000e4a <__c.2637>:
     e4a:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000e54 <__c.2635>:
     e54:	0a 00                                               ..

00000e56 <__c.2633>:
     e56:	25 75 00                                            %u.

00000e59 <__c.2631>:
     e59:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000e63 <__c.2629>:
     e63:	0a 00                                               ..

00000e65 <__c.2627>:
     e65:	25 30 32 58 00                                      %02X.

00000e6a <__c.2625>:
     e6a:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     e7a:	3a 20 00                                            : .

00000e7d <__c.2622>:
     e7d:	0a 00                                               ..

00000e7f <__c.2620>:
     e7f:	25 75 00                                            %u.

00000e82 <__c.2618>:
     e82:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000e92 <__c.2805>:
     e92:	3f 00                                               ?.

00000e94 <__c.2796>:
     e94:	4e 4b 52 4f 3a 20 64 69 73 61 62 6c 65 64 0a 00     NKRO: disabled..

00000ea4 <__c.2794>:
     ea4:	4e 4b 52 4f 3a 20 65 6e 61 62 6c 65 64 0a 00        NKRO: enabled..

00000eb3 <__c.2791>:
     eb3:	75 73 62 5f 6b 65 79 62 6f 61 72 64 5f 69 64 6c     usb_keyboard_idl
     ec3:	65 5f 63 6f 75 6e 74 3a 20 25 58 0a 00              e_count: %X..

00000ed0 <__c.2789>:
     ed0:	75 73 62 5f 6b 65 79 62 6f 61 72 64 5f 6c 65 64     usb_keyboard_led
     ee0:	73 3a 20 25 58 0a 00                                s: %X..

00000ee7 <__c.2787>:
     ee7:	55 44 49 4e 54 3a 20 25 58 0a 00                    UDINT: %X..

00000ef2 <__c.2785>:
     ef2:	55 44 49 45 4e 3a 20 25 58 0a 00                    UDIEN: %X..

00000efd <__c.2783>:
     efd:	55 44 43 4f 4e 3a 20 25 58 0a 00                    UDCON: %X..

00000f08 <__c.2781>:
     f08:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     f18:	58 0a 00                                            X..

00000f1b <__c.2779>:
     f1b:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     f2b:	6c 3a 20 25 58 0a 00                                l: %X..

00000f32 <__c.2777>:
     f32:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     f42:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000f4c <__c.2775>:
     f4c:	0a 0a 2d 2d 2d 2d 2d 20 53 74 61 74 75 73 20 2d     ..----- Status -
     f5c:	2d 2d 2d 2d 0a 00                                   ----..

00000f62 <__c.2772>:
     f62:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     f72:	6c 58 0a 00                                         lX..

00000f76 <__c.2769>:
     f76:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     f86:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     f96:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000fa4 <__c.2767>:
     fa4:	4f 50 54 49 4f 4e 53 3a 20 50 4a 52 43 20 42 4f     OPTIONS: PJRC BO
     fb4:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     fc4:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     fd4:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 35     E COMMAND NKRO 5
     fe4:	31 32 0a 00                                         12..

00000fe8 <__c.2765>:
     fe8:	42 55 49 4c 44 3a 20 30 39 31 31 31 35 62 2d 64     BUILD: 091115b-d
     ff8:	69 72 74 79 20 28 30 39 3a 30 39 3a 33 30 20 44     irty (09:09:30 D
    1008:	65 63 20 31 30 20 32 30 31 35 29 0a 00              ec 10 2015)..

00001015 <__c.2763>:
    1015:	56 49 44 3a 20 30 78 46 45 45 44 28 54 4d 4b 2f     VID: 0xFEED(TMK/
    1025:	43 75 62 29 20 50 49 44 3a 20 30 78 31 33 30 37     Cub) PID: 0x1307
    1035:	28 45 72 67 6f 64 6f 78 29 20 56 45 52 3a 20 30     (Ergodox) VER: 0
    1045:	78 30 30 30 31 0a 00                                x0001..

0000104c <__c.2761>:
    104c:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
    105c:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
    106c:	6f 72 20 45 72 67 6f 64 6f 78 0a 00                 or Ergodox..

00001078 <__c.2759>:
    1078:	0a 0a 2d 2d 2d 2d 2d 20 56 65 72 73 69 6f 6e 20     ..----- Version 
    1088:	2d 2d 2d 2d 2d 0a 00                                -----..

0000108f <__c.2756>:
    108f:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 64 69     .DEBUG: mouse di
    109f:	73 61 62 6c 65 64 2e 0a 00                          sabled...

000010a8 <__c.2754>:
    10a8:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 65 6e     .DEBUG: mouse en
    10b8:	61 62 6c 65 64 2e 0a 00                             abled...

000010c0 <__c.2751>:
    10c0:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
    10d0:	20 64 69 73 61 62 6c 65 64 2e 0a 00                  disabled...

000010dc <__c.2749>:
    10dc:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
    10ec:	20 65 6e 61 62 6c 65 64 2e 0a 00                     enabled...

000010f7 <__c.2746>:
    10f7:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 64     .DEBUG: matrix d
    1107:	69 73 61 62 6c 65 64 2e 0a 00                       isabled...

00001111 <__c.2744>:
    1111:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 65     .DEBUG: matrix e
    1121:	6e 61 62 6c 65 64 2e 0a 00                          nabled...

0000112a <__c.2741>:
    112a:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
    113a:	0a 00                                               ..

0000113c <__c.2739>:
    113c:	0a 44 45 42 55 47 3a 20 64 69 73 61 62 6c 65 64     .DEBUG: disabled
    114c:	2e 0a 00                                            ...

0000114f <__c.2736>:
    114f:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

0000115f <__c.2734>:
    115f:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
    116f:	61 64 65 72 2e 2e 2e 20 00                          ader... .

00001178 <__c.2731>:
    1178:	43 3e 20 00                                         C> .

0000117c <__c.2729>:
    117c:	0a 45 6e 74 65 72 20 43 6f 6e 73 6f 6c 65 20 4d     .Enter Console M
    118c:	6f 64 65 0a 00                                      ode..

00001191 <__c.2724>:
    1191:	55 6e 6c 6f 63 6b 65 64 2e 0a 00                    Unlocked...

0000119c <__c.2722>:
    119c:	4c 6f 63 6b 65 64 2e 0a 00                          Locked...

000011a5 <__c.2719>:
    11a5:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

000011b0 <__c.2715>:
    11b0:	53 6c 65 65 70 20 4c 45 44 20 74 65 73 74 0a 00     Sleep LED test..

000011c0 <breathing_table>:
    11c0:	00 00 00 00 00 00 00 00 00 00 00 01 02 04 06 0a     ................
    11d0:	0f 17 20 2c 3a 4a 5d 71 87 9d b3 c7 da e9 f5 fc     .. ,:J]q........
    11e0:	ff fc f5 e9 da c7 b3 9d 87 71 5d 4a 3a 2c 20 17     .........q]J:, .
    11f0:	0f 0a 06 04 02 01 00 00 00 00 00 00 00 00 00 00     ................

00001200 <__ctors_end>:
    1200:	11 24       	eor	r1, r1
    1202:	1f be       	out	0x3f, r1	; 63
    1204:	cf ef       	ldi	r28, 0xFF	; 255
    1206:	da e0       	ldi	r29, 0x0A	; 10
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	cd bf       	out	0x3d, r28	; 61

0000120c <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
    120c:	04 b6       	in	r0, 0x34	; 52
    120e:	03 fe       	sbrs	r0, 3
    1210:	24 c0       	rjmp	.+72     	; 0x125a <__do_copy_data>
    1212:	80 91 cb 01 	lds	r24, 0x01CB
    1216:	90 91 cc 01 	lds	r25, 0x01CC
    121a:	a0 91 cd 01 	lds	r26, 0x01CD
    121e:	b0 91 ce 01 	lds	r27, 0x01CE
    1222:	87 30       	cpi	r24, 0x07	; 7
    1224:	90 4b       	sbci	r25, 0xB0	; 176
    1226:	a7 40       	sbci	r26, 0x07	; 7
    1228:	b0 4b       	sbci	r27, 0xB0	; 176
    122a:	b9 f4       	brne	.+46     	; 0x125a <__do_copy_data>
        reset_key = 0;
    122c:	10 92 cb 01 	sts	0x01CB, r1
    1230:	10 92 cc 01 	sts	0x01CC, r1
    1234:	10 92 cd 01 	sts	0x01CD, r1
    1238:	10 92 ce 01 	sts	0x01CE, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
    123c:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
    123e:	84 b7       	in	r24, 0x34	; 52
    1240:	87 7f       	andi	r24, 0xF7	; 247
    1242:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
    1244:	88 e1       	ldi	r24, 0x18	; 24
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	80 93 60 00 	sts	0x0060, r24
    124e:	10 92 60 00 	sts	0x0060, r1
    1252:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
    1254:	e0 e0       	ldi	r30, 0x00	; 0
    1256:	ff e3       	ldi	r31, 0x3F	; 63
    1258:	09 95       	icall

0000125a <__do_copy_data>:
    125a:	11 e0       	ldi	r17, 0x01	; 1
    125c:	a0 e0       	ldi	r26, 0x00	; 0
    125e:	b1 e0       	ldi	r27, 0x01	; 1
    1260:	e8 e1       	ldi	r30, 0x18	; 24
    1262:	fb e5       	ldi	r31, 0x5B	; 91
    1264:	02 c0       	rjmp	.+4      	; 0x126a <__do_copy_data+0x10>
    1266:	05 90       	lpm	r0, Z+
    1268:	0d 92       	st	X+, r0
    126a:	a2 32       	cpi	r26, 0x22	; 34
    126c:	b1 07       	cpc	r27, r17
    126e:	d9 f7       	brne	.-10     	; 0x1266 <__do_copy_data+0xc>

00001270 <__do_clear_bss>:
    1270:	21 e0       	ldi	r18, 0x01	; 1
    1272:	a2 e2       	ldi	r26, 0x22	; 34
    1274:	b1 e0       	ldi	r27, 0x01	; 1
    1276:	01 c0       	rjmp	.+2      	; 0x127a <.do_clear_bss_start>

00001278 <.do_clear_bss_loop>:
    1278:	1d 92       	st	X+, r1

0000127a <.do_clear_bss_start>:
    127a:	ab 3c       	cpi	r26, 0xCB	; 203
    127c:	b2 07       	cpc	r27, r18
    127e:	e1 f7       	brne	.-8      	; 0x1278 <.do_clear_bss_loop>
    1280:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <main>
    1284:	0c 94 8a 2d 	jmp	0x5b14	; 0x5b14 <_exit>

00001288 <__bad_interrupt>:
    1288:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000128c <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
    128c:	ff 93       	push	r31
	push	ZL
    128e:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    1290:	e0 91 b5 01 	lds	r30, 0x01B5
	lds	ZH, xfunc_out+1	;/
    1294:	f0 91 b6 01 	lds	r31, 0x01B6
	sbiw	ZL, 0		;Skip if null
    1298:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
    129a:	09 f0       	breq	.+2      	; 0x129e <xputc+0x12>
	icall
    129c:	09 95       	icall
2:	pop	ZL
    129e:	ef 91       	pop	r30
	pop	ZH
    12a0:	ff 91       	pop	r31
	ret
    12a2:	08 95       	ret

000012a4 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    12a4:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    12a6:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    12a8:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <xputs+0xc>
	rcall	xputc
    12ac:	ef df       	rcall	.-34     	; 0x128c <xputc>
	rjmp	1b
    12ae:	fb cf       	rjmp	.-10     	; 0x12a6 <xputs+0x2>
2:	ret
    12b0:	08 95       	ret

000012b2 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    12b2:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    12b4:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    12b6:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    12b8:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    12ba:	0c c0       	rjmp	.+24     	; 0x12d4 <xitoa+0x22>
	neg	r20		;
    12bc:	41 95       	neg	r20
	sbrs	r25, 7		;
    12be:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <xitoa+0x22>
	ldi	r30, '-'	;
    12c2:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    12c4:	60 95       	com	r22
	com	r23		;
    12c6:	70 95       	com	r23
	com	r24		;
    12c8:	80 95       	com	r24
	com	r25		;
    12ca:	90 95       	com	r25
	adc	r22, r1		;
    12cc:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    12ce:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    12d0:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    12d2:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    12d4:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <xitoa+0x2a>
	neg	r18		;
    12d8:	21 95       	neg	r18
	ldi	r19, '0'	;/
    12da:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    12dc:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    12de:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    12e0:	66 0f       	add	r22, r22
	rol	r23		;
    12e2:	77 1f       	adc	r23, r23
	rol	r24		;
    12e4:	88 1f       	adc	r24, r24
	rol	r25		;
    12e6:	99 1f       	adc	r25, r25
	rol	r26		;
    12e8:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    12ea:	a4 17       	cp	r26, r20
	brcs	3f		;
    12ec:	10 f0       	brcs	.+4      	; 0x12f2 <xitoa+0x40>
	sub	r26, r20	;
    12ee:	a4 1b       	sub	r26, r20
	inc	r22		;
    12f0:	63 95       	inc	r22
3:	dec	r21		;
    12f2:	5a 95       	dec	r21
	brne	2b		;/
    12f4:	a9 f7       	brne	.-22     	; 0x12e0 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    12f6:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    12f8:	08 f0       	brcs	.+2      	; 0x12fc <xitoa+0x4a>
	subi	r26, -7		;
    12fa:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    12fc:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    12fe:	af 93       	push	r26
	inc	r31		;/
    1300:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    1302:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    1304:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    1306:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    1308:	91 05       	cpc	r25, r1
	brne	1b		;/
    130a:	41 f7       	brne	.-48     	; 0x12dc <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    130c:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    130e:	11 f4       	brne	.+4      	; 0x1314 <xitoa+0x62>
	push	r30		;
    1310:	ef 93       	push	r30
	inc	r31		;/
    1312:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    1314:	f2 17       	cp	r31, r18
	brcc	6f		;
    1316:	18 f4       	brcc	.+6      	; 0x131e <xitoa+0x6c>
	push	r19		;
    1318:	3f 93       	push	r19
	inc	r31		;
    131a:	f3 95       	inc	r31
	rjmp	5b		;/
    131c:	fb cf       	rjmp	.-10     	; 0x1314 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    131e:	8f 91       	pop	r24
	rcall	xputc		;
    1320:	b5 df       	rcall	.-150    	; 0x128c <xputc>
	dec	r31		;
    1322:	fa 95       	dec	r31
	brne	6b		;/
    1324:	e1 f7       	brne	.-8      	; 0x131e <xitoa+0x6c>

	ret
    1326:	08 95       	ret

00001328 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
    1328:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    132a:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    132c:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    132e:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    1330:	21 f0       	breq	.+8      	; 0x133a <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
    1332:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    1334:	19 f0       	breq	.+6      	; 0x133c <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
    1336:	aa df       	rcall	.-172    	; 0x128c <xputc>
	rjmp	0b		;/
    1338:	f9 cf       	rjmp	.-14     	; 0x132c <xvprintf+0x4>
90:	ret
    133a:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    133c:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    133e:	e8 94       	clt
	_LPMI	r21		;Get flags
    1340:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    1342:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    1344:	c1 f3       	breq	.-16     	; 0x1336 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
    1346:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    1348:	11 f4       	brne	.+4      	; 0x134e <xvprintf+0x26>
	set			;/
    134a:	68 94       	set
22:	_LPMI	r21		;Get width
    134c:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    134e:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    1350:	48 f4       	brcc	.+18     	; 0x1364 <xvprintf+0x3c>
	subi	r21, '0'	;
    1352:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    1354:	90 f3       	brcs	.-28     	; 0x133a <xvprintf+0x12>
	lsl	r18		;
    1356:	22 0f       	add	r18, r18
	mov	r0, r18		;
    1358:	02 2e       	mov	r0, r18
	lsl	r18		;
    135a:	22 0f       	add	r18, r18
	lsl	r18		;
    135c:	22 0f       	add	r18, r18
	add	r18, r0		;
    135e:	20 0d       	add	r18, r0
	add	r18, r21	;
    1360:	25 0f       	add	r18, r21
	rjmp	22b		;/
    1362:	f4 cf       	rjmp	.-24     	; 0x134c <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
    1364:	0e f4       	brtc	.+2      	; 0x1368 <xvprintf+0x40>
	neg	r18		;
    1366:	21 95       	neg	r18
25:	ld	r24, Y+		;
    1368:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    136a:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    136c:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    136e:	19 f3       	breq	.-58     	; 0x1336 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
    1370:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    1372:	29 f1       	breq	.+74     	; 0x13be <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
    1374:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    1376:	59 f1       	breq	.+86     	; 0x13ce <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    1378:	bc 01       	movw	r22, r24
	clr	r24		;
    137a:	88 27       	eor	r24, r24
	clr	r25		;
    137c:	99 27       	eor	r25, r25
	clt			;/
    137e:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    1380:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    1382:	21 f4       	brne	.+8      	; 0x138c <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
    1384:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    1386:	99 91       	ld	r25, Y+
	set			;
    1388:	68 94       	set
	_LPMI	r21		;/
    138a:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    138c:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    138e:	39 f4       	brne	.+14     	; 0x139e <xvprintf+0x76>
	ldi	r20, -10	;
    1390:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    1392:	7e f0       	brts	.+30     	; 0x13b2 <xvprintf+0x8a>
	sbrs	r23, 7		;
    1394:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <xvprintf+0x8a>
	ldi	r24, -1		;
    1398:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    139a:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    139c:	0a c0       	rjmp	.+20     	; 0x13b2 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    139e:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    13a0:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    13a2:	39 f0       	breq	.+14     	; 0x13b2 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
    13a4:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    13a6:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    13a8:	21 f0       	breq	.+8      	; 0x13b2 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
    13aa:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    13ac:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <xvprintf+0x8a>
	ret			;abort
    13b0:	08 95       	ret
40:	push	ZH		;Output the value
    13b2:	ff 93       	push	r31
	push	ZL		;
    13b4:	ef 93       	push	r30
	rcall	xitoa		;
    13b6:	7d df       	rcall	.-262    	; 0x12b2 <xitoa>
42:	pop	ZL		;
    13b8:	ef 91       	pop	r30
	pop	ZH		;
    13ba:	ff 91       	pop	r31
	rjmp	0b		;/
    13bc:	b7 cf       	rjmp	.-146    	; 0x132c <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
    13be:	ff 93       	push	r31
	push	ZL
    13c0:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    13c2:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    13c4:	81 91       	ld	r24, Z+
	cpi	r24, 0
    13c6:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    13c8:	b9 f3       	breq	.-18     	; 0x13b8 <xvprintf+0x90>
	rcall	xputc
    13ca:	60 df       	rcall	.-320    	; 0x128c <xputc>
	rjmp	51b
    13cc:	fb cf       	rjmp	.-10     	; 0x13c4 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
    13ce:	ff 93       	push	r31
	push	ZL
    13d0:	ef 93       	push	r30
	rcall	xputs
    13d2:	68 df       	rcall	.-304    	; 0x12a4 <xputs>
	rjmp	42b
    13d4:	f1 cf       	rjmp	.-30     	; 0x13b8 <xvprintf+0x90>

000013d6 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
    13d6:	df 93       	push	r29
	push	YL
    13d8:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    13da:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    13dc:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    13de:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    13e0:	a3 df       	rcall	.-186    	; 0x1328 <xvprintf>
	pop	YL
    13e2:	cf 91       	pop	r28
	pop	YH
    13e4:	df 91       	pop	r29
	ret
    13e6:	08 95       	ret

000013e8 <matrix_power_up>:

void keyboard_init(void);
void keyboard_task(void);
void keyboard_set_leds(uint8_t leds);

__attribute__ ((weak)) void matrix_power_up(void) {}
    13e8:	08 95       	ret

000013ea <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    13ea:	08 95       	ret

000013ec <action_function>:
    ACTION_LAYER_SET(0, ON_PRESS),                  // FN4 - set Layer0
};

void action_function(keyrecord_t *event, uint8_t id, uint8_t opt)
{
    if (id == TEENSY_KEY) {
    13ec:	61 11       	cpse	r22, r1
    13ee:	15 c0       	rjmp	.+42     	; 0x141a <action_function+0x2e>
        clear_keyboard();
    13f0:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <clear_keyboard>
        print("\n\nJump to bootloader... ");
    13f4:	82 e6       	ldi	r24, 0x62	; 98
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13fc:	2f ef       	ldi	r18, 0xFF	; 255
    13fe:	84 e3       	ldi	r24, 0x34	; 52
    1400:	9c e0       	ldi	r25, 0x0C	; 12
    1402:	21 50       	subi	r18, 0x01	; 1
    1404:	80 40       	sbci	r24, 0x00	; 0
    1406:	90 40       	sbci	r25, 0x00	; 0
    1408:	e1 f7       	brne	.-8      	; 0x1402 <action_function+0x16>
    140a:	00 c0       	rjmp	.+0      	; 0x140c <action_function+0x20>
    140c:	00 00       	nop
        _delay_ms(250);
        bootloader_jump(); // should not return
    140e:	0e 94 3b 20 	call	0x4076	; 0x4076 <bootloader_jump>
        print("not supported.\n");
    1412:	82 e5       	ldi	r24, 0x52	; 82
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <xputs>
    141a:	08 95       	ret

0000141c <keymap_key_to_keycode>:
#define KEYMAPS_SIZE    (sizeof(keymaps) / sizeof(keymaps[0]))
#define FN_ACTIONS_SIZE (sizeof(fn_actions) / sizeof(fn_actions[0]))

/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    141c:	27 2f       	mov	r18, r23
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    if (layer < KEYMAPS_SIZE) {
    1422:	84 30       	cpi	r24, 0x04	; 4
    1424:	60 f4       	brcc	.+24     	; 0x143e <keymap_key_to_keycode+0x22>
        return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    1426:	96 e0       	ldi	r25, 0x06	; 6
    1428:	92 9f       	mul	r25, r18
    142a:	f0 01       	movw	r30, r0
    142c:	93 9f       	mul	r25, r19
    142e:	f0 0d       	add	r31, r0
    1430:	11 24       	eor	r1, r1
    1432:	94 e5       	ldi	r25, 0x54	; 84
    1434:	89 9f       	mul	r24, r25
    1436:	e0 0d       	add	r30, r0
    1438:	f1 1d       	adc	r31, r1
    143a:	11 24       	eor	r1, r1
    143c:	06 c0       	rjmp	.+12     	; 0x144a <keymap_key_to_keycode+0x2e>
    } else {
        // fall back to layer 0
        return pgm_read_byte(&keymaps[0][(key.row)][(key.col)]);
    143e:	86 e0       	ldi	r24, 0x06	; 6
    1440:	82 9f       	mul	r24, r18
    1442:	f0 01       	movw	r30, r0
    1444:	83 9f       	mul	r24, r19
    1446:	f0 0d       	add	r31, r0
    1448:	11 24       	eor	r1, r1
    144a:	e6 0f       	add	r30, r22
    144c:	f7 1f       	adc	r31, r23
    144e:	eb 57       	subi	r30, 0x7B	; 123
    1450:	fe 4f       	sbci	r31, 0xFE	; 254
    1452:	84 91       	lpm	r24, Z
    }
}
    1454:	08 95       	ret

00001456 <keymap_fn_to_action>:
#else
/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    action_t action;
    if (FN_INDEX(keycode) < FN_ACTIONS_SIZE) {
    1456:	e8 2f       	mov	r30, r24
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	e0 5c       	subi	r30, 0xC0	; 192
    145c:	f1 09       	sbc	r31, r1
    145e:	e5 30       	cpi	r30, 0x05	; 5
    1460:	f1 05       	cpc	r31, r1
    1462:	38 f4       	brcc	.+14     	; 0x1472 <keymap_fn_to_action+0x1c>
        action.code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	e5 58       	subi	r30, 0x85	; 133
    146a:	fe 4f       	sbci	r31, 0xFE	; 254
    146c:	85 91       	lpm	r24, Z+
    146e:	94 91       	lpm	r25, Z
    1470:	08 95       	ret
    } else {
        action.code = ACTION_NO;
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    }
    return action;
}
    1476:	08 95       	ret

00001478 <unselect_rows>:
 * pin: A0  A1  A2  A3  A4  A5  A6
 */
static void unselect_rows(void)
{
    // unselect on mcp23018
    if (mcp23018_status) { // if there was an error
    1478:	80 91 01 01 	lds	r24, 0x0101
    147c:	81 11       	cpse	r24, r1
    147e:	1a c0       	rjmp	.+52     	; 0x14b4 <unselect_rows+0x3c>
        // do nothing
    } else {
        // set all rows hi-Z : 1
        mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    1480:	80 e4       	ldi	r24, 0x40	; 64
    1482:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>
    1486:	80 93 01 01 	sts	0x0101, r24
    148a:	81 11       	cpse	r24, r1
    148c:	11 c0       	rjmp	.+34     	; 0x14b0 <unselect_rows+0x38>
        mcp23018_status = i2c_write(GPIOA);             if (mcp23018_status) goto out;
    148e:	82 e1       	ldi	r24, 0x12	; 18
    1490:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    1494:	80 93 01 01 	sts	0x0101, r24
    1498:	81 11       	cpse	r24, r1
    149a:	0a c0       	rjmp	.+20     	; 0x14b0 <unselect_rows+0x38>
        mcp23018_status = i2c_write( 0xFF
    149c:	80 91 3f 01 	lds	r24, 0x013F
    14a0:	87 95       	ror	r24
    14a2:	88 27       	eor	r24, r24
    14a4:	87 95       	ror	r24
    14a6:	80 95       	com	r24
    14a8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    14ac:	80 93 01 01 	sts	0x0101, r24
                              & ~(ergodox_left_led_3<<LEFT_LED_3_SHIFT)
                          );                            if (mcp23018_status) goto out;
    out:
        i2c_stop();
    14b0:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <i2c_stop>
    }

    // unselect on teensy
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRB  &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3);
    14b4:	84 b1       	in	r24, 0x04	; 4
    14b6:	80 7f       	andi	r24, 0xF0	; 240
    14b8:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3);
    14ba:	85 b1       	in	r24, 0x05	; 5
    14bc:	80 7f       	andi	r24, 0xF0	; 240
    14be:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<2 | 1<<3);
    14c0:	8a b1       	in	r24, 0x0a	; 10
    14c2:	83 7f       	andi	r24, 0xF3	; 243
    14c4:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~(1<<2 | 1<<3);
    14c6:	8b b1       	in	r24, 0x0b	; 11
    14c8:	83 7f       	andi	r24, 0xF3	; 243
    14ca:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<6);
    14cc:	3e 98       	cbi	0x07, 6	; 7
    PORTC &= ~(1<<6);
    14ce:	46 98       	cbi	0x08, 6	; 8
    14d0:	08 95       	ret

000014d2 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    init_ergodox();
    14d2:	0e 94 12 0c 	call	0x1824	; 0x1824 <init_ergodox>
    mcp23018_status = init_mcp23018();
    14d6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <init_mcp23018>
    14da:	80 93 01 01 	sts	0x0101, r24
    ergodox_blink_all_leds();
    14de:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <ergodox_blink_all_leds>
    unselect_rows();
    14e2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <unselect_rows>
    // init on mcp23018
    // not needed, already done as part of init_mcp23018()

    // init on teensy
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
    14e6:	80 b3       	in	r24, 0x10	; 16
    14e8:	8c 70       	andi	r24, 0x0C	; 12
    14ea:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
    14ec:	81 b3       	in	r24, 0x11	; 17
    14ee:	83 6f       	ori	r24, 0xF3	; 243
    14f0:	81 bb       	out	0x11, r24	; 17
    14f2:	e1 e3       	ldi	r30, 0x31	; 49
    14f4:	f1 e0       	ldi	r31, 0x01	; 1
    14f6:	a3 e2       	ldi	r26, 0x23	; 35
    14f8:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    14fa:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    14fc:	1d 92       	st	X+, r1
    ergodox_blink_all_leds();
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	ef 33       	cpi	r30, 0x3F	; 63
    1502:	f8 07       	cpc	r31, r24
    1504:	d1 f7       	brne	.-12     	; 0x14fa <matrix_init+0x28>

#ifdef DEBUG_MATRIX_SCAN_RATE
    matrix_timer = timer_read32();
    matrix_scan_count = 0;
#endif
}
    1506:	08 95       	ret

00001508 <matrix_scan>:

uint8_t matrix_scan(void)
{
    1508:	9f 92       	push	r9
    150a:	af 92       	push	r10
    150c:	bf 92       	push	r11
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    if (mcp23018_status) { // if there was an error
    151e:	80 91 01 01 	lds	r24, 0x0101
    1522:	88 23       	and	r24, r24
    1524:	e1 f0       	breq	.+56     	; 0x155e <matrix_scan+0x56>
        if (++mcp23018_reset_loop == 0) {
    1526:	80 91 22 01 	lds	r24, 0x0122
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	80 93 22 01 	sts	0x0122, r24
    1530:	81 11       	cpse	r24, r1
    1532:	15 c0       	rjmp	.+42     	; 0x155e <matrix_scan+0x56>
            // since mcp23018_reset_loop is 8 bit - we'll try to reset once in 255 matrix scans
            // this will be approx bit more frequent than once per second
            print("trying to reset mcp23018\n");
    1534:	8b e3       	ldi	r24, 0x3B	; 59
    1536:	93 e0       	ldi	r25, 0x03	; 3
    1538:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            mcp23018_status = init_mcp23018();
    153c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <init_mcp23018>
    1540:	80 93 01 01 	sts	0x0101, r24
            if (mcp23018_status) {
    1544:	88 23       	and	r24, r24
    1546:	29 f0       	breq	.+10     	; 0x1552 <matrix_scan+0x4a>
                print("left side not responding\n");
    1548:	81 e2       	ldi	r24, 0x21	; 33
    154a:	93 e0       	ldi	r25, 0x03	; 3
    154c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    1550:	06 c0       	rjmp	.+12     	; 0x155e <matrix_scan+0x56>
            } else {
                print("left side attached\n");
    1552:	8d e0       	ldi	r24, 0x0D	; 13
    1554:	93 e0       	ldi	r25, 0x03	; 3
    1556:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
                ergodox_blink_all_leds();
    155a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <ergodox_blink_all_leds>
    matrix_scan_count = 0;
#endif
}

uint8_t matrix_scan(void)
{
    155e:	03 e2       	ldi	r16, 0x23	; 35
    1560:	11 e0       	ldi	r17, 0x01	; 1
    1562:	c0 e0       	ldi	r28, 0x00	; 0
    1564:	d0 e0       	ldi	r29, 0x00	; 0
    1566:	bb 24       	eor	r11, r11
    1568:	b3 94       	inc	r11
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	a8 2e       	mov	r10, r24
        } else {
            // set active row low  : 0
            // set other rows hi-Z : 1
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);        if (mcp23018_status) goto out;
            mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
            mcp23018_status = i2c_write( 0xFF & ~(1<<row) 
    156e:	cc 24       	eor	r12, r12
    1570:	c3 94       	inc	r12
    1572:	d1 2c       	mov	r13, r1
        select_row(i);
        matrix_row_t cols = read_cols(i);
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1574:	2e ef       	ldi	r18, 0xFE	; 254
    1576:	e2 2e       	mov	r14, r18
    1578:	22 e0       	ldi	r18, 0x02	; 2
    157a:	f2 2e       	mov	r15, r18
    PORTC &= ~(1<<6);
}

static void select_row(uint8_t row)
{
    if (row < 7) {
    157c:	c7 30       	cpi	r28, 0x07	; 7
    157e:	30 f5       	brcc	.+76     	; 0x15cc <matrix_scan+0xc4>
        // select on mcp23018
        if (mcp23018_status) { // if there was an error
    1580:	80 91 01 01 	lds	r24, 0x0101
    1584:	81 11       	cpse	r24, r1
    1586:	68 c0       	rjmp	.+208    	; 0x1658 <matrix_scan+0x150>
            // do nothing
        } else {
            // set active row low  : 0
            // set other rows hi-Z : 1
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);        if (mcp23018_status) goto out;
    1588:	80 e4       	ldi	r24, 0x40	; 64
    158a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>
    158e:	80 93 01 01 	sts	0x0101, r24
    1592:	81 11       	cpse	r24, r1
    1594:	18 c0       	rjmp	.+48     	; 0x15c6 <matrix_scan+0xbe>
            mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
    1596:	82 e1       	ldi	r24, 0x12	; 18
    1598:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    159c:	80 93 01 01 	sts	0x0101, r24
    15a0:	81 11       	cpse	r24, r1
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <matrix_scan+0xbe>
            mcp23018_status = i2c_write( 0xFF & ~(1<<row) 
    15a4:	80 91 3f 01 	lds	r24, 0x013F
    15a8:	87 95       	ror	r24
    15aa:	88 27       	eor	r24, r24
    15ac:	87 95       	ror	r24
    15ae:	96 01       	movw	r18, r12
    15b0:	0c 2e       	mov	r0, r28
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <matrix_scan+0xae>
    15b4:	22 0f       	add	r18, r18
    15b6:	0a 94       	dec	r0
    15b8:	ea f7       	brpl	.-6      	; 0x15b4 <matrix_scan+0xac>
    15ba:	82 2b       	or	r24, r18
    15bc:	80 95       	com	r24
    15be:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    15c2:	80 93 01 01 	sts	0x0101, r24
                                  & ~(ergodox_left_led_3<<LEFT_LED_3_SHIFT)
                              );                                if (mcp23018_status) goto out;
        out:
            i2c_stop();
    15c6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <i2c_stop>
    15ca:	46 c0       	rjmp	.+140    	; 0x1658 <matrix_scan+0x150>
        }
    } else {
        // select on teensy
        // Output low(DDR:1, PORT:0) to select
        switch (row) {
    15cc:	ca 30       	cpi	r28, 0x0A	; 10
    15ce:	a1 f0       	breq	.+40     	; 0x15f8 <matrix_scan+0xf0>
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <matrix_scan+0xd4>
    15d2:	c8 30       	cpi	r28, 0x08	; 8
    15d4:	59 f0       	breq	.+22     	; 0x15ec <matrix_scan+0xe4>
    15d6:	c9 30       	cpi	r28, 0x09	; 9
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <matrix_scan+0xea>
    15da:	05 c0       	rjmp	.+10     	; 0x15e6 <matrix_scan+0xde>
    15dc:	cc 30       	cpi	r28, 0x0C	; 12
    15de:	89 f0       	breq	.+34     	; 0x1602 <matrix_scan+0xfa>
    15e0:	70 f0       	brcs	.+28     	; 0x15fe <matrix_scan+0xf6>
    15e2:	cd 30       	cpi	r28, 0x0D	; 13
    15e4:	89 f0       	breq	.+34     	; 0x1608 <matrix_scan+0x100>
            case 7:
                DDRB  |= (1<<0);
    15e6:	20 9a       	sbi	0x04, 0	; 4
                PORTB &= ~(1<<0);
    15e8:	28 98       	cbi	0x05, 0	; 5
    15ea:	10 c0       	rjmp	.+32     	; 0x160c <matrix_scan+0x104>
                break;
            case 8:
                DDRB  |= (1<<1);
    15ec:	21 9a       	sbi	0x04, 1	; 4
                PORTB &= ~(1<<1);
    15ee:	29 98       	cbi	0x05, 1	; 5
    15f0:	0d c0       	rjmp	.+26     	; 0x160c <matrix_scan+0x104>
                break;
            case 9:
                DDRB  |= (1<<2);
    15f2:	22 9a       	sbi	0x04, 2	; 4
                PORTB &= ~(1<<2);
    15f4:	2a 98       	cbi	0x05, 2	; 5
    15f6:	0a c0       	rjmp	.+20     	; 0x160c <matrix_scan+0x104>
                break;
            case 10:
                DDRB  |= (1<<3);
    15f8:	23 9a       	sbi	0x04, 3	; 4
                PORTB &= ~(1<<3);
    15fa:	2b 98       	cbi	0x05, 3	; 5
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <matrix_scan+0x104>
                break;
            case 11:
                DDRD  |= (1<<2);
    15fe:	52 9a       	sbi	0x0a, 2	; 10
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <matrix_scan+0xfc>
                PORTD &= ~(1<<3);
                break;
            case 12:
                DDRD  |= (1<<3);
    1602:	53 9a       	sbi	0x0a, 3	; 10
                PORTD &= ~(1<<3);
    1604:	5b 98       	cbi	0x0b, 3	; 11
    1606:	02 c0       	rjmp	.+4      	; 0x160c <matrix_scan+0x104>
                break;
            case 13:
                DDRC  |= (1<<6);
    1608:	3e 9a       	sbi	0x07, 6	; 7
                PORTC &= ~(1<<6);
    160a:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    160c:	e0 ea       	ldi	r30, 0xA0	; 160
    160e:	ea 95       	dec	r30
    1610:	f1 f7       	brne	.-4      	; 0x160e <matrix_scan+0x106>
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
            (PINF&(1<<0) ? 0 : (1<<0)) |
    1612:	8f b1       	in	r24, 0x0f	; 15
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1614:	79 99       	sbic	0x0f, 1	; 15
    1616:	7f c0       	rjmp	.+254    	; 0x1716 <matrix_scan+0x20e>
    1618:	92 e0       	ldi	r25, 0x02	; 2
            (PINF&(1<<0) ? 0 : (1<<0)) |
    161a:	81 70       	andi	r24, 0x01	; 1
    161c:	8b 25       	eor	r24, r11
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    161e:	89 2b       	or	r24, r25
    1620:	7c 9b       	sbis	0x0f, 4	; 15
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <matrix_scan+0x120>
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	01 c0       	rjmp	.+2      	; 0x162a <matrix_scan+0x122>
    1628:	94 e0       	ldi	r25, 0x04	; 4
    162a:	89 2b       	or	r24, r25
    162c:	7d 9b       	sbis	0x0f, 5	; 15
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <matrix_scan+0x12c>
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <matrix_scan+0x12e>
    1634:	98 e0       	ldi	r25, 0x08	; 8
    1636:	89 2b       	or	r24, r25
    1638:	7e 9b       	sbis	0x0f, 6	; 15
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <matrix_scan+0x138>
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <matrix_scan+0x13a>
    1640:	90 e1       	ldi	r25, 0x10	; 16
    1642:	89 2b       	or	r24, r25
            (PINF&(1<<0) ? 0 : (1<<0)) |
            (PINF&(1<<1) ? 0 : (1<<1)) |
            (PINF&(1<<4) ? 0 : (1<<2)) |
            (PINF&(1<<5) ? 0 : (1<<3)) |
            (PINF&(1<<6) ? 0 : (1<<4)) |
            (PINF&(1<<7) ? 0 : (1<<5)) ;
    1644:	9f b1       	in	r25, 0x0f	; 15
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1646:	90 95       	com	r25
    1648:	99 1f       	adc	r25, r25
    164a:	99 27       	eor	r25, r25
    164c:	99 1f       	adc	r25, r25
    164e:	92 95       	swap	r25
    1650:	99 0f       	add	r25, r25
    1652:	90 7e       	andi	r25, 0xE0	; 224
    1654:	89 2b       	or	r24, r25
    1656:	10 c0       	rjmp	.+32     	; 0x1678 <matrix_scan+0x170>
}

static matrix_row_t read_cols(uint8_t row)
{
    if (row < 7) {
        if (mcp23018_status) { // if there was an error
    1658:	80 91 01 01 	lds	r24, 0x0101
    165c:	81 11       	cpse	r24, r1
    165e:	70 c0       	rjmp	.+224    	; 0x1740 <matrix_scan+0x238>
            return 0;
        } else {
            uint8_t data = 0;
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    1660:	80 e4       	ldi	r24, 0x40	; 64
    1662:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>
    1666:	80 93 01 01 	sts	0x0101, r24
    166a:	88 23       	and	r24, r24
    166c:	09 f4       	brne	.+2      	; 0x1670 <matrix_scan+0x168>
    166e:	55 c0       	rjmp	.+170    	; 0x171a <matrix_scan+0x212>
{
    if (row < 7) {
        if (mcp23018_status) { // if there was an error
            return 0;
        } else {
            uint8_t data = 0;
    1670:	91 2c       	mov	r9, r1
            mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
            mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
            data = i2c_readNak();
            data = ~data;
        out:
            i2c_stop();
    1672:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <i2c_stop>
            return data;
    1676:	89 2d       	mov	r24, r9
#endif

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        matrix_row_t cols = read_cols(i);
        if (matrix_debouncing[i] != cols) {
    1678:	f8 01       	movw	r30, r16
    167a:	90 81       	ld	r25, Z
    167c:	98 17       	cp	r25, r24
    167e:	39 f1       	breq	.+78     	; 0x16ce <matrix_scan+0x1c6>
            matrix_debouncing[i] = cols;
    1680:	80 83       	st	Z, r24
            if (debouncing) {
    1682:	80 91 00 01 	lds	r24, 0x0100
    1686:	88 23       	and	r24, r24
    1688:	01 f1       	breq	.+64     	; 0x16ca <matrix_scan+0x1c2>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    168a:	80 91 b3 01 	lds	r24, 0x01B3
    168e:	80 ff       	sbrs	r24, 0
    1690:	04 c0       	rjmp	.+8      	; 0x169a <matrix_scan+0x192>
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	93 e0       	ldi	r25, 0x03	; 3
    1696:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    169a:	80 91 b3 01 	lds	r24, 0x01B3
    169e:	80 ff       	sbrs	r24, 0
    16a0:	0c c0       	rjmp	.+24     	; 0x16ba <matrix_scan+0x1b2>
    16a2:	80 91 00 01 	lds	r24, 0x0100
    16a6:	1f 92       	push	r1
    16a8:	8f 93       	push	r24
    16aa:	ff 92       	push	r15
    16ac:	ef 92       	push	r14
    16ae:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	80 91 b3 01 	lds	r24, 0x01B3
    16be:	80 ff       	sbrs	r24, 0
    16c0:	04 c0       	rjmp	.+8      	; 0x16ca <matrix_scan+0x1c2>
    16c2:	8c ef       	ldi	r24, 0xFC	; 252
    16c4:	92 e0       	ldi	r25, 0x02	; 2
    16c6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            }
            debouncing = DEBOUNCE;
    16ca:	a0 92 00 01 	sts	0x0100, r10
        }
        unselect_rows();
    16ce:	0e 94 3c 0a 	call	0x1478	; 0x1478 <unselect_rows>
    16d2:	21 96       	adiw	r28, 0x01	; 1
    16d4:	0f 5f       	subi	r16, 0xFF	; 255
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
            ergodox_board_led_on();
            break;
    }
#endif

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    16d8:	ce 30       	cpi	r28, 0x0E	; 14
    16da:	d1 05       	cpc	r29, r1
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <matrix_scan+0x1d8>
    16de:	4e cf       	rjmp	.-356    	; 0x157c <matrix_scan+0x74>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    16e0:	80 91 00 01 	lds	r24, 0x0100
    16e4:	88 23       	and	r24, r24
    16e6:	71 f1       	breq	.+92     	; 0x1744 <matrix_scan+0x23c>
        if (--debouncing) {
    16e8:	81 50       	subi	r24, 0x01	; 1
    16ea:	80 93 00 01 	sts	0x0100, r24
    16ee:	88 23       	and	r24, r24
    16f0:	39 f0       	breq	.+14     	; 0x1700 <matrix_scan+0x1f8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16f2:	8f e9       	ldi	r24, 0x9F	; 159
    16f4:	9f e0       	ldi	r25, 0x0F	; 15
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <matrix_scan+0x1ee>
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <matrix_scan+0x1f4>
    16fc:	00 00       	nop
    16fe:	22 c0       	rjmp	.+68     	; 0x1744 <matrix_scan+0x23c>
    1700:	a1 e3       	ldi	r26, 0x31	; 49
    1702:	b1 e0       	ldi	r27, 0x01	; 1
    1704:	e3 e2       	ldi	r30, 0x23	; 35
    1706:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    1708:	81 91       	ld	r24, Z+
    170a:	8d 93       	st	X+, r24

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	e1 33       	cpi	r30, 0x31	; 49
    1710:	f9 07       	cpc	r31, r25
    1712:	d1 f7       	brne	.-12     	; 0x1708 <matrix_scan+0x200>
    1714:	17 c0       	rjmp	.+46     	; 0x1744 <matrix_scan+0x23c>
            return data;
        }
    } else {
        _delay_us(30);  // without this wait read unstable value.
        // read from teensy
        return
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	80 cf       	rjmp	.-256    	; 0x161a <matrix_scan+0x112>
        if (mcp23018_status) { // if there was an error
            return 0;
        } else {
            uint8_t data = 0;
            mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
            mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
    171a:	83 e1       	ldi	r24, 0x13	; 19
    171c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    1720:	80 93 01 01 	sts	0x0101, r24
    1724:	81 11       	cpse	r24, r1
    1726:	a4 cf       	rjmp	.-184    	; 0x1670 <matrix_scan+0x168>
            mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
    1728:	81 e4       	ldi	r24, 0x41	; 65
    172a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>
    172e:	80 93 01 01 	sts	0x0101, r24
    1732:	81 11       	cpse	r24, r1
    1734:	9d cf       	rjmp	.-198    	; 0x1670 <matrix_scan+0x168>
            data = i2c_readNak();
    1736:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <i2c_readNak>
            data = ~data;
    173a:	98 2e       	mov	r9, r24
    173c:	90 94       	com	r9
    173e:	99 cf       	rjmp	.-206    	; 0x1672 <matrix_scan+0x16a>

static matrix_row_t read_cols(uint8_t row)
{
    if (row < 7) {
        if (mcp23018_status) { // if there was an error
            return 0;
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	9a cf       	rjmp	.-204    	; 0x1678 <matrix_scan+0x170>
            }
        }
    }

    return 1;
}
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	df 90       	pop	r13
    1754:	cf 90       	pop	r12
    1756:	bf 90       	pop	r11
    1758:	af 90       	pop	r10
    175a:	9f 90       	pop	r9
    175c:	08 95       	ret

0000175e <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    175e:	e8 2f       	mov	r30, r24
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	ef 5c       	subi	r30, 0xCF	; 207
    1764:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1766:	80 81       	ld	r24, Z
    1768:	08 95       	ret

0000176a <matrix_print>:

void matrix_print(void)
{
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    177a:	85 ee       	ldi	r24, 0xE5	; 229
    177c:	92 e0       	ldi	r25, 0x02	; 2
    177e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    1782:	31 e3       	ldi	r19, 0x31	; 49
    1784:	e3 2e       	mov	r14, r19
    1786:	31 e0       	ldi	r19, 0x01	; 1
    1788:	f3 2e       	mov	r15, r19
    178a:	c0 e0       	ldi	r28, 0x00	; 0
    178c:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    178e:	40 ee       	ldi	r20, 0xE0	; 224
    1790:	c4 2e       	mov	r12, r20
    1792:	42 e0       	ldi	r20, 0x02	; 2
    1794:	d4 2e       	mov	r13, r20
        pbin_reverse16(matrix_get_row(row));
    1796:	07 ed       	ldi	r16, 0xD7	; 215
    1798:	12 e0       	ldi	r17, 0x02	; 2

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	df 92       	push	r13
    17a0:	cf 92       	push	r12
    17a2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    17a6:	8d ed       	ldi	r24, 0xDD	; 221
    17a8:	92 e0       	ldi	r25, 0x02	; 2
    17aa:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    17ae:	f7 01       	movw	r30, r14
    17b0:	81 91       	ld	r24, Z+
    17b2:	7f 01       	movw	r14, r30
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <bitrev16>
    17ba:	9f 93       	push	r25
    17bc:	8f 93       	push	r24
    17be:	1f 93       	push	r17
    17c0:	0f 93       	push	r16
    17c2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
        print("\n");
    17c6:	85 ed       	ldi	r24, 0xD5	; 213
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    17ce:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    17d0:	8d b7       	in	r24, 0x3d	; 61
    17d2:	9e b7       	in	r25, 0x3e	; 62
    17d4:	08 96       	adiw	r24, 0x08	; 8
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	9e bf       	out	0x3e, r25	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	8d bf       	out	0x3d, r24	; 61
    17e0:	ce 30       	cpi	r28, 0x0E	; 14
    17e2:	d1 05       	cpc	r29, r1
    17e4:	d1 f6       	brne	.-76     	; 0x179a <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	cf 90       	pop	r12
    17f6:	08 95       	ret

000017f8 <led_set>:

void led_set(uint8_t usb_led)
{
    // topmost - NumLock
#ifndef INVERT_NUMLOCK
    if (usb_led & (1<<USB_LED_NUM_LOCK)) {
    17f8:	80 ff       	sbrs	r24, 0
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <led_set+0xa>
extern bool ergodox_left_led_1;         // left top
extern bool ergodox_left_led_2;         // left middle
extern bool ergodox_left_led_3;         // left bottom

inline void ergodox_board_led_on(void)      { DDRD |=  (1<<6); PORTD |=  (1<<6); }
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
    17fc:	25 9a       	sbi	0x04, 5	; 4
    17fe:	2d 9a       	sbi	0x05, 5	; 5
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <led_set+0xe>
inline void ergodox_left_led_1_on(void)     { ergodox_left_led_1 = 1; }
inline void ergodox_left_led_2_on(void)     { ergodox_left_led_2 = 1; }
inline void ergodox_left_led_3_on(void)     { ergodox_left_led_3 = 1; }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    1802:	25 98       	cbi	0x04, 5	; 4
    1804:	2d 98       	cbi	0x05, 5	; 5
        ergodox_right_led_1_on();
    }
#endif

    // middle - CapsLock
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    1806:	81 ff       	sbrs	r24, 1
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <led_set+0x18>
extern bool ergodox_left_led_2;         // left middle
extern bool ergodox_left_led_3;         // left bottom

inline void ergodox_board_led_on(void)      { DDRD |=  (1<<6); PORTD |=  (1<<6); }
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
    180a:	26 9a       	sbi	0x04, 6	; 4
    180c:	2e 9a       	sbi	0x05, 6	; 5
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <led_set+0x1c>
inline void ergodox_left_led_2_on(void)     { ergodox_left_led_2 = 1; }
inline void ergodox_left_led_3_on(void)     { ergodox_left_led_3 = 1; }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    1810:	26 98       	cbi	0x04, 6	; 4
    1812:	2e 98       	cbi	0x05, 6	; 5
    } else {
        ergodox_right_led_2_off();
    }

    // bottommost - ScrollLock
    if (usb_led & (1<<USB_LED_SCROLL_LOCK)) {
    1814:	82 ff       	sbrs	r24, 2
    1816:	03 c0       	rjmp	.+6      	; 0x181e <led_set+0x26>
extern bool ergodox_left_led_3;         // left bottom

inline void ergodox_board_led_on(void)      { DDRD |=  (1<<6); PORTD |=  (1<<6); }
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
    1818:	27 9a       	sbi	0x04, 7	; 4
    181a:	2f 9a       	sbi	0x05, 7	; 5
    181c:	08 95       	ret
inline void ergodox_left_led_3_on(void)     { ergodox_left_led_3 = 1; }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    181e:	27 98       	cbi	0x04, 7	; 4
    1820:	2f 98       	cbi	0x05, 7	; 5
    1822:	08 95       	ret

00001824 <init_ergodox>:


void init_ergodox(void)
{
    // keyboard LEDs (see "PWM on ports OC1(A|B|C)" in "teensy-2-0.md")
    TCCR1A = 0b10101001;  // set and configure fast PWM
    1824:	89 ea       	ldi	r24, 0xA9	; 169
    1826:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = 0b00001001;  // set and configure fast PWM
    182a:	89 e0       	ldi	r24, 0x09	; 9
    182c:	80 93 81 00 	sts	0x0081, r24

    // (tied to Vcc for hardware convenience)
    DDRB  &= ~(1<<4);  // set B(4) as input
    1830:	24 98       	cbi	0x04, 4	; 4
    PORTB &= ~(1<<4);  // set B(4) internal pull-up disabled
    1832:	2c 98       	cbi	0x05, 4	; 5

    // unused pins - C7, D4, D5, D7, E6
    // set as input with internal pull-ip enabled
    DDRC  &= ~(1<<7);
    1834:	3f 98       	cbi	0x07, 7	; 7
    DDRD  &= ~(1<<7 | 1<<5 | 1<<4);
    1836:	8a b1       	in	r24, 0x0a	; 10
    1838:	8f 74       	andi	r24, 0x4F	; 79
    183a:	8a b9       	out	0x0a, r24	; 10
    DDRE  &= ~(1<<6);
    183c:	6e 98       	cbi	0x0d, 6	; 13
    PORTC |=  (1<<7);
    183e:	47 9a       	sbi	0x08, 7	; 8
    PORTD |=  (1<<7 | 1<<5 | 1<<4);
    1840:	8b b1       	in	r24, 0x0b	; 11
    1842:	80 6b       	ori	r24, 0xB0	; 176
    1844:	8b b9       	out	0x0b, r24	; 11
    PORTE |=  (1<<6);
    1846:	76 9a       	sbi	0x0e, 6	; 14
    1848:	08 95       	ret

0000184a <ergodox_left_leds_update>:

    return mcp23018_status;
}

uint8_t ergodox_left_leds_update(void) {
    if (mcp23018_status) { // if there was an error
    184a:	80 91 01 01 	lds	r24, 0x0101
    184e:	81 11       	cpse	r24, r1
    1850:	2f c0       	rjmp	.+94     	; 0x18b0 <ergodox_left_leds_update+0x66>

    // set logical value (doesn't matter on inputs)
    // - unused  : hi-Z : 1
    // - input   : hi-Z : 1
    // - driving : hi-Z : 1
    mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    1852:	80 e4       	ldi	r24, 0x40	; 64
    1854:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>
    1858:	80 93 01 01 	sts	0x0101, r24
    185c:	81 11       	cpse	r24, r1
    185e:	24 c0       	rjmp	.+72     	; 0x18a8 <ergodox_left_leds_update+0x5e>
    mcp23018_status = i2c_write(OLATA);             if (mcp23018_status) goto out;
    1860:	84 e1       	ldi	r24, 0x14	; 20
    1862:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    1866:	80 93 01 01 	sts	0x0101, r24
    186a:	81 11       	cpse	r24, r1
    186c:	1d c0       	rjmp	.+58     	; 0x18a8 <ergodox_left_leds_update+0x5e>
    mcp23018_status = i2c_write(0b11111111
    186e:	80 91 3f 01 	lds	r24, 0x013F
    1872:	87 95       	ror	r24
    1874:	88 27       	eor	r24, r24
    1876:	87 95       	ror	r24
    1878:	80 95       	com	r24
    187a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    187e:	80 93 01 01 	sts	0x0101, r24
            & ~(ergodox_left_led_3<<LEFT_LED_3_SHIFT)
          );                                        if (mcp23018_status) goto out;
    1882:	81 11       	cpse	r24, r1
    1884:	11 c0       	rjmp	.+34     	; 0x18a8 <ergodox_left_leds_update+0x5e>
    mcp23018_status = i2c_write(0b11111111
    1886:	80 91 41 01 	lds	r24, 0x0141
    188a:	87 95       	ror	r24
    188c:	88 27       	eor	r24, r24
    188e:	87 95       	ror	r24
    1890:	90 91 40 01 	lds	r25, 0x0140
    1894:	92 95       	swap	r25
    1896:	99 0f       	add	r25, r25
    1898:	99 0f       	add	r25, r25
    189a:	90 7c       	andi	r25, 0xC0	; 192
    189c:	89 2b       	or	r24, r25
    189e:	80 95       	com	r24
    18a0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    18a4:	80 93 01 01 	sts	0x0101, r24
            & ~(ergodox_left_led_2<<LEFT_LED_2_SHIFT)
            & ~(ergodox_left_led_1<<LEFT_LED_1_SHIFT)
          );                                        if (mcp23018_status) goto out;

out:
    i2c_stop();
    18a8:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <i2c_stop>
    return mcp23018_status;
    18ac:	80 91 01 01 	lds	r24, 0x0101
}
    18b0:	08 95       	ret

000018b2 <ergodox_blink_all_leds>:
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
inline void ergodox_left_led_1_on(void)     { ergodox_left_led_1 = 1; }
inline void ergodox_left_led_2_on(void)     { ergodox_left_led_2 = 1; }
inline void ergodox_left_led_3_on(void)     { ergodox_left_led_3 = 1; }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
    18b2:	56 98       	cbi	0x0a, 6	; 10
    18b4:	5e 98       	cbi	0x0b, 6	; 11
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    18b6:	25 98       	cbi	0x04, 5	; 4
    18b8:	2d 98       	cbi	0x05, 5	; 5
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    18ba:	26 98       	cbi	0x04, 6	; 4
    18bc:	2e 98       	cbi	0x05, 6	; 5
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    18be:	27 98       	cbi	0x04, 7	; 4
    18c0:	2f 98       	cbi	0x05, 7	; 5
inline void ergodox_left_led_1_off(void)    { ergodox_left_led_1 = 0; }
    18c2:	10 92 41 01 	sts	0x0141, r1
inline void ergodox_left_led_2_off(void)    { ergodox_left_led_2 = 0; }
    18c6:	10 92 40 01 	sts	0x0140, r1
inline void ergodox_left_led_3_off(void)    { ergodox_left_led_3 = 0; }
    18ca:	10 92 3f 01 	sts	0x013F, r1
    ergodox_right_led_2_off();
    ergodox_right_led_3_off();
    ergodox_left_led_1_off();
    ergodox_left_led_2_off();
    ergodox_left_led_3_off();
    ergodox_left_leds_update();
    18ce:	0e 94 25 0c 	call	0x184a	; 0x184a <ergodox_left_leds_update>
}

inline void ergodox_right_led_1_set(uint8_t n)    { OCR1A = n; }
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	90 93 89 00 	sts	0x0089, r25
    18da:	80 93 88 00 	sts	0x0088, r24
inline void ergodox_right_led_2_set(uint8_t n)    { OCR1B = n; }
    18de:	90 93 8b 00 	sts	0x008B, r25
    18e2:	80 93 8a 00 	sts	0x008A, r24
inline void ergodox_right_led_3_set(uint8_t n)    { OCR1C = n; }
    18e6:	90 93 8d 00 	sts	0x008D, r25
    18ea:	80 93 8c 00 	sts	0x008C, r24

extern bool ergodox_left_led_1;         // left top
extern bool ergodox_left_led_2;         // left middle
extern bool ergodox_left_led_3;         // left bottom

inline void ergodox_board_led_on(void)      { DDRD |=  (1<<6); PORTD |=  (1<<6); }
    18ee:	56 9a       	sbi	0x0a, 6	; 10
    18f0:	5e 9a       	sbi	0x0b, 6	; 11
inline void ergodox_right_led_1_on(void)    { DDRB |=  (1<<5); PORTB |=  (1<<5); }
    18f2:	25 9a       	sbi	0x04, 5	; 4
    18f4:	2d 9a       	sbi	0x05, 5	; 5
inline void ergodox_right_led_2_on(void)    { DDRB |=  (1<<6); PORTB |=  (1<<6); }
    18f6:	26 9a       	sbi	0x04, 6	; 4
    18f8:	2e 9a       	sbi	0x05, 6	; 5
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
    18fa:	27 9a       	sbi	0x04, 7	; 4
    18fc:	2f 9a       	sbi	0x05, 7	; 5
inline void ergodox_left_led_1_on(void)     { ergodox_left_led_1 = 1; }
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	80 93 41 01 	sts	0x0141, r24
inline void ergodox_left_led_2_on(void)     { ergodox_left_led_2 = 1; }
    1904:	80 93 40 01 	sts	0x0140, r24
inline void ergodox_left_led_3_on(void)     { ergodox_left_led_3 = 1; }
    1908:	80 93 3f 01 	sts	0x013F, r24
    ergodox_right_led_2_on();
    ergodox_right_led_3_on();
    ergodox_left_led_1_on();
    ergodox_left_led_2_on();
    ergodox_left_led_3_on();
    ergodox_left_leds_update();
    190c:	0e 94 25 0c 	call	0x184a	; 0x184a <ergodox_left_leds_update>
    1910:	2f e7       	ldi	r18, 0x7F	; 127
    1912:	82 e4       	ldi	r24, 0x42	; 66
    1914:	90 e1       	ldi	r25, 0x10	; 16
    1916:	21 50       	subi	r18, 0x01	; 1
    1918:	80 40       	sbci	r24, 0x00	; 0
    191a:	90 40       	sbci	r25, 0x00	; 0
    191c:	e1 f7       	brne	.-8      	; 0x1916 <ergodox_blink_all_leds+0x64>
    191e:	00 c0       	rjmp	.+0      	; 0x1920 <ergodox_blink_all_leds+0x6e>
    1920:	00 00       	nop
inline void ergodox_right_led_3_on(void)    { DDRB |=  (1<<7); PORTB |=  (1<<7); }
inline void ergodox_left_led_1_on(void)     { ergodox_left_led_1 = 1; }
inline void ergodox_left_led_2_on(void)     { ergodox_left_led_2 = 1; }
inline void ergodox_left_led_3_on(void)     { ergodox_left_led_3 = 1; }

inline void ergodox_board_led_off(void)     { DDRD &= ~(1<<6); PORTD &= ~(1<<6); }
    1922:	56 98       	cbi	0x0a, 6	; 10
    1924:	5e 98       	cbi	0x0b, 6	; 11
inline void ergodox_right_led_1_off(void)   { DDRB &= ~(1<<5); PORTB &= ~(1<<5); }
    1926:	25 98       	cbi	0x04, 5	; 4
    1928:	2d 98       	cbi	0x05, 5	; 5
inline void ergodox_right_led_2_off(void)   { DDRB &= ~(1<<6); PORTB &= ~(1<<6); }
    192a:	26 98       	cbi	0x04, 6	; 4
    192c:	2e 98       	cbi	0x05, 6	; 5
inline void ergodox_right_led_3_off(void)   { DDRB &= ~(1<<7); PORTB &= ~(1<<7); }
    192e:	27 98       	cbi	0x04, 7	; 4
    1930:	2f 98       	cbi	0x05, 7	; 5
inline void ergodox_left_led_1_off(void)    { ergodox_left_led_1 = 0; }
    1932:	10 92 41 01 	sts	0x0141, r1
inline void ergodox_left_led_2_off(void)    { ergodox_left_led_2 = 0; }
    1936:	10 92 40 01 	sts	0x0140, r1
inline void ergodox_left_led_3_off(void)    { ergodox_left_led_3 = 0; }
    193a:	10 92 3f 01 	sts	0x013F, r1
    ergodox_right_led_2_off();
    ergodox_right_led_3_off();
    ergodox_left_led_1_off();
    ergodox_left_led_2_off();
    ergodox_left_led_3_off();
    ergodox_left_leds_update();
    193e:	0c 94 25 0c 	jmp	0x184a	; 0x184a <ergodox_left_leds_update>

00001942 <init_mcp23018>:
    _delay_ms(333);
    ergodox_led_all_off();
}

uint8_t init_mcp23018(void) {
    mcp23018_status = 0x20;
    1942:	80 e2       	ldi	r24, 0x20	; 32
    1944:	80 93 01 01 	sts	0x0101, r24

    // I2C subsystem
    if (i2c_initialized == 0) {
    1948:	80 91 42 01 	lds	r24, 0x0142
    194c:	81 11       	cpse	r24, r1
    194e:	0e c0       	rjmp	.+28     	; 0x196c <init_mcp23018+0x2a>
        i2c_init();  // on pins D(1,0)
    1950:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <i2c_init>
        i2c_initialized++;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 42 01 	sts	0x0142, r24
    195a:	2f ef       	ldi	r18, 0xFF	; 255
    195c:	83 ed       	ldi	r24, 0xD3	; 211
    195e:	90 e3       	ldi	r25, 0x30	; 48
    1960:	21 50       	subi	r18, 0x01	; 1
    1962:	80 40       	sbci	r24, 0x00	; 0
    1964:	90 40       	sbci	r25, 0x00	; 0
    1966:	e1 f7       	brne	.-8      	; 0x1960 <init_mcp23018+0x1e>
    1968:	00 c0       	rjmp	.+0      	; 0x196a <init_mcp23018+0x28>
    196a:	00 00       	nop

    // set pin direction
    // - unused  : input  : 1
    // - input   : input  : 1
    // - driving : output : 0
    mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    196c:	80 e4       	ldi	r24, 0x40	; 64
    196e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>
    1972:	80 93 01 01 	sts	0x0101, r24
    1976:	81 11       	cpse	r24, r1
    1978:	2e c0       	rjmp	.+92     	; 0x19d6 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(IODIRA);            if (mcp23018_status) goto out;
    197a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    197e:	80 93 01 01 	sts	0x0101, r24
    1982:	81 11       	cpse	r24, r1
    1984:	28 c0       	rjmp	.+80     	; 0x19d6 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00000000);        if (mcp23018_status) goto out;
    1986:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    198a:	80 93 01 01 	sts	0x0101, r24
    198e:	81 11       	cpse	r24, r1
    1990:	22 c0       	rjmp	.+68     	; 0x19d6 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00111111);        if (mcp23018_status) goto out;
    1992:	8f e3       	ldi	r24, 0x3F	; 63
    1994:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    1998:	80 93 01 01 	sts	0x0101, r24
    199c:	81 11       	cpse	r24, r1
    199e:	1b c0       	rjmp	.+54     	; 0x19d6 <init_mcp23018+0x94>
    i2c_stop();
    19a0:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <i2c_stop>

    // set pull-up
    // - unused  : on  : 1
    // - input   : on  : 1
    // - driving : off : 0
    mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
    19a4:	80 e4       	ldi	r24, 0x40	; 64
    19a6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <i2c_start>
    19aa:	80 93 01 01 	sts	0x0101, r24
    19ae:	81 11       	cpse	r24, r1
    19b0:	12 c0       	rjmp	.+36     	; 0x19d6 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(GPPUA);             if (mcp23018_status) goto out;
    19b2:	8c e0       	ldi	r24, 0x0C	; 12
    19b4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    19b8:	80 93 01 01 	sts	0x0101, r24
    19bc:	81 11       	cpse	r24, r1
    19be:	0b c0       	rjmp	.+22     	; 0x19d6 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00000000);        if (mcp23018_status) goto out;
    19c0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    19c4:	80 93 01 01 	sts	0x0101, r24
    19c8:	81 11       	cpse	r24, r1
    19ca:	05 c0       	rjmp	.+10     	; 0x19d6 <init_mcp23018+0x94>
    mcp23018_status = i2c_write(0b00111111);        if (mcp23018_status) goto out;
    19cc:	8f e3       	ldi	r24, 0x3F	; 63
    19ce:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <i2c_write>
    19d2:	80 93 01 01 	sts	0x0101, r24

out:
    i2c_stop();
    19d6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <i2c_stop>

    if (!mcp23018_status) mcp23018_status = ergodox_left_leds_update();
    19da:	80 91 01 01 	lds	r24, 0x0101
    19de:	81 11       	cpse	r24, r1
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <init_mcp23018+0xa8>
    19e2:	0e 94 25 0c 	call	0x184a	; 0x184a <ergodox_left_leds_update>
    19e6:	80 93 01 01 	sts	0x0101, r24

    return mcp23018_status;
}
    19ea:	80 91 01 01 	lds	r24, 0x0101
    19ee:	08 95       	ret

000019f0 <i2c_init>:
   * I2C bus speed - about 444 kHz
   *
   * for more details, see 20.5.2 in ATmega16/32 secification
   */
  
  TWSR = 0;     /* no prescaler */
    19f0:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = 10;    /* must be >= 10 for stable operation */
    19f4:	8a e0       	ldi	r24, 0x0A	; 10
    19f6:	80 93 b8 00 	sts	0x00B8, r24
    19fa:	08 95       	ret

000019fc <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    19fc:	94 ea       	ldi	r25, 0xA4	; 164
    19fe:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1a02:	90 91 bc 00 	lds	r25, 0x00BC
    1a06:	97 ff       	sbrs	r25, 7
    1a08:	fc cf       	rjmp	.-8      	; 0x1a02 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1a0a:	90 91 b9 00 	lds	r25, 0x00B9
    1a0e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1a10:	98 30       	cpi	r25, 0x08	; 8
    1a12:	21 f0       	breq	.+8      	; 0x1a1c <i2c_start+0x20>
    1a14:	90 31       	cpi	r25, 0x10	; 16
    1a16:	11 f0       	breq	.+4      	; 0x1a1c <i2c_start+0x20>
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	08 95       	ret

	// send device address
	TWDR = address;
    1a1c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a20:	84 e8       	ldi	r24, 0x84	; 132
    1a22:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1a26:	80 91 bc 00 	lds	r24, 0x00BC
    1a2a:	87 ff       	sbrs	r24, 7
    1a2c:	fc cf       	rjmp	.-8      	; 0x1a26 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1a2e:	80 91 b9 00 	lds	r24, 0x00B9
    1a32:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1a34:	88 31       	cpi	r24, 0x18	; 24
    1a36:	11 f0       	breq	.+4      	; 0x1a3c <i2c_start+0x40>
    1a38:	80 34       	cpi	r24, 0x40	; 64
    1a3a:	71 f7       	brne	.-36     	; 0x1a18 <i2c_start+0x1c>

	return 0;
    1a3c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1a3e:	08 95       	ret

00001a40 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1a40:	84 e9       	ldi	r24, 0x94	; 148
    1a42:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1a46:	80 91 bc 00 	lds	r24, 0x00BC
    1a4a:	84 fd       	sbrc	r24, 4
    1a4c:	fc cf       	rjmp	.-8      	; 0x1a46 <i2c_stop+0x6>

}/* i2c_stop */
    1a4e:	08 95       	ret

00001a50 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1a50:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a54:	84 e8       	ldi	r24, 0x84	; 132
    1a56:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1a5a:	80 91 bc 00 	lds	r24, 0x00BC
    1a5e:	87 ff       	sbrs	r24, 7
    1a60:	fc cf       	rjmp	.-8      	; 0x1a5a <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1a62:	90 91 b9 00 	lds	r25, 0x00B9
    1a66:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	98 32       	cpi	r25, 0x28	; 40
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <i2c_write+0x20>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    1a70:	08 95       	ret

00001a72 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1a72:	84 e8       	ldi	r24, 0x84	; 132
    1a74:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    1a78:	80 91 bc 00 	lds	r24, 0x00BC
    1a7c:	87 ff       	sbrs	r24, 7
    1a7e:	fc cf       	rjmp	.-8      	; 0x1a78 <i2c_readNak+0x6>
	
    return TWDR;
    1a80:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    1a84:	08 95       	ret

00001a86 <main>:


int main(void)
{
    // set for 16 MHz clock
    CPU_PRESCALE(0);
    1a86:	80 e8       	ldi	r24, 0x80	; 128
    1a88:	80 93 61 00 	sts	0x0061, r24
    1a8c:	10 92 61 00 	sts	0x0061, r1

    // Initialize the USB, and then wait for the host to set configuration.
    // If the Teensy is powered without a PC connected to the USB port,
    // this will wait forever.
    usb_init();
    1a90:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <usb_init>
    while (!usb_configured()) /* wait */ ;
    1a94:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <usb_configured>
    1a98:	88 23       	and	r24, r24
    1a9a:	e1 f3       	breq	.-8      	; 0x1a94 <main+0xe>

    print_set_sendchar(sendchar);
    1a9c:	8f e2       	ldi	r24, 0x2F	; 47
    1a9e:	9e e0       	ldi	r25, 0x0E	; 14
    1aa0:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <print_set_sendchar>

    keyboard_init();
    1aa4:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <keyboard_init>
    host_set_driver(pjrc_driver());
    1aa8:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <pjrc_driver>
    1aac:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
    1ab0:	0e 94 a5 2b 	call	0x574a	; 0x574a <sleep_led_init>
#endif
    while (1) {
        while (suspend) {
    1ab4:	80 91 47 01 	lds	r24, 0x0147
    1ab8:	88 23       	and	r24, r24
    1aba:	69 f0       	breq	.+26     	; 0x1ad6 <main+0x50>
            suspend_power_down();
    1abc:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <suspend_power_down>
            if (remote_wakeup && suspend_wakeup_condition()) {
    1ac0:	80 91 48 01 	lds	r24, 0x0148
    1ac4:	88 23       	and	r24, r24
    1ac6:	b1 f3       	breq	.-20     	; 0x1ab4 <main+0x2e>
    1ac8:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <suspend_wakeup_condition>
    1acc:	88 23       	and	r24, r24
    1ace:	91 f3       	breq	.-28     	; 0x1ab4 <main+0x2e>
                usb_remote_wakeup();
    1ad0:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <usb_remote_wakeup>
    1ad4:	ef cf       	rjmp	.-34     	; 0x1ab4 <main+0x2e>
            }
        }

        keyboard_task(); 
    1ad6:	0e 94 98 12 	call	0x2530	; 0x2530 <keyboard_task>
    }
    1ada:	ec cf       	rjmp	.-40     	; 0x1ab4 <main+0x2e>

00001adc <keyboard_leds>:
{
    return &driver;
}

static uint8_t keyboard_leds(void) {
    return usb_keyboard_leds;
    1adc:	80 91 43 01 	lds	r24, 0x0143
}
    1ae0:	08 95       	ret

00001ae2 <send_consumer>:
}

static void send_consumer(uint16_t data)
{
#ifdef EXTRAKEY_ENABLE
    usb_extra_consumer_send(data);
    1ae2:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <usb_extra_consumer_send>

00001ae6 <send_system>:
}

static void send_system(uint16_t data)
{
#ifdef EXTRAKEY_ENABLE
    usb_extra_system_send(data);
    1ae6:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <usb_extra_system_send>

00001aea <send_mouse>:
{
    usb_keyboard_send_report(report);
}

static void send_mouse(report_mouse_t *report)
{
    1aea:	0f 93       	push	r16
    1aec:	fc 01       	movw	r30, r24
#ifdef MOUSE_ENABLE
    usb_mouse_send(report->x, report->y, report->v, report->h, report->buttons);
    1aee:	00 81       	ld	r16, Z
    1af0:	24 81       	ldd	r18, Z+4	; 0x04
    1af2:	43 81       	ldd	r20, Z+3	; 0x03
    1af4:	62 81       	ldd	r22, Z+2	; 0x02
    1af6:	81 81       	ldd	r24, Z+1	; 0x01
    1af8:	0e 94 33 11 	call	0x2266	; 0x2266 <usb_mouse_send>
#endif
}
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <send_keyboard>:
    return usb_keyboard_leds;
}

static void send_keyboard(report_keyboard_t *report)
{
    usb_keyboard_send_report(report);
    1b00:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <usb_keyboard_send_report>

00001b04 <pjrc_driver>:
};

host_driver_t *pjrc_driver(void)
{
    return &driver;
}
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	08 95       	ret

00001b0a <send_report.constprop.0>:
    for (int i = 0; i < KEYBOARD_REPORT_KEYS; i++) { phex(report->keys[i]); print(" "); }
    print(" mods: "); phex(report->mods); print("\n");
}


static inline int8_t send_report(report_keyboard_t *report, uint8_t endpoint, uint8_t keys_start, uint8_t keys_end)
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	d8 2f       	mov	r29, r24
    1b16:	f9 2e       	mov	r15, r25
    1b18:	16 2f       	mov	r17, r22
    1b1a:	04 2f       	mov	r16, r20
{
    uint8_t intr_state, timeout;

    if (!usb_configured()) return -1;
    1b1c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <usb_configured>
    1b20:	81 11       	cpse	r24, r1
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <send_report.constprop.0+0x1e>
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	2a c0       	rjmp	.+84     	; 0x1b7c <send_report.constprop.0+0x72>
    intr_state = SREG;
    1b28:	2f b7       	in	r18, 0x3f	; 63
    cli();
    1b2a:	f8 94       	cli
    UENUM = endpoint;
    1b2c:	10 93 e9 00 	sts	0x00E9, r17
    timeout = UDFNUML + 50;
    1b30:	c0 91 e4 00 	lds	r28, 0x00E4
    1b34:	ce 5c       	subi	r28, 0xCE	; 206
    while (1) {
            // are we ready to transmit?
            if (UEINTX & (1<<RWAL)) break;
    1b36:	80 91 e8 00 	lds	r24, 0x00E8
    1b3a:	85 ff       	sbrs	r24, 5
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <send_report.constprop.0+0x3c>
    1b3e:	9d 2f       	mov	r25, r29
    1b40:	ed 2f       	mov	r30, r29
    1b42:	ff 2d       	mov	r31, r15
    1b44:	0e c0       	rjmp	.+28     	; 0x1b62 <send_report.constprop.0+0x58>
            SREG = intr_state;
    1b46:	2f bf       	out	0x3f, r18	; 63
            // has the USB gone offline?
            if (!usb_configured()) return -1;
    1b48:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <usb_configured>
    1b4c:	88 23       	and	r24, r24
    1b4e:	51 f3       	breq	.-44     	; 0x1b24 <send_report.constprop.0+0x1a>
            // have we waited too long?
            if (UDFNUML == timeout) return -1;
    1b50:	80 91 e4 00 	lds	r24, 0x00E4
    1b54:	8c 17       	cp	r24, r28
    1b56:	31 f3       	breq	.-52     	; 0x1b24 <send_report.constprop.0+0x1a>
            // get ready to try checking again
            intr_state = SREG;
    1b58:	2f b7       	in	r18, 0x3f	; 63
            cli();
    1b5a:	f8 94       	cli
            UENUM = endpoint;
    1b5c:	10 93 e9 00 	sts	0x00E9, r17
    1b60:	ea cf       	rjmp	.-44     	; 0x1b36 <send_report.constprop.0+0x2c>
    1b62:	8e 2f       	mov	r24, r30
    1b64:	89 1b       	sub	r24, r25
    }
    for (uint8_t i = keys_start; i < keys_end; i++) {
    1b66:	80 17       	cp	r24, r16
    1b68:	20 f4       	brcc	.+8      	; 0x1b72 <send_report.constprop.0+0x68>
            UEDATX = report->raw[i];
    1b6a:	81 91       	ld	r24, Z+
    1b6c:	80 93 f1 00 	sts	0x00F1, r24
    1b70:	f8 cf       	rjmp	.-16     	; 0x1b62 <send_report.constprop.0+0x58>
    }
    UEINTX = 0x3A;
    1b72:	8a e3       	ldi	r24, 0x3A	; 58
    1b74:	80 93 e8 00 	sts	0x00E8, r24
    SREG = intr_state;
    1b78:	2f bf       	out	0x3f, r18	; 63
    return 0;
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
}
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	08 95       	ret

00001b88 <usb_keyboard_print_report>:
    usb_keyboard_print_report(report);
    return 0;
}

void usb_keyboard_print_report(report_keyboard_t *report)
{
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	8c 01       	movw	r16, r24
    if (!debug_keyboard) return;
    1b96:	80 91 b3 01 	lds	r24, 0x01B3
    1b9a:	82 ff       	sbrs	r24, 2
    1b9c:	3c c0       	rjmp	.+120    	; 0x1c16 <usb_keyboard_print_report+0x8e>
    print("keys: ");
    1b9e:	8b e6       	ldi	r24, 0x6B	; 107
    1ba0:	93 e0       	ldi	r25, 0x03	; 3
    1ba2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    for (int i = 0; i < KEYBOARD_REPORT_KEYS; i++) { phex(report->keys[i]); print(" "); }
    1ba6:	c0 e0       	ldi	r28, 0x00	; 0
    1ba8:	d0 e0       	ldi	r29, 0x00	; 0
    1baa:	86 e6       	ldi	r24, 0x66	; 102
    1bac:	e8 2e       	mov	r14, r24
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	f8 2e       	mov	r15, r24
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	ec 0f       	add	r30, r28
    1bb6:	fd 1f       	adc	r31, r29
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	1f 92       	push	r1
    1bbc:	8f 93       	push	r24
    1bbe:	ff 92       	push	r15
    1bc0:	ef 92       	push	r14
    1bc2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    1bc6:	84 e6       	ldi	r24, 0x64	; 100
    1bc8:	93 e0       	ldi	r25, 0x03	; 3
    1bca:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    1bce:	21 96       	adiw	r28, 0x01	; 1
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	ce 30       	cpi	r28, 0x0E	; 14
    1bda:	d1 05       	cpc	r29, r1
    1bdc:	51 f7       	brne	.-44     	; 0x1bb2 <usb_keyboard_print_report+0x2a>
    print(" mods: "); phex(report->mods); print("\n");
    1bde:	8c e5       	ldi	r24, 0x5C	; 92
    1be0:	93 e0       	ldi	r25, 0x03	; 3
    1be2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    1be6:	f8 01       	movw	r30, r16
    1be8:	80 81       	ld	r24, Z
    1bea:	1f 92       	push	r1
    1bec:	8f 93       	push	r24
    1bee:	87 e5       	ldi	r24, 0x57	; 87
    1bf0:	93 e0       	ldi	r25, 0x03	; 3
    1bf2:	9f 93       	push	r25
    1bf4:	8f 93       	push	r24
    1bf6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	85 e5       	ldi	r24, 0x55	; 85
    1c04:	93 e0       	ldi	r25, 0x03	; 3
}
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	ef 90       	pop	r14
void usb_keyboard_print_report(report_keyboard_t *report)
{
    if (!debug_keyboard) return;
    print("keys: ");
    for (int i = 0; i < KEYBOARD_REPORT_KEYS; i++) { phex(report->keys[i]); print(" "); }
    print(" mods: "); phex(report->mods); print("\n");
    1c12:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <xputs>
}
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	ff 90       	pop	r15
    1c20:	ef 90       	pop	r14
    1c22:	08 95       	ret

00001c24 <usb_keyboard_send_report>:

static inline int8_t send_report(report_keyboard_t *report, uint8_t endpoint, uint8_t keys_start, uint8_t keys_end);


int8_t usb_keyboard_send_report(report_keyboard_t *report)
{
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	ec 01       	movw	r28, r24
    int8_t result = 0;

#ifdef NKRO_ENABLE
    if (keyboard_nkro)
    1c2c:	80 91 0f 01 	lds	r24, 0x010F
    1c30:	88 23       	and	r24, r24
    1c32:	19 f0       	breq	.+6      	; 0x1c3a <usb_keyboard_send_report+0x16>
        result = send_report(report, KBD2_ENDPOINT, 0, KBD2_SIZE);
    1c34:	40 e1       	ldi	r20, 0x10	; 16
    1c36:	65 e0       	ldi	r22, 0x05	; 5
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <usb_keyboard_send_report+0x1a>
    else
#endif
    {
        result = send_report(report, KBD_ENDPOINT, 0, KBD_SIZE);
    1c3a:	48 e0       	ldi	r20, 0x08	; 8
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	ce 01       	movw	r24, r28
    1c40:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <send_report.constprop.0>
    1c44:	18 2f       	mov	r17, r24
    }

    if (result) return result;
    1c46:	81 11       	cpse	r24, r1
    1c48:	05 c0       	rjmp	.+10     	; 0x1c54 <usb_keyboard_send_report+0x30>
    usb_keyboard_idle_count = 0;
    1c4a:	10 92 44 01 	sts	0x0144, r1
    usb_keyboard_print_report(report);
    1c4e:	ce 01       	movw	r24, r28
    1c50:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <usb_keyboard_print_report>
    return 0;
}
    1c54:	81 2f       	mov	r24, r17
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	08 95       	ret

00001c5e <sendchar>:
// packet, or send a zero length packet.
volatile uint8_t debug_flush_timer=0;


int8_t sendchar(uint8_t c)
{
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	d8 2f       	mov	r29, r24
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configured()) return -1;
    1c66:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <usb_configured>
    1c6a:	88 23       	and	r24, r24
    1c6c:	71 f0       	breq	.+28     	; 0x1c8a <sendchar+0x2c>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1c6e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c70:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
    1c78:	80 91 46 01 	lds	r24, 0x0146
    1c7c:	88 23       	and	r24, r24
    1c7e:	49 f0       	breq	.+18     	; 0x1c92 <sendchar+0x34>
		if (!(UEINTX & (1<<RWAL))) {
    1c80:	80 91 e8 00 	lds	r24, 0x00E8
    1c84:	85 fd       	sbrc	r24, 5
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <sendchar+0x30>
			SREG = intr_state;
    1c88:	9f bf       	out	0x3f, r25	; 63
			return -1;
    1c8a:	8f ef       	ldi	r24, 0xFF	; 255
    1c8c:	2d c0       	rjmp	.+90     	; 0x1ce8 <sendchar+0x8a>
		}
		previous_timeout = 0;
    1c8e:	10 92 46 01 	sts	0x0146, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
    1c92:	c0 91 e4 00 	lds	r28, 0x00E4
    1c96:	cc 5f       	subi	r28, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configured()) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
    1c98:	13 e0       	ldi	r17, 0x03	; 3
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1c9a:	80 91 e8 00 	lds	r24, 0x00E8
    1c9e:	85 fd       	sbrc	r24, 5
    1ca0:	12 c0       	rjmp	.+36     	; 0x1cc6 <sendchar+0x68>
		SREG = intr_state;
    1ca2:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
    1ca4:	80 91 e4 00 	lds	r24, 0x00E4
    1ca8:	8c 13       	cpse	r24, r28
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <sendchar+0x56>
			previous_timeout = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	80 93 46 01 	sts	0x0146, r24
    1cb2:	eb cf       	rjmp	.-42     	; 0x1c8a <sendchar+0x2c>
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configured()) return -1;
    1cb4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <usb_configured>
    1cb8:	88 23       	and	r24, r24
    1cba:	39 f3       	breq	.-50     	; 0x1c8a <sendchar+0x2c>
		// get ready to try checking again
		intr_state = SREG;
    1cbc:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1cbe:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
    1cc0:	10 93 e9 00 	sts	0x00E9, r17
	}
    1cc4:	ea cf       	rjmp	.-44     	; 0x1c9a <sendchar+0x3c>
	// actually write the byte into the FIFO
	UEDATX = c;
    1cc6:	d0 93 f1 00 	sts	0x00F1, r29
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
    1cca:	80 91 e8 00 	lds	r24, 0x00E8
    1cce:	85 fd       	sbrc	r24, 5
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <sendchar+0x80>
		UEINTX = 0x3A;
    1cd2:	8a e3       	ldi	r24, 0x3A	; 58
    1cd4:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
    1cd8:	10 92 45 01 	sts	0x0145, r1
    1cdc:	03 c0       	rjmp	.+6      	; 0x1ce4 <sendchar+0x86>
	} else {
		debug_flush_timer = 2;
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	80 93 45 01 	sts	0x0145, r24
	}
	SREG = intr_state;
    1ce4:	9f bf       	out	0x3f, r25	; 63
	return 0;
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
}
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	08 95       	ret

00001cf0 <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1cf0:	80 91 e8 00 	lds	r24, 0x00E8
    1cf4:	80 ff       	sbrs	r24, 0
    1cf6:	fc cf       	rjmp	.-8      	; 0x1cf0 <usb_wait_in_ready>
}
    1cf8:	08 95       	ret

00001cfa <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
    1d00:	80 ea       	ldi	r24, 0xA0	; 160
    1d02:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
    1d06:	82 e1       	ldi	r24, 0x12	; 18
    1d08:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    1d0a:	09 b4       	in	r0, 0x29	; 41
    1d0c:	00 fe       	sbrs	r0, 0
    1d0e:	fd cf       	rjmp	.-6      	; 0x1d0a <usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1d10:	80 e9       	ldi	r24, 0x90	; 144
    1d12:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1d16:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    1d1a:	10 92 4a 01 	sts	0x014A, r1
        suspend = false;
    1d1e:	10 92 47 01 	sts	0x0147, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE)|(1<<WAKEUPE);
    1d22:	8d e1       	ldi	r24, 0x1D	; 29
    1d24:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1d28:	78 94       	sei
    1d2a:	08 95       	ret

00001d2c <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration && !suspend;
    1d2c:	80 91 4a 01 	lds	r24, 0x014A
    1d30:	88 23       	and	r24, r24
    1d32:	29 f0       	breq	.+10     	; 0x1d3e <usb_configured+0x12>
    1d34:	80 91 47 01 	lds	r24, 0x0147
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	89 27       	eor	r24, r25
    1d3c:	08 95       	ret
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
}
    1d40:	08 95       	ret

00001d42 <usb_remote_wakeup>:

void usb_remote_wakeup(void)
{
    UDCON |= (1<<RMWKUP);
    1d42:	80 91 e0 00 	lds	r24, 0x00E0
    1d46:	82 60       	ori	r24, 0x02	; 2
    1d48:	80 93 e0 00 	sts	0x00E0, r24
    while (UDCON & (1<<RMWKUP));
    1d4c:	80 91 e0 00 	lds	r24, 0x00E0
    1d50:	81 fd       	sbrc	r24, 1
    1d52:	fc cf       	rjmp	.-8      	; 0x1d4c <usb_remote_wakeup+0xa>
}
    1d54:	08 95       	ret

00001d56 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1d56:	1f 92       	push	r1
    1d58:	0f 92       	push	r0
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	0f 92       	push	r0
    1d5e:	11 24       	eor	r1, r1
    1d60:	2f 93       	push	r18
    1d62:	3f 93       	push	r19
    1d64:	4f 93       	push	r20
    1d66:	5f 93       	push	r21
    1d68:	6f 93       	push	r22
    1d6a:	7f 93       	push	r23
    1d6c:	8f 93       	push	r24
    1d6e:	9f 93       	push	r25
    1d70:	af 93       	push	r26
    1d72:	bf 93       	push	r27
    1d74:	cf 93       	push	r28
    1d76:	ef 93       	push	r30
    1d78:	ff 93       	push	r31
	uint8_t intbits, t;
	static uint8_t div4=0;

        intbits = UDINT;
    1d7a:	c0 91 e1 00 	lds	r28, 0x00E1
        UDINT = 0;
    1d7e:	10 92 e1 00 	sts	0x00E1, r1
        if ((intbits & (1<<SUSPI)) && (UDIEN & (1<<SUSPE)) && usb_configuration) {
    1d82:	c0 ff       	sbrs	r28, 0
    1d84:	17 c0       	rjmp	.+46     	; 0x1db4 <__vector_10+0x5e>
    1d86:	80 91 e2 00 	lds	r24, 0x00E2
    1d8a:	80 ff       	sbrs	r24, 0
    1d8c:	13 c0       	rjmp	.+38     	; 0x1db4 <__vector_10+0x5e>
    1d8e:	80 91 4a 01 	lds	r24, 0x014A
    1d92:	88 23       	and	r24, r24
    1d94:	79 f0       	breq	.+30     	; 0x1db4 <__vector_10+0x5e>
#ifdef SLEEP_LED_ENABLE
            sleep_led_enable();
    1d96:	0e 94 b7 2b 	call	0x576e	; 0x576e <sleep_led_enable>
#endif
            UDIEN &= ~(1<<SUSPE);
    1d9a:	80 91 e2 00 	lds	r24, 0x00E2
    1d9e:	8e 7f       	andi	r24, 0xFE	; 254
    1da0:	80 93 e2 00 	sts	0x00E2, r24
            UDIEN |= (1<<WAKEUPE);
    1da4:	80 91 e2 00 	lds	r24, 0x00E2
    1da8:	80 61       	ori	r24, 0x10	; 16
    1daa:	80 93 e2 00 	sts	0x00E2, r24
            suspend = true;
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	80 93 47 01 	sts	0x0147, r24
        }
        if ((intbits & (1<<WAKEUPI)) && (UDIEN & (1<<WAKEUPE)) && usb_configuration) {
    1db4:	c4 ff       	sbrs	r28, 4
    1db6:	1c c0       	rjmp	.+56     	; 0x1df0 <__vector_10+0x9a>
    1db8:	80 91 e2 00 	lds	r24, 0x00E2
    1dbc:	84 ff       	sbrs	r24, 4
    1dbe:	18 c0       	rjmp	.+48     	; 0x1df0 <__vector_10+0x9a>
    1dc0:	80 91 4a 01 	lds	r24, 0x014A
    1dc4:	88 23       	and	r24, r24
    1dc6:	a1 f0       	breq	.+40     	; 0x1df0 <__vector_10+0x9a>
            suspend_wakeup_init();
    1dc8:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
            sleep_led_disable();
    1dcc:	0e 94 bd 2b 	call	0x577a	; 0x577a <sleep_led_disable>
            // NOTE: converters may not accept this
            led_set(host_keyboard_leds());
    1dd0:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    1dd4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <led_set>
#endif

            UDIEN |= (1<<SUSPE);
    1dd8:	80 91 e2 00 	lds	r24, 0x00E2
    1ddc:	81 60       	ori	r24, 0x01	; 1
    1dde:	80 93 e2 00 	sts	0x00E2, r24
            UDIEN &= ~(1<<WAKEUPE);
    1de2:	80 91 e2 00 	lds	r24, 0x00E2
    1de6:	8f 7e       	andi	r24, 0xEF	; 239
    1de8:	80 93 e2 00 	sts	0x00E2, r24
            suspend = false;
    1dec:	10 92 47 01 	sts	0x0147, r1
        }
        if (intbits & (1<<EORSTI)) {
    1df0:	c3 ff       	sbrs	r28, 3
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <__vector_10+0xbc>
		UENUM = 0;
    1df4:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
    1dfe:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1e02:	82 e2       	ldi	r24, 0x22	; 34
    1e04:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
    1e08:	88 e0       	ldi	r24, 0x08	; 8
    1e0a:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
    1e0e:	10 92 4a 01 	sts	0x014A, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
    1e12:	c2 ff       	sbrs	r28, 2
    1e14:	3b c0       	rjmp	.+118    	; 0x1e8c <__vector_10+0x136>
    1e16:	80 91 4a 01 	lds	r24, 0x014A
    1e1a:	88 23       	and	r24, r24
    1e1c:	b9 f1       	breq	.+110    	; 0x1e8c <__vector_10+0x136>
		t = debug_flush_timer;
    1e1e:	80 91 45 01 	lds	r24, 0x0145
		if (t) {
    1e22:	88 23       	and	r24, r24
    1e24:	91 f0       	breq	.+36     	; 0x1e4a <__vector_10+0xf4>
			debug_flush_timer = -- t;
    1e26:	81 50       	subi	r24, 0x01	; 1
    1e28:	80 93 45 01 	sts	0x0145, r24
			if (!t) {
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	0d c0       	rjmp	.+26     	; 0x1e4a <__vector_10+0xf4>
				UENUM = DEBUG_TX_ENDPOINT;
    1e30:	83 e0       	ldi	r24, 0x03	; 3
    1e32:	80 93 e9 00 	sts	0x00E9, r24
				while ((UEINTX & (1<<RWAL))) {
    1e36:	80 91 e8 00 	lds	r24, 0x00E8
    1e3a:	85 ff       	sbrs	r24, 5
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <__vector_10+0xee>
					UEDATX = 0;
    1e3e:	10 92 f1 00 	sts	0x00F1, r1
    1e42:	f9 cf       	rjmp	.-14     	; 0x1e36 <__vector_10+0xe0>
				}
				UEINTX = 0x3A;
    1e44:	8a e3       	ldi	r24, 0x3A	; 58
    1e46:	80 93 e8 00 	sts	0x00E8, r24
			}
		}
                /* TODO: should keep IDLE rate on each keyboard interface */
#ifdef NKRO_ENABLE
		if (!keyboard_nkro && keyboard_idle && (++div4 & 3) == 0) {
    1e4a:	80 91 0f 01 	lds	r24, 0x010F
    1e4e:	81 11       	cpse	r24, r1
    1e50:	1d c0       	rjmp	.+58     	; 0x1e8c <__vector_10+0x136>
    1e52:	80 91 0c 01 	lds	r24, 0x010C
    1e56:	88 23       	and	r24, r24
    1e58:	c9 f0       	breq	.+50     	; 0x1e8c <__vector_10+0x136>
    1e5a:	80 91 49 01 	lds	r24, 0x0149
    1e5e:	8f 5f       	subi	r24, 0xFF	; 255
    1e60:	80 93 49 01 	sts	0x0149, r24
    1e64:	83 70       	andi	r24, 0x03	; 3
    1e66:	91 f4       	brne	.+36     	; 0x1e8c <__vector_10+0x136>
#else
		if (keyboard_idle && (++div4 & 3) == 0) {
#endif
			UENUM = KBD_ENDPOINT;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	80 93 e9 00 	sts	0x00E9, r24
			if (UEINTX & (1<<RWAL)) {
    1e6e:	80 91 e8 00 	lds	r24, 0x00E8
    1e72:	85 ff       	sbrs	r24, 5
    1e74:	0b c0       	rjmp	.+22     	; 0x1e8c <__vector_10+0x136>
				usb_keyboard_idle_count++;
    1e76:	80 91 44 01 	lds	r24, 0x0144
    1e7a:	8f 5f       	subi	r24, 0xFF	; 255
    1e7c:	80 93 44 01 	sts	0x0144, r24
				if (usb_keyboard_idle_count == keyboard_idle) {
    1e80:	90 91 0c 01 	lds	r25, 0x010C
    1e84:	89 13       	cpse	r24, r25
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <__vector_10+0x136>
					usb_keyboard_idle_count = 0;
    1e88:	10 92 44 01 	sts	0x0144, r1
*/
				}
			}
		}
	}
}
    1e8c:	ff 91       	pop	r31
    1e8e:	ef 91       	pop	r30
    1e90:	cf 91       	pop	r28
    1e92:	bf 91       	pop	r27
    1e94:	af 91       	pop	r26
    1e96:	9f 91       	pop	r25
    1e98:	8f 91       	pop	r24
    1e9a:	7f 91       	pop	r23
    1e9c:	6f 91       	pop	r22
    1e9e:	5f 91       	pop	r21
    1ea0:	4f 91       	pop	r20
    1ea2:	3f 91       	pop	r19
    1ea4:	2f 91       	pop	r18
    1ea6:	0f 90       	pop	r0
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	0f 90       	pop	r0
    1eac:	1f 90       	pop	r1
    1eae:	18 95       	reti

00001eb0 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	ef 92       	push	r14
    1ebc:	ff 92       	push	r15
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	2f 93       	push	r18
    1ec4:	3f 93       	push	r19
    1ec6:	4f 93       	push	r20
    1ec8:	5f 93       	push	r21
    1eca:	6f 93       	push	r22
    1ecc:	7f 93       	push	r23
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	af 93       	push	r26
    1ed4:	bf 93       	push	r27
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	1f 92       	push	r1
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1ee4:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
    1ee8:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1eec:	83 ff       	sbrs	r24, 3
    1eee:	a0 c1       	rjmp	.+832    	; 0x2230 <__vector_11+0x380>
                bmRequestType = UEDATX;
    1ef0:	90 91 f1 00 	lds	r25, 0x00F1
                bRequest = UEDATX;
    1ef4:	80 91 f1 00 	lds	r24, 0x00F1
                wValue = UEDATX;
    1ef8:	30 91 f1 00 	lds	r19, 0x00F1
                wValue |= (UEDATX << 8);
    1efc:	20 91 f1 00 	lds	r18, 0x00F1
    1f00:	e3 2e       	mov	r14, r19
    1f02:	f1 2c       	mov	r15, r1
    1f04:	f2 2a       	or	r15, r18
                wIndex = UEDATX;
    1f06:	00 91 f1 00 	lds	r16, 0x00F1
                wIndex |= (UEDATX << 8);
    1f0a:	20 91 f1 00 	lds	r18, 0x00F1
    1f0e:	10 e0       	ldi	r17, 0x00	; 0
    1f10:	12 2b       	or	r17, r18
                wLength = UEDATX;
    1f12:	20 91 f1 00 	lds	r18, 0x00F1
                wLength |= (UEDATX << 8);
    1f16:	40 91 f1 00 	lds	r20, 0x00F1
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	34 2b       	or	r19, r20
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1f1e:	42 ef       	ldi	r20, 0xF2	; 242
    1f20:	40 93 e8 00 	sts	0x00E8, r20
                if (bRequest == GET_DESCRIPTOR) {
    1f24:	86 30       	cpi	r24, 0x06	; 6
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <__vector_11+0x7a>
    1f28:	44 c0       	rjmp	.+136    	; 0x1fb2 <__vector_11+0x102>
    1f2a:	6f e0       	ldi	r22, 0x0F	; 15
    1f2c:	82 e7       	ldi	r24, 0x72	; 114
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1f30:	fc 01       	movw	r30, r24
    1f32:	45 91       	lpm	r20, Z+
    1f34:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    1f36:	4e 15       	cp	r20, r14
    1f38:	5f 05       	cpc	r21, r15
    1f3a:	39 f4       	brne	.+14     	; 0x1f4a <__vector_11+0x9a>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1f40:	45 91       	lpm	r20, Z+
    1f42:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    1f44:	40 17       	cp	r20, r16
    1f46:	51 07       	cpc	r21, r17
    1f48:	21 f0       	breq	.+8      	; 0x1f52 <__vector_11+0xa2>
					list += sizeof(struct descriptor_list_struct)-2;
    1f4a:	07 96       	adiw	r24, 0x07	; 7
    1f4c:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1f4e:	81 f7       	brne	.-32     	; 0x1f30 <__vector_11+0x80>
    1f50:	6f c1       	rjmp	.+734    	; 0x2230 <__vector_11+0x380>
				desc_val = pgm_read_word(list);
				if (desc_val != wIndex) {
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    1f52:	fc 01       	movw	r30, r24
    1f54:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1f56:	45 91       	lpm	r20, Z+
    1f58:	54 91       	lpm	r21, Z
				list += 2;
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1f5e:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1f60:	2f 3f       	cpi	r18, 0xFF	; 255
    1f62:	31 05       	cpc	r19, r1
    1f64:	19 f0       	breq	.+6      	; 0x1f6c <__vector_11+0xbc>
    1f66:	10 f0       	brcs	.+4      	; 0x1f6c <__vector_11+0xbc>
    1f68:	2f ef       	ldi	r18, 0xFF	; 255
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	28 17       	cp	r18, r24
    1f6e:	08 f4       	brcc	.+2      	; 0x1f72 <__vector_11+0xc2>
    1f70:	82 2f       	mov	r24, r18
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1f72:	3e ef       	ldi	r19, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1f74:	90 91 e8 00 	lds	r25, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1f78:	29 2f       	mov	r18, r25
    1f7a:	25 70       	andi	r18, 0x05	; 5
    1f7c:	d9 f3       	breq	.-10     	; 0x1f74 <__vector_11+0xc4>
				if (i & (1<<RXOUTI)) return;	// abort
    1f7e:	92 fd       	sbrc	r25, 2
    1f80:	5a c1       	rjmp	.+692    	; 0x2236 <__vector_11+0x386>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1f82:	98 2f       	mov	r25, r24
    1f84:	81 32       	cpi	r24, 0x21	; 33
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <__vector_11+0xda>
    1f88:	90 e2       	ldi	r25, 0x20	; 32
				for (i = n; i; i--) {
    1f8a:	fa 01       	movw	r30, r20
    1f8c:	29 2f       	mov	r18, r25
    1f8e:	22 23       	and	r18, r18
    1f90:	31 f0       	breq	.+12     	; 0x1f9e <__vector_11+0xee>
					UEDATX = pgm_read_byte(desc_addr++);
    1f92:	64 91       	lpm	r22, Z
    1f94:	60 93 f1 00 	sts	0x00F1, r22
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1f98:	21 50       	subi	r18, 0x01	; 1
    1f9a:	31 96       	adiw	r30, 0x01	; 1
    1f9c:	f8 cf       	rjmp	.-16     	; 0x1f8e <__vector_11+0xde>
    1f9e:	49 0f       	add	r20, r25
    1fa0:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1fa2:	89 1b       	sub	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1fa4:	30 93 e8 00 	sts	0x00E8, r19
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1fa8:	81 11       	cpse	r24, r1
    1faa:	e4 cf       	rjmp	.-56     	; 0x1f74 <__vector_11+0xc4>
    1fac:	90 32       	cpi	r25, 0x20	; 32
    1fae:	11 f3       	breq	.-60     	; 0x1f74 <__vector_11+0xc4>
    1fb0:	42 c1       	rjmp	.+644    	; 0x2236 <__vector_11+0x386>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1fb2:	85 30       	cpi	r24, 0x05	; 5
    1fb4:	51 f4       	brne	.+20     	; 0x1fca <__vector_11+0x11a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1fb6:	8e ef       	ldi	r24, 0xFE	; 254
    1fb8:	80 93 e8 00 	sts	0x00E8, r24
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
    1fbc:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    1fc0:	8e 2d       	mov	r24, r14
    1fc2:	80 68       	ori	r24, 0x80	; 128
    1fc4:	80 93 e3 00 	sts	0x00E3, r24
			return;
    1fc8:	36 c1       	rjmp	.+620    	; 0x2236 <__vector_11+0x386>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1fca:	89 30       	cpi	r24, 0x09	; 9
    1fcc:	59 f5       	brne	.+86     	; 0x2024 <__vector_11+0x174>
    1fce:	91 11       	cpse	r25, r1
    1fd0:	49 c0       	rjmp	.+146    	; 0x2064 <__vector_11+0x1b4>
			usb_configuration = wValue;
    1fd2:	e0 92 4a 01 	sts	0x014A, r14
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1fd6:	8e ef       	ldi	r24, 0xFE	; 254
    1fd8:	80 93 e8 00 	sts	0x00E8, r24
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<=MAX_ENDPOINT; i++) {
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
    1fde:	89 ea       	ldi	r24, 0xA9	; 169
    1fe0:	95 e0       	ldi	r25, 0x05	; 5
			for (i=1; i<=MAX_ENDPOINT; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
                                if (en) {
                                    UECONX = (1<<EPEN);
    1fe2:	51 e0       	ldi	r21, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<=MAX_ENDPOINT; i++) {
				UENUM = i;
    1fe4:	40 93 e9 00 	sts	0x00E9, r20
				en = pgm_read_byte(cfg++);
    1fe8:	9c 01       	movw	r18, r24
    1fea:	2f 5f       	subi	r18, 0xFF	; 255
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	fc 01       	movw	r30, r24
    1ff0:	64 91       	lpm	r22, Z
                                if (en) {
    1ff2:	66 23       	and	r22, r22
    1ff4:	71 f0       	breq	.+28     	; 0x2012 <__vector_11+0x162>
                                    UECONX = (1<<EPEN);
    1ff6:	50 93 eb 00 	sts	0x00EB, r21
                                    UECFG0X = pgm_read_byte(cfg++);
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	24 91       	lpm	r18, Z
    1ffe:	20 93 ec 00 	sts	0x00EC, r18
                                    UECFG1X = pgm_read_byte(cfg++);
    2002:	9c 01       	movw	r18, r24
    2004:	2d 5f       	subi	r18, 0xFD	; 253
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	31 96       	adiw	r30, 0x01	; 1
    200a:	84 91       	lpm	r24, Z
    200c:	80 93 ed 00 	sts	0x00ED, r24
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <__vector_11+0x166>
                                } else {
                                    UECONX = 0;
    2012:	10 92 eb 00 	sts	0x00EB, r1
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<=MAX_ENDPOINT; i++) {
    2016:	4f 5f       	subi	r20, 0xFF	; 255
    2018:	47 30       	cpi	r20, 0x07	; 7
    201a:	11 f0       	breq	.+4      	; 0x2020 <__vector_11+0x170>
    201c:	c9 01       	movw	r24, r18
    201e:	e2 cf       	rjmp	.-60     	; 0x1fe4 <__vector_11+0x134>
                                    UECFG1X = pgm_read_byte(cfg++);
                                } else {
                                    UECONX = 0;
				}
			}
        		UERST = UERST_MASK;
    2020:	8e e7       	ldi	r24, 0x7E	; 126
    2022:	43 c0       	rjmp	.+134    	; 0x20aa <__vector_11+0x1fa>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2024:	88 30       	cpi	r24, 0x08	; 8
    2026:	41 f4       	brne	.+16     	; 0x2038 <__vector_11+0x188>
    2028:	90 38       	cpi	r25, 0x80	; 128
    202a:	09 f0       	breq	.+2      	; 0x202e <__vector_11+0x17e>
    202c:	52 c0       	rjmp	.+164    	; 0x20d2 <__vector_11+0x222>
			usb_wait_in_ready();
    202e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <usb_wait_in_ready>
			UEDATX = usb_configuration;
    2032:	80 91 4a 01 	lds	r24, 0x014A
    2036:	cd c0       	rjmp	.+410    	; 0x21d2 <__vector_11+0x322>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
    2038:	81 11       	cpse	r24, r1
    203a:	14 c0       	rjmp	.+40     	; 0x2064 <__vector_11+0x1b4>
			usb_wait_in_ready();
    203c:	99 83       	std	Y+1, r25	; 0x01
    203e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <usb_wait_in_ready>
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    2042:	99 81       	ldd	r25, Y+1	; 0x01
    2044:	92 38       	cpi	r25, 0x82	; 130
    2046:	51 f4       	brne	.+20     	; 0x205c <__vector_11+0x1ac>
				UENUM = wIndex;
    2048:	00 93 e9 00 	sts	0x00E9, r16
				if (UECONX & (1<<STALLRQ)) i = 1;
    204c:	80 91 eb 00 	lds	r24, 0x00EB
    2050:	85 fb       	bst	r24, 5
    2052:	88 27       	eor	r24, r24
    2054:	80 f9       	bld	r24, 0
				UENUM = 0;
    2056:	10 92 e9 00 	sts	0x00E9, r1
    205a:	01 c0       	rjmp	.+2      	; 0x205e <__vector_11+0x1ae>
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    205c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    205e:	80 93 f1 00 	sts	0x00F1, r24
    2062:	a6 c0       	rjmp	.+332    	; 0x21b0 <__vector_11+0x300>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		if (bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE) {
    2064:	48 2f       	mov	r20, r24
    2066:	4d 7f       	andi	r20, 0xFD	; 253
    2068:	41 30       	cpi	r20, 0x01	; 1
    206a:	99 f5       	brne	.+102    	; 0x20d2 <__vector_11+0x222>
#ifdef SUPPORT_ENDPOINT_HALT
		    if (bmRequestType == 0x02 && wValue == ENDPOINT_HALT) {
    206c:	92 30       	cpi	r25, 0x02	; 2
    206e:	11 f5       	brne	.+68     	; 0x20b4 <__vector_11+0x204>
    2070:	e1 14       	cp	r14, r1
    2072:	f1 04       	cpc	r15, r1
    2074:	09 f0       	breq	.+2      	; 0x2078 <__vector_11+0x1c8>
    2076:	85 c0       	rjmp	.+266    	; 0x2182 <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    2078:	40 2f       	mov	r20, r16
    207a:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    207c:	5f ef       	ldi	r21, 0xFF	; 255
    207e:	54 0f       	add	r21, r20
    2080:	56 30       	cpi	r21, 0x06	; 6
    2082:	08 f0       	brcs	.+2      	; 0x2086 <__vector_11+0x1d6>
    2084:	7e c0       	rjmp	.+252    	; 0x2182 <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2086:	9e ef       	ldi	r25, 0xFE	; 254
    2088:	90 93 e8 00 	sts	0x00E8, r25
#ifdef SUPPORT_ENDPOINT_HALT
		    if (bmRequestType == 0x02 && wValue == ENDPOINT_HALT) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    208c:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    2090:	83 30       	cpi	r24, 0x03	; 3
    2092:	09 f4       	brne	.+2      	; 0x2096 <__vector_11+0x1e6>
    2094:	cd c0       	rjmp	.+410    	; 0x2230 <__vector_11+0x380>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2096:	89 e1       	ldi	r24, 0x19	; 25
    2098:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	04 2e       	mov	r0, r20
    20a2:	01 c0       	rjmp	.+2      	; 0x20a6 <__vector_11+0x1f6>
    20a4:	88 0f       	add	r24, r24
    20a6:	0a 94       	dec	r0
    20a8:	ea f7       	brpl	.-6      	; 0x20a4 <__vector_11+0x1f4>
    20aa:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    20ae:	10 92 ea 00 	sts	0x00EA, r1
    20b2:	c1 c0       	rjmp	.+386    	; 0x2236 <__vector_11+0x386>
				}
				return;
			}
                    }
#endif
                    if (bmRequestType == 0x00 && wValue == DEVICE_REMOTE_WAKEUP) {
    20b4:	91 11       	cpse	r25, r1
    20b6:	0d c0       	rjmp	.+26     	; 0x20d2 <__vector_11+0x222>
    20b8:	f1 e0       	ldi	r31, 0x01	; 1
    20ba:	ef 16       	cp	r14, r31
    20bc:	f1 04       	cpc	r15, r1
    20be:	09 f0       	breq	.+2      	; 0x20c2 <__vector_11+0x212>
    20c0:	60 c0       	rjmp	.+192    	; 0x2182 <__vector_11+0x2d2>
                        if (bRequest == SET_FEATURE) {
    20c2:	83 30       	cpi	r24, 0x03	; 3
    20c4:	19 f4       	brne	.+6      	; 0x20cc <__vector_11+0x21c>
                            remote_wakeup = true;   
    20c6:	40 93 48 01 	sts	0x0148, r20
    20ca:	8c c0       	rjmp	.+280    	; 0x21e4 <__vector_11+0x334>
                        } else {
                            remote_wakeup = false;
    20cc:	10 92 48 01 	sts	0x0148, r1
    20d0:	89 c0       	rjmp	.+274    	; 0x21e4 <__vector_11+0x334>
                        }
                        usb_send_in();
                        return;
                    }
		}
		if (wIndex == KBD_INTERFACE) {
    20d2:	01 15       	cp	r16, r1
    20d4:	11 05       	cpc	r17, r1
    20d6:	09 f0       	breq	.+2      	; 0x20da <__vector_11+0x22a>
    20d8:	58 c0       	rjmp	.+176    	; 0x218a <__vector_11+0x2da>
			if (bmRequestType == 0xA1) {
    20da:	91 3a       	cpi	r25, 0xA1	; 161
    20dc:	61 f5       	brne	.+88     	; 0x2136 <__vector_11+0x286>
				if (bRequest == HID_GET_REPORT) {
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	d9 f4       	brne	.+54     	; 0x2118 <__vector_11+0x268>
					usb_wait_in_ready();
    20e2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <usb_wait_in_ready>
					UEDATX = keyboard_report->mods;
    20e6:	e0 91 10 01 	lds	r30, 0x0110
    20ea:	f0 91 11 01 	lds	r31, 0x0111
    20ee:	80 81       	ld	r24, Z
    20f0:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
    20f4:	10 92 f1 00 	sts	0x00F1, r1
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
					for (i=0; i<6; i++) {
						UEDATX = keyboard_report->keys[i];
    20fc:	e0 91 10 01 	lds	r30, 0x0110
    2100:	f0 91 11 01 	lds	r31, 0x0111
    2104:	e8 0f       	add	r30, r24
    2106:	f9 1f       	adc	r31, r25
    2108:	22 81       	ldd	r18, Z+2	; 0x02
    210a:	20 93 f1 00 	sts	0x00F1, r18
    210e:	01 96       	adiw	r24, 0x01	; 1
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = keyboard_report->mods;
					UEDATX = 0;
					for (i=0; i<6; i++) {
    2110:	86 30       	cpi	r24, 0x06	; 6
    2112:	91 05       	cpc	r25, r1
    2114:	99 f7       	brne	.-26     	; 0x20fc <__vector_11+0x24c>
    2116:	66 c0       	rjmp	.+204    	; 0x21e4 <__vector_11+0x334>
						UEDATX = keyboard_report->keys[i];
					}
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
    2118:	82 30       	cpi	r24, 0x02	; 2
    211a:	29 f4       	brne	.+10     	; 0x2126 <__vector_11+0x276>
					usb_wait_in_ready();
    211c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <usb_wait_in_ready>
					UEDATX = keyboard_idle;
    2120:	80 91 0c 01 	lds	r24, 0x010C
    2124:	56 c0       	rjmp	.+172    	; 0x21d2 <__vector_11+0x322>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
    2126:	83 30       	cpi	r24, 0x03	; 3
    2128:	09 f0       	breq	.+2      	; 0x212c <__vector_11+0x27c>
    212a:	82 c0       	rjmp	.+260    	; 0x2230 <__vector_11+0x380>
					usb_wait_in_ready();
    212c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <usb_wait_in_ready>
					UEDATX = keyboard_protocol;
    2130:	80 91 0d 01 	lds	r24, 0x010D
    2134:	4e c0       	rjmp	.+156    	; 0x21d2 <__vector_11+0x322>
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
    2136:	91 32       	cpi	r25, 0x21	; 33
    2138:	09 f0       	breq	.+2      	; 0x213c <__vector_11+0x28c>
    213a:	7a c0       	rjmp	.+244    	; 0x2230 <__vector_11+0x380>
				if (bRequest == HID_SET_REPORT) {
    213c:	89 30       	cpi	r24, 0x09	; 9
    213e:	61 f4       	brne	.+24     	; 0x2158 <__vector_11+0x2a8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2140:	80 91 e8 00 	lds	r24, 0x00E8
    2144:	82 ff       	sbrs	r24, 2
    2146:	fc cf       	rjmp	.-8      	; 0x2140 <__vector_11+0x290>
				}
			}
			if (bmRequestType == 0x21) {
				if (bRequest == HID_SET_REPORT) {
					usb_wait_receive_out();
					usb_keyboard_leds = UEDATX;
    2148:	80 91 f1 00 	lds	r24, 0x00F1
    214c:	80 93 43 01 	sts	0x0143, r24
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2150:	8b ef       	ldi	r24, 0xFB	; 251
    2152:	80 93 e8 00 	sts	0x00E8, r24
    2156:	46 c0       	rjmp	.+140    	; 0x21e4 <__vector_11+0x334>
					usb_keyboard_leds = UEDATX;
					usb_ack_out();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_IDLE) {
    2158:	8a 30       	cpi	r24, 0x0A	; 10
    215a:	29 f4       	brne	.+10     	; 0x2166 <__vector_11+0x2b6>
					keyboard_idle = (wValue >> 8);
    215c:	f0 92 0c 01 	sts	0x010C, r15
					usb_keyboard_idle_count = 0;
    2160:	10 92 44 01 	sts	0x0144, r1
    2164:	3f c0       	rjmp	.+126    	; 0x21e4 <__vector_11+0x334>
					//usb_wait_in_ready();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_PROTOCOL) {
    2166:	8b 30       	cpi	r24, 0x0B	; 11
    2168:	09 f0       	breq	.+2      	; 0x216c <__vector_11+0x2bc>
    216a:	62 c0       	rjmp	.+196    	; 0x2230 <__vector_11+0x380>
					keyboard_protocol = wValue;
    216c:	e0 92 0d 01 	sts	0x010D, r14
#ifdef NKRO_ENABLE
                                        keyboard_nkro = !!keyboard_protocol;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	e1 10       	cpse	r14, r1
    2174:	01 c0       	rjmp	.+2      	; 0x2178 <__vector_11+0x2c8>
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	80 93 0f 01 	sts	0x010F, r24
#endif
                                        clear_keyboard();
    217c:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <clear_keyboard>
    2180:	31 c0       	rjmp	.+98     	; 0x21e4 <__vector_11+0x334>
                        }
                        usb_send_in();
                        return;
                    }
		}
		if (wIndex == KBD_INTERFACE) {
    2182:	01 15       	cp	r16, r1
    2184:	11 05       	cpc	r17, r1
    2186:	09 f4       	brne	.+2      	; 0x218a <__vector_11+0x2da>
    2188:	53 c0       	rjmp	.+166    	; 0x2230 <__vector_11+0x380>
					return;
				}
			}
		}
#ifdef MOUSE_ENABLE
		if (wIndex == MOUSE_INTERFACE) {
    218a:	01 30       	cpi	r16, 0x01	; 1
    218c:	11 05       	cpc	r17, r1
    218e:	71 f5       	brne	.+92     	; 0x21ec <__vector_11+0x33c>
			if (bmRequestType == 0xA1) {
    2190:	91 3a       	cpi	r25, 0xA1	; 161
    2192:	11 f5       	brne	.+68     	; 0x21d8 <__vector_11+0x328>
				if (bRequest == HID_GET_REPORT) {
    2194:	81 30       	cpi	r24, 0x01	; 1
    2196:	b9 f4       	brne	.+46     	; 0x21c6 <__vector_11+0x316>
                                    if (wValue == HID_REPORT_INPUT) {
    2198:	51 e0       	ldi	r21, 0x01	; 1
    219a:	e5 16       	cp	r14, r21
    219c:	f1 04       	cpc	r15, r1
    219e:	59 f4       	brne	.+22     	; 0x21b6 <__vector_11+0x306>
					usb_wait_in_ready();
    21a0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <usb_wait_in_ready>
					UEDATX = 0;
    21a4:	10 92 f1 00 	sts	0x00F1, r1
					UEDATX = 0;
    21a8:	10 92 f1 00 	sts	0x00F1, r1
					UEDATX = 0;
    21ac:	10 92 f1 00 	sts	0x00F1, r1
					UEDATX = 0;
    21b0:	10 92 f1 00 	sts	0x00F1, r1
    21b4:	17 c0       	rjmp	.+46     	; 0x21e4 <__vector_11+0x334>
					usb_send_in();
					return;
                                    }
                                    if (wValue == HID_REPORT_FEATURE) {
    21b6:	83 e0       	ldi	r24, 0x03	; 3
    21b8:	e8 16       	cp	r14, r24
    21ba:	f1 04       	cpc	r15, r1
    21bc:	c9 f5       	brne	.+114    	; 0x2230 <__vector_11+0x380>
					usb_wait_in_ready();
    21be:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <usb_wait_in_ready>
					UEDATX = 0x05;
    21c2:	85 e0       	ldi	r24, 0x05	; 5
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <__vector_11+0x322>
					usb_send_in();
					return;
                                    }
				}
				if (bRequest == HID_GET_PROTOCOL) {
    21c6:	83 30       	cpi	r24, 0x03	; 3
    21c8:	99 f5       	brne	.+102    	; 0x2230 <__vector_11+0x380>
					usb_wait_in_ready();
    21ca:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <usb_wait_in_ready>
					UEDATX = usb_mouse_protocol;
    21ce:	80 91 0e 01 	lds	r24, 0x010E
    21d2:	80 93 f1 00 	sts	0x00F1, r24
    21d6:	06 c0       	rjmp	.+12     	; 0x21e4 <__vector_11+0x334>
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
    21d8:	91 32       	cpi	r25, 0x21	; 33
    21da:	51 f5       	brne	.+84     	; 0x2230 <__vector_11+0x380>
				if (bRequest == HID_SET_PROTOCOL) {
    21dc:	8b 30       	cpi	r24, 0x0B	; 11
    21de:	41 f5       	brne	.+80     	; 0x2230 <__vector_11+0x380>
					usb_mouse_protocol = wValue;
    21e0:	e0 92 0e 01 	sts	0x010E, r14
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21e4:	8e ef       	ldi	r24, 0xFE	; 254
    21e6:	80 93 e8 00 	sts	0x00E8, r24
    21ea:	25 c0       	rjmp	.+74     	; 0x2236 <__vector_11+0x386>
					return;
				}
			}
		}
#endif
		if (wIndex == DEBUG_INTERFACE) {
    21ec:	02 30       	cpi	r16, 0x02	; 2
    21ee:	11 05       	cpc	r17, r1
    21f0:	f9 f4       	brne	.+62     	; 0x2230 <__vector_11+0x380>
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	e9 f4       	brne	.+58     	; 0x2230 <__vector_11+0x380>
    21f6:	91 3a       	cpi	r25, 0xA1	; 161
    21f8:	d9 f4       	brne	.+54     	; 0x2230 <__vector_11+0x380>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    21fa:	3e ef       	ldi	r19, 0xFE	; 254
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
    21fc:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2200:	98 2f       	mov	r25, r24
    2202:	95 70       	andi	r25, 0x05	; 5
    2204:	d9 f3       	breq	.-10     	; 0x21fc <__vector_11+0x34c>
					if (i & (1<<RXOUTI)) return;	// abort
    2206:	82 fd       	sbrc	r24, 2
    2208:	16 c0       	rjmp	.+44     	; 0x2236 <__vector_11+0x386>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    220a:	82 2f       	mov	r24, r18
    220c:	21 32       	cpi	r18, 0x21	; 33
    220e:	08 f0       	brcs	.+2      	; 0x2212 <__vector_11+0x362>
    2210:	80 e2       	ldi	r24, 0x20	; 32
					for (i = n; i; i--) {
    2212:	98 2f       	mov	r25, r24
    2214:	99 23       	and	r25, r25
    2216:	21 f0       	breq	.+8      	; 0x2220 <__vector_11+0x370>
						UEDATX = 0;
    2218:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
    221c:	91 50       	subi	r25, 0x01	; 1
    221e:	fa cf       	rjmp	.-12     	; 0x2214 <__vector_11+0x364>
						UEDATX = 0;
					}
					len -= n;
    2220:	28 1b       	sub	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2222:	30 93 e8 00 	sts	0x00E8, r19
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
    2226:	21 11       	cpse	r18, r1
    2228:	e9 cf       	rjmp	.-46     	; 0x21fc <__vector_11+0x34c>
    222a:	80 32       	cpi	r24, 0x20	; 32
    222c:	39 f3       	breq	.-50     	; 0x21fc <__vector_11+0x34c>
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <__vector_11+0x386>
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2230:	81 e2       	ldi	r24, 0x21	; 33
    2232:	80 93 eb 00 	sts	0x00EB, r24
}
    2236:	0f 90       	pop	r0
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	ff 91       	pop	r31
    223e:	ef 91       	pop	r30
    2240:	bf 91       	pop	r27
    2242:	af 91       	pop	r26
    2244:	9f 91       	pop	r25
    2246:	8f 91       	pop	r24
    2248:	7f 91       	pop	r23
    224a:	6f 91       	pop	r22
    224c:	5f 91       	pop	r21
    224e:	4f 91       	pop	r20
    2250:	3f 91       	pop	r19
    2252:	2f 91       	pop	r18
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	0f 90       	pop	r0
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	0f 90       	pop	r0
    2262:	1f 90       	pop	r1
    2264:	18 95       	reti

00002266 <usb_mouse_send>:

uint8_t usb_mouse_protocol=1;


int8_t usb_mouse_send(int8_t x, int8_t y, int8_t wheel_v, int8_t wheel_h, uint8_t buttons)
{
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	00 d0       	rcall	.+0      	; 0x2274 <usb_mouse_send+0xe>
    2274:	1f 92       	push	r1
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	e8 2e       	mov	r14, r24
    227c:	14 2f       	mov	r17, r20
	uint8_t intr_state, timeout;

	if (!usb_configured()) return -1;
    227e:	2b 83       	std	Y+3, r18	; 0x03
    2280:	6a 83       	std	Y+2, r22	; 0x02
    2282:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <usb_configured>
    2286:	2b 81       	ldd	r18, Y+3	; 0x03
    2288:	6a 81       	ldd	r22, Y+2	; 0x02
    228a:	81 11       	cpse	r24, r1
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <usb_mouse_send+0x2c>
    228e:	8f ef       	ldi	r24, 0xFF	; 255
    2290:	43 c0       	rjmp	.+134    	; 0x2318 <usb_mouse_send+0xb2>
	if (x == -128) x = -127;
    2292:	80 e8       	ldi	r24, 0x80	; 128
    2294:	e8 12       	cpse	r14, r24
    2296:	02 c0       	rjmp	.+4      	; 0x229c <usb_mouse_send+0x36>
    2298:	41 e8       	ldi	r20, 0x81	; 129
    229a:	e4 2e       	mov	r14, r20
	if (y == -128) y = -127;
    229c:	60 38       	cpi	r22, 0x80	; 128
    229e:	09 f4       	brne	.+2      	; 0x22a2 <usb_mouse_send+0x3c>
    22a0:	61 e8       	ldi	r22, 0x81	; 129
	if (wheel_v == -128) wheel_v = -127;
    22a2:	10 38       	cpi	r17, 0x80	; 128
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <usb_mouse_send+0x42>
    22a6:	11 e8       	ldi	r17, 0x81	; 129
	if (wheel_h == -128) wheel_h = -127;
    22a8:	20 38       	cpi	r18, 0x80	; 128
    22aa:	09 f4       	brne	.+2      	; 0x22ae <usb_mouse_send+0x48>
    22ac:	21 e8       	ldi	r18, 0x81	; 129
	intr_state = SREG;
    22ae:	8f b7       	in	r24, 0x3f	; 63
	cli();
    22b0:	f8 94       	cli
	UENUM = MOUSE_ENDPOINT;
    22b2:	92 e0       	ldi	r25, 0x02	; 2
    22b4:	90 93 e9 00 	sts	0x00E9, r25
	timeout = UDFNUML + 50;
    22b8:	90 91 e4 00 	lds	r25, 0x00E4
    22bc:	9e 5c       	subi	r25, 0xCE	; 206
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = MOUSE_ENDPOINT;
    22be:	32 e0       	ldi	r19, 0x02	; 2
    22c0:	f3 2e       	mov	r15, r19
	cli();
	UENUM = MOUSE_ENDPOINT;
	timeout = UDFNUML + 50;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    22c2:	30 91 e8 00 	lds	r19, 0x00E8
    22c6:	35 fd       	sbrc	r19, 5
    22c8:	14 c0       	rjmp	.+40     	; 0x22f2 <usb_mouse_send+0x8c>
		SREG = intr_state;
    22ca:	8f bf       	out	0x3f, r24	; 63
		// has the USB gone offline?
		if (!usb_configured()) return -1;
    22cc:	2b 83       	std	Y+3, r18	; 0x03
    22ce:	6a 83       	std	Y+2, r22	; 0x02
    22d0:	99 83       	std	Y+1, r25	; 0x01
    22d2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <usb_configured>
    22d6:	2b 81       	ldd	r18, Y+3	; 0x03
    22d8:	6a 81       	ldd	r22, Y+2	; 0x02
    22da:	99 81       	ldd	r25, Y+1	; 0x01
    22dc:	88 23       	and	r24, r24
    22de:	b9 f2       	breq	.-82     	; 0x228e <usb_mouse_send+0x28>
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
    22e0:	80 91 e4 00 	lds	r24, 0x00E4
    22e4:	89 17       	cp	r24, r25
    22e6:	99 f2       	breq	.-90     	; 0x228e <usb_mouse_send+0x28>
		// get ready to try checking again
		intr_state = SREG;
    22e8:	8f b7       	in	r24, 0x3f	; 63
		cli();
    22ea:	f8 94       	cli
		UENUM = MOUSE_ENDPOINT;
    22ec:	f0 92 e9 00 	sts	0x00E9, r15
	}
    22f0:	e8 cf       	rjmp	.-48     	; 0x22c2 <usb_mouse_send+0x5c>
	UEDATX = buttons;
    22f2:	00 93 f1 00 	sts	0x00F1, r16
	UEDATX = x;
    22f6:	e0 92 f1 00 	sts	0x00F1, r14
	UEDATX = y;
    22fa:	60 93 f1 00 	sts	0x00F1, r22
        if (usb_mouse_protocol) {
    22fe:	90 91 0e 01 	lds	r25, 0x010E
    2302:	99 23       	and	r25, r25
    2304:	21 f0       	breq	.+8      	; 0x230e <usb_mouse_send+0xa8>
            UEDATX = wheel_v;
    2306:	10 93 f1 00 	sts	0x00F1, r17
            UEDATX = wheel_h;
    230a:	20 93 f1 00 	sts	0x00F1, r18
        }
        
	UEINTX = 0x3A;
    230e:	9a e3       	ldi	r25, 0x3A	; 58
    2310:	90 93 e8 00 	sts	0x00E8, r25
	SREG = intr_state;
    2314:	8f bf       	out	0x3f, r24	; 63
	return 0;
    2316:	80 e0       	ldi	r24, 0x00	; 0
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	08 95       	ret

0000232c <usb_extra_send>:
#include "host.h"
#include "usb_extra.h"


int8_t usb_extra_send(uint8_t report_id, uint16_t data)
{
    232c:	ff 92       	push	r15
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	d8 2f       	mov	r29, r24
    2338:	8b 01       	movw	r16, r22
	uint8_t intr_state, timeout;

	if (!usb_configured()) return -1;
    233a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <usb_configured>
    233e:	81 11       	cpse	r24, r1
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <usb_extra_send+0x1a>
    2342:	8f ef       	ldi	r24, 0xFF	; 255
    2344:	27 c0       	rjmp	.+78     	; 0x2394 <usb_extra_send+0x68>
	intr_state = SREG;
    2346:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2348:	f8 94       	cli
	UENUM = EXTRA_ENDPOINT;
    234a:	84 e0       	ldi	r24, 0x04	; 4
    234c:	80 93 e9 00 	sts	0x00E9, r24
	timeout = UDFNUML + 50;
    2350:	c0 91 e4 00 	lds	r28, 0x00E4
    2354:	ce 5c       	subi	r28, 0xCE	; 206
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = EXTRA_ENDPOINT;
    2356:	84 e0       	ldi	r24, 0x04	; 4
    2358:	f8 2e       	mov	r15, r24
	cli();
	UENUM = EXTRA_ENDPOINT;
	timeout = UDFNUML + 50;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    235a:	80 91 e8 00 	lds	r24, 0x00E8
    235e:	85 fd       	sbrc	r24, 5
    2360:	0e c0       	rjmp	.+28     	; 0x237e <usb_extra_send+0x52>
		SREG = intr_state;
    2362:	9f bf       	out	0x3f, r25	; 63
		// has the USB gone offline?
		if (!usb_configured()) return -1;
    2364:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <usb_configured>
    2368:	88 23       	and	r24, r24
    236a:	59 f3       	breq	.-42     	; 0x2342 <usb_extra_send+0x16>
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
    236c:	80 91 e4 00 	lds	r24, 0x00E4
    2370:	8c 17       	cp	r24, r28
    2372:	39 f3       	breq	.-50     	; 0x2342 <usb_extra_send+0x16>
		// get ready to try checking again
		intr_state = SREG;
    2374:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2376:	f8 94       	cli
		UENUM = EXTRA_ENDPOINT;
    2378:	f0 92 e9 00 	sts	0x00E9, r15
	}
    237c:	ee cf       	rjmp	.-36     	; 0x235a <usb_extra_send+0x2e>

	UEDATX = report_id;
    237e:	d0 93 f1 00 	sts	0x00F1, r29
        UEDATX = data&0xFF;
    2382:	00 93 f1 00 	sts	0x00F1, r16
        UEDATX = (data>>8)&0xFF;
    2386:	10 93 f1 00 	sts	0x00F1, r17

	UEINTX = 0x3A;
    238a:	8a e3       	ldi	r24, 0x3A	; 58
    238c:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
    2390:	9f bf       	out	0x3f, r25	; 63
	return 0;
    2392:	80 e0       	ldi	r24, 0x00	; 0
}
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	08 95       	ret

000023a0 <usb_extra_consumer_send>:

int8_t usb_extra_consumer_send(uint16_t bits)
{
	return usb_extra_send(REPORT_ID_CONSUMER, bits);
    23a0:	bc 01       	movw	r22, r24
    23a2:	83 e0       	ldi	r24, 0x03	; 3
    23a4:	0c 94 96 11 	jmp	0x232c	; 0x232c <usb_extra_send>

000023a8 <usb_extra_system_send>:
}

int8_t usb_extra_system_send(uint16_t bits)
{
	return usb_extra_send(REPORT_ID_SYSTEM, bits);
    23a8:	bc 01       	movw	r22, r24
    23aa:	82 e0       	ldi	r24, 0x02	; 2
    23ac:	0c 94 96 11 	jmp	0x232c	; 0x232c <usb_extra_send>

000023b0 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    23b0:	90 93 50 01 	sts	0x0150, r25
    23b4:	80 93 4f 01 	sts	0x014F, r24
    23b8:	08 95       	ret

000023ba <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    23ba:	80 91 4f 01 	lds	r24, 0x014F
    23be:	90 91 50 01 	lds	r25, 0x0150
    23c2:	08 95       	ret

000023c4 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    23c4:	e0 91 4f 01 	lds	r30, 0x014F
    23c8:	f0 91 50 01 	lds	r31, 0x0150
    23cc:	30 97       	sbiw	r30, 0x00	; 0
    23ce:	21 f0       	breq	.+8      	; 0x23d8 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    23d0:	01 90       	ld	r0, Z+
    23d2:	f0 81       	ld	r31, Z
    23d4:	e0 2d       	mov	r30, r0
    23d6:	09 94       	ijmp
}
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	08 95       	ret

000023dc <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	8c 01       	movw	r16, r24
    if (!driver) return;
    23e8:	e0 91 4f 01 	lds	r30, 0x014F
    23ec:	f0 91 50 01 	lds	r31, 0x0150
    23f0:	30 97       	sbiw	r30, 0x00	; 0
    23f2:	99 f1       	breq	.+102    	; 0x245a <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    23f4:	02 80       	ldd	r0, Z+2	; 0x02
    23f6:	f3 81       	ldd	r31, Z+3	; 0x03
    23f8:	e0 2d       	mov	r30, r0
    23fa:	09 95       	icall

    if (debug_keyboard) {
    23fc:	80 91 b3 01 	lds	r24, 0x01B3
    2400:	82 ff       	sbrs	r24, 2
    2402:	2b c0       	rjmp	.+86     	; 0x245a <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    2404:	80 ff       	sbrs	r24, 0
    2406:	04 c0       	rjmp	.+8      	; 0x2410 <host_keyboard_send+0x34>
    2408:	81 ec       	ldi	r24, 0xC1	; 193
    240a:	95 e0       	ldi	r25, 0x05	; 5
    240c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    2410:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2412:	80 e1       	ldi	r24, 0x10	; 16
    2414:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2416:	0b eb       	ldi	r16, 0xBB	; 187
    2418:	15 e0       	ldi	r17, 0x05	; 5
    241a:	80 91 b3 01 	lds	r24, 0x01B3
    241e:	80 ff       	sbrs	r24, 0
    2420:	0b c0       	rjmp	.+22     	; 0x2438 <host_keyboard_send+0x5c>
    2422:	88 81       	ld	r24, Y
    2424:	1f 92       	push	r1
    2426:	8f 93       	push	r24
    2428:	1f 93       	push	r17
    242a:	0f 93       	push	r16
    242c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	fa 94       	dec	r15
    243a:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    243c:	f1 10       	cpse	r15, r1
    243e:	ed cf       	rjmp	.-38     	; 0x241a <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2440:	80 91 b3 01 	lds	r24, 0x01B3
    2444:	80 ff       	sbrs	r24, 0
    2446:	09 c0       	rjmp	.+18     	; 0x245a <host_keyboard_send+0x7e>
    2448:	89 eb       	ldi	r24, 0xB9	; 185
    244a:	95 e0       	ldi	r25, 0x05	; 5
    }
}
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2456:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <xputs>
    }
}
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	ff 90       	pop	r15
    2464:	08 95       	ret

00002466 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2466:	e0 91 4f 01 	lds	r30, 0x014F
    246a:	f0 91 50 01 	lds	r31, 0x0150
    246e:	30 97       	sbiw	r30, 0x00	; 0
    2470:	21 f0       	breq	.+8      	; 0x247a <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2472:	04 80       	ldd	r0, Z+4	; 0x04
    2474:	f5 81       	ldd	r31, Z+5	; 0x05
    2476:	e0 2d       	mov	r30, r0
    2478:	09 94       	ijmp
    247a:	08 95       	ret

0000247c <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    247c:	20 91 4d 01 	lds	r18, 0x014D
    2480:	30 91 4e 01 	lds	r19, 0x014E
    2484:	82 17       	cp	r24, r18
    2486:	93 07       	cpc	r25, r19
    2488:	71 f0       	breq	.+28     	; 0x24a6 <host_system_send+0x2a>
    last_system_report = report;
    248a:	90 93 4e 01 	sts	0x014E, r25
    248e:	80 93 4d 01 	sts	0x014D, r24

    if (!driver) return;
    2492:	e0 91 4f 01 	lds	r30, 0x014F
    2496:	f0 91 50 01 	lds	r31, 0x0150
    249a:	30 97       	sbiw	r30, 0x00	; 0
    249c:	21 f0       	breq	.+8      	; 0x24a6 <host_system_send+0x2a>
    (*driver->send_system)(report);
    249e:	06 80       	ldd	r0, Z+6	; 0x06
    24a0:	f7 81       	ldd	r31, Z+7	; 0x07
    24a2:	e0 2d       	mov	r30, r0
    24a4:	09 94       	ijmp
    24a6:	08 95       	ret

000024a8 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    24a8:	20 91 4b 01 	lds	r18, 0x014B
    24ac:	30 91 4c 01 	lds	r19, 0x014C
    24b0:	82 17       	cp	r24, r18
    24b2:	93 07       	cpc	r25, r19
    24b4:	71 f0       	breq	.+28     	; 0x24d2 <host_consumer_send+0x2a>
    last_consumer_report = report;
    24b6:	90 93 4c 01 	sts	0x014C, r25
    24ba:	80 93 4b 01 	sts	0x014B, r24

    if (!driver) return;
    24be:	e0 91 4f 01 	lds	r30, 0x014F
    24c2:	f0 91 50 01 	lds	r31, 0x0150
    24c6:	30 97       	sbiw	r30, 0x00	; 0
    24c8:	21 f0       	breq	.+8      	; 0x24d2 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    24ca:	00 84       	ldd	r0, Z+8	; 0x08
    24cc:	f1 85       	ldd	r31, Z+9	; 0x09
    24ce:	e0 2d       	mov	r30, r0
    24d0:	09 94       	ijmp
    24d2:	08 95       	ret

000024d4 <keyboard_init>:
#endif


void keyboard_init(void)
{
    timer_init();
    24d4:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <timer_init>
    matrix_init();
    24d8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <matrix_init>
    serial_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    24dc:	0c 94 a1 20 	jmp	0x4142	; 0x4142 <bootmagic>

000024e0 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    24e0:	cf 93       	push	r28
    24e2:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    24e4:	80 91 b3 01 	lds	r24, 0x01B3
    24e8:	82 ff       	sbrs	r24, 2
    24ea:	1e c0       	rjmp	.+60     	; 0x2528 <keyboard_set_leds+0x48>
    24ec:	80 ff       	sbrs	r24, 0
    24ee:	04 c0       	rjmp	.+8      	; 0x24f8 <keyboard_set_leds+0x18>
    24f0:	8a ed       	ldi	r24, 0xDA	; 218
    24f2:	95 e0       	ldi	r25, 0x05	; 5
    24f4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    24f8:	80 91 b3 01 	lds	r24, 0x01B3
    24fc:	80 ff       	sbrs	r24, 0
    24fe:	0c c0       	rjmp	.+24     	; 0x2518 <keyboard_set_leds+0x38>
    2500:	1f 92       	push	r1
    2502:	cf 93       	push	r28
    2504:	25 ed       	ldi	r18, 0xD5	; 213
    2506:	35 e0       	ldi	r19, 0x05	; 5
    2508:	3f 93       	push	r19
    250a:	2f 93       	push	r18
    250c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	80 91 b3 01 	lds	r24, 0x01B3
    251c:	80 ff       	sbrs	r24, 0
    251e:	04 c0       	rjmp	.+8      	; 0x2528 <keyboard_set_leds+0x48>
    2520:	83 ed       	ldi	r24, 0xD3	; 211
    2522:	95 e0       	ldi	r25, 0x05	; 5
    2524:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    led_set(leds);
    2528:	8c 2f       	mov	r24, r28
}
    252a:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    252c:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <led_set>

00002530 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2530:	cf 92       	push	r12
    2532:	df 92       	push	r13
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	2b 97       	sbiw	r28, 0x0b	; 11
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2550:	0e 94 84 0a 	call	0x1508	; 0x1508 <matrix_scan>
    2554:	32 e5       	ldi	r19, 0x52	; 82
    2556:	e3 2e       	mov	r14, r19
    2558:	31 e0       	ldi	r19, 0x01	; 1
    255a:	f3 2e       	mov	r15, r19
    255c:	00 e0       	ldi	r16, 0x00	; 0
    255e:	10 e0       	ldi	r17, 0x00	; 0
    2560:	c0 2e       	mov	r12, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2562:	80 2f       	mov	r24, r16
    2564:	0e 94 af 0b 	call	0x175e	; 0x175e <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    2568:	f7 01       	movw	r30, r14
    256a:	d1 90       	ld	r13, Z+
    256c:	7f 01       	movw	r14, r30
    256e:	d8 26       	eor	r13, r24
        if (matrix_change) {
    2570:	b1 f4       	brne	.+44     	; 0x259e <keyboard_task+0x6e>
    2572:	0f 5f       	subi	r16, 0xFF	; 255
    2574:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2576:	0e 30       	cpi	r16, 0x0E	; 14
    2578:	11 05       	cpc	r17, r1
    257a:	91 f7       	brne	.-28     	; 0x2560 <keyboard_task+0x30>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    257c:	8f ef       	ldi	r24, 0xFF	; 255
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	8a 83       	std	Y+2, r24	; 0x02
    2582:	1b 82       	std	Y+3, r1	; 0x03
    2584:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <timer_read>
    2588:	81 60       	ori	r24, 0x01	; 1
    258a:	78 2f       	mov	r23, r24
    258c:	9d 83       	std	Y+5, r25	; 0x05
    258e:	8c 83       	std	Y+4, r24	; 0x04
    2590:	49 81       	ldd	r20, Y+1	; 0x01
    2592:	5a 81       	ldd	r21, Y+2	; 0x02
    2594:	6b 81       	ldd	r22, Y+3	; 0x03
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	0e 94 3b 13 	call	0x2676	; 0x2676 <action_exec>
    259c:	41 c0       	rjmp	.+130    	; 0x2620 <keyboard_task+0xf0>
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
        matrix_change = matrix_row ^ matrix_prev[r];
        if (matrix_change) {
            if (debug_matrix) matrix_print();
    259e:	90 91 b3 01 	lds	r25, 0x01B3
    25a2:	91 ff       	sbrs	r25, 1
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <keyboard_task+0x7e>
    25a6:	8b 87       	std	Y+11, r24	; 0x0b
    25a8:	0e 94 b5 0b 	call	0x176a	; 0x176a <matrix_print>
    25ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    25b2:	4d 2d       	mov	r20, r13
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	92 2f       	mov	r25, r18
    25b8:	ba 01       	movw	r22, r20
    25ba:	02 2e       	mov	r0, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <keyboard_task+0x92>
    25be:	75 95       	asr	r23
    25c0:	67 95       	ror	r22
    25c2:	0a 94       	dec	r0
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <keyboard_task+0x8e>
    25c6:	60 ff       	sbrs	r22, 0
    25c8:	25 c0       	rjmp	.+74     	; 0x2614 <keyboard_task+0xe4>
                    action_exec((keyevent_t){
    25ca:	2e 83       	std	Y+6, r18	; 0x06
    25cc:	cf 82       	std	Y+7, r12	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    25ce:	ee 24       	eor	r14, r14
    25d0:	e3 94       	inc	r14
    25d2:	f1 2c       	mov	r15, r1
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <keyboard_task+0xaa>
    25d6:	ee 0c       	add	r14, r14
    25d8:	ff 1c       	adc	r15, r15
    25da:	9a 95       	dec	r25
    25dc:	e2 f7       	brpl	.-8      	; 0x25d6 <keyboard_task+0xa6>
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	8e 21       	and	r24, r14
    25e2:	9f 21       	and	r25, r15
    25e4:	21 e0       	ldi	r18, 0x01	; 1
    25e6:	89 2b       	or	r24, r25
    25e8:	09 f4       	brne	.+2      	; 0x25ec <keyboard_task+0xbc>
    25ea:	20 e0       	ldi	r18, 0x00	; 0
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    25ec:	28 87       	std	Y+8, r18	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    25ee:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <timer_read>
    25f2:	81 60       	ori	r24, 0x01	; 1
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    25f4:	78 2f       	mov	r23, r24
    25f6:	9a 87       	std	Y+10, r25	; 0x0a
    25f8:	89 87       	std	Y+9, r24	; 0x09
    25fa:	4e 81       	ldd	r20, Y+6	; 0x06
    25fc:	5f 81       	ldd	r21, Y+7	; 0x07
    25fe:	68 85       	ldd	r22, Y+8	; 0x08
    2600:	8a 85       	ldd	r24, Y+10	; 0x0a
    2602:	0e 94 3b 13 	call	0x2676	; 0x2676 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2606:	f8 01       	movw	r30, r16
    2608:	ee 5a       	subi	r30, 0xAE	; 174
    260a:	fe 4f       	sbci	r31, 0xFE	; 254
    260c:	80 81       	ld	r24, Z
    260e:	8e 25       	eor	r24, r14
    2610:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    2612:	06 c0       	rjmp	.+12     	; 0x2620 <keyboard_task+0xf0>
    2614:	2f 5f       	subi	r18, 0xFF	; 255
    2616:	3f 4f       	sbci	r19, 0xFF	; 255
            if (has_ghost_in_row(r)) {
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2618:	26 30       	cpi	r18, 0x06	; 6
    261a:	31 05       	cpc	r19, r1
    261c:	61 f6       	brne	.-104    	; 0x25b6 <keyboard_task+0x86>
    261e:	a9 cf       	rjmp	.-174    	; 0x2572 <keyboard_task+0x42>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2620:	0e 94 0f 24 	call	0x481e	; 0x481e <mousekey_task>
#ifdef SERIAL_MOUSE_ENABLE
        serial_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2624:	10 91 51 01 	lds	r17, 0x0151
    2628:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    262c:	18 17       	cp	r17, r24
    262e:	a1 f0       	breq	.+40     	; 0x2658 <keyboard_task+0x128>
        led_status = host_keyboard_leds();
    2630:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    2634:	80 93 51 01 	sts	0x0151, r24
        keyboard_set_leds(led_status);
    }
}
    2638:	2b 96       	adiw	r28, 0x0b	; 11
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	ff 90       	pop	r15
    264e:	ef 90       	pop	r14
    2650:	df 90       	pop	r13
    2652:	cf 90       	pop	r12
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2654:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <keyboard_set_leds>
    }
}
    2658:	2b 96       	adiw	r28, 0x0b	; 11
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	1f 91       	pop	r17
    266a:	0f 91       	pop	r16
    266c:	ff 90       	pop	r15
    266e:	ef 90       	pop	r14
    2670:	df 90       	pop	r13
    2672:	cf 90       	pop	r12
    2674:	08 95       	ret

00002676 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	2b 97       	sbiw	r28, 0x0b	; 11
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	4f 83       	std	Y+7, r20	; 0x07
    268c:	58 87       	std	Y+8, r21	; 0x08
    268e:	69 87       	std	Y+9, r22	; 0x09
    2690:	7a 87       	std	Y+10, r23	; 0x0a
    2692:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2694:	de 01       	movw	r26, r28
    2696:	11 96       	adiw	r26, 0x01	; 1
    2698:	86 e0       	ldi	r24, 0x06	; 6
    269a:	fd 01       	movw	r30, r26
    269c:	11 92       	st	Z+, r1
    269e:	8a 95       	dec	r24
    26a0:	e9 f7       	brne	.-6      	; 0x269c <action_exec+0x26>
    26a2:	85 e0       	ldi	r24, 0x05	; 5
    26a4:	fe 01       	movw	r30, r28
    26a6:	37 96       	adiw	r30, 0x07	; 7
    26a8:	01 90       	ld	r0, Z+
    26aa:	0d 92       	st	X+, r0
    26ac:	8a 95       	dec	r24
    26ae:	e1 f7       	brne	.-8      	; 0x26a8 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    26b0:	49 81       	ldd	r20, Y+1	; 0x01
    26b2:	5a 81       	ldd	r21, Y+2	; 0x02
    26b4:	6b 81       	ldd	r22, Y+3	; 0x03
    26b6:	7c 81       	ldd	r23, Y+4	; 0x04
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	9e 81       	ldd	r25, Y+6	; 0x06
    26bc:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    26c0:	2b 96       	adiw	r28, 0x0b	; 11
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	08 95       	ret

000026d2 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    26d2:	cf 93       	push	r28
    26d4:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    26d6:	88 23       	and	r24, r24
    26d8:	09 f4       	brne	.+2      	; 0x26dc <register_code+0xa>
    26da:	c1 c0       	rjmp	.+386    	; 0x285e <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    26dc:	82 38       	cpi	r24, 0x82	; 130
    26de:	59 f4       	brne	.+22     	; 0x26f6 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    26e0:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    26e4:	81 fd       	sbrc	r24, 1
    26e6:	bb c0       	rjmp	.+374    	; 0x285e <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    26e8:	89 e3       	ldi	r24, 0x39	; 57
    26ea:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    26ee:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    26f2:	89 e3       	ldi	r24, 0x39	; 57
    26f4:	0c c0       	rjmp	.+24     	; 0x270e <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    26f6:	83 38       	cpi	r24, 0x83	; 131
    26f8:	79 f4       	brne	.+30     	; 0x2718 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    26fa:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    26fe:	80 fd       	sbrc	r24, 0
    2700:	ae c0       	rjmp	.+348    	; 0x285e <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    2702:	83 e5       	ldi	r24, 0x53	; 83
    2704:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    2708:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <send_keyboard_report>
        del_key(KC_NUMLOCK);
    270c:	83 e5       	ldi	r24, 0x53	; 83
    270e:	0e 94 56 1d 	call	0x3aac	; 0x3aac <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2712:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2714:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2718:	84 38       	cpi	r24, 0x84	; 132
    271a:	59 f4       	brne	.+22     	; 0x2732 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    271c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    2720:	82 fd       	sbrc	r24, 2
    2722:	9d c0       	rjmp	.+314    	; 0x285e <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    2724:	87 e4       	ldi	r24, 0x47	; 71
    2726:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    272a:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    272e:	87 e4       	ldi	r24, 0x47	; 71
    2730:	ee cf       	rjmp	.-36     	; 0x270e <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2732:	8c ef       	ldi	r24, 0xFC	; 252
    2734:	8c 0f       	add	r24, r28
    2736:	81 3a       	cpi	r24, 0xA1	; 161
    2738:	48 f4       	brcc	.+18     	; 0x274c <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    273a:	8c 2f       	mov	r24, r28
    273c:	0e 94 32 2a 	call	0x5464	; 0x5464 <command_proc>
    2740:	81 11       	cpse	r24, r1
    2742:	8d c0       	rjmp	.+282    	; 0x285e <register_code+0x18c>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2744:	8c 2f       	mov	r24, r28
    2746:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
    274a:	e3 cf       	rjmp	.-58     	; 0x2712 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    274c:	80 e2       	ldi	r24, 0x20	; 32
    274e:	8c 0f       	add	r24, r28
    2750:	88 30       	cpi	r24, 0x08	; 8
    2752:	48 f4       	brcc	.+18     	; 0x2766 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2754:	c7 70       	andi	r28, 0x07	; 7
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	01 c0       	rjmp	.+2      	; 0x275c <register_code+0x8a>
    275a:	88 0f       	add	r24, r24
    275c:	ca 95       	dec	r28
    275e:	ea f7       	brpl	.-6      	; 0x275a <register_code+0x88>
    2760:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <add_mods>
    2764:	d6 cf       	rjmp	.-84     	; 0x2712 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2766:	8b e5       	ldi	r24, 0x5B	; 91
    2768:	8c 0f       	add	r24, r28
    276a:	83 30       	cpi	r24, 0x03	; 3
    276c:	78 f4       	brcc	.+30     	; 0x278c <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    276e:	c5 3a       	cpi	r28, 0xA5	; 165
    2770:	29 f0       	breq	.+10     	; 0x277c <register_code+0xaa>
    2772:	c6 3a       	cpi	r28, 0xA6	; 166
    2774:	31 f4       	brne	.+12     	; 0x2782 <register_code+0xb0>
    2776:	82 e8       	ldi	r24, 0x82	; 130
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	05 c0       	rjmp	.+10     	; 0x2786 <register_code+0xb4>
    277c:	81 e8       	ldi	r24, 0x81	; 129
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <register_code+0xb4>
    2782:	83 e8       	ldi	r24, 0x83	; 131
    2784:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2786:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2788:	0c 94 3e 12 	jmp	0x247c	; 0x247c <host_system_send>
    }
    else if IS_CONSUMER(code) {
    278c:	88 e5       	ldi	r24, 0x58	; 88
    278e:	8c 0f       	add	r24, r28
    2790:	83 31       	cpi	r24, 0x13	; 19
    2792:	08 f0       	brcs	.+2      	; 0x2796 <register_code+0xc4>
    2794:	64 c0       	rjmp	.+200    	; 0x285e <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2796:	c8 3a       	cpi	r28, 0xA8	; 168
    2798:	39 f1       	breq	.+78     	; 0x27e8 <register_code+0x116>
    279a:	c9 3a       	cpi	r28, 0xA9	; 169
    279c:	41 f1       	breq	.+80     	; 0x27ee <register_code+0x11c>
    279e:	ca 3a       	cpi	r28, 0xAA	; 170
    27a0:	49 f1       	breq	.+82     	; 0x27f4 <register_code+0x122>
    27a2:	cb 3a       	cpi	r28, 0xAB	; 171
    27a4:	51 f1       	breq	.+84     	; 0x27fa <register_code+0x128>
    27a6:	cc 3a       	cpi	r28, 0xAC	; 172
    27a8:	59 f1       	breq	.+86     	; 0x2800 <register_code+0x12e>
    27aa:	cd 3a       	cpi	r28, 0xAD	; 173
    27ac:	61 f1       	breq	.+88     	; 0x2806 <register_code+0x134>
    27ae:	c0 3b       	cpi	r28, 0xB0	; 176
    27b0:	69 f1       	breq	.+90     	; 0x280c <register_code+0x13a>
    27b2:	ce 3a       	cpi	r28, 0xAE	; 174
    27b4:	71 f1       	breq	.+92     	; 0x2812 <register_code+0x140>
    27b6:	cf 3a       	cpi	r28, 0xAF	; 175
    27b8:	79 f1       	breq	.+94     	; 0x2818 <register_code+0x146>
    27ba:	c1 3b       	cpi	r28, 0xB1	; 177
    27bc:	81 f1       	breq	.+96     	; 0x281e <register_code+0x14c>
    27be:	c2 3b       	cpi	r28, 0xB2	; 178
    27c0:	89 f1       	breq	.+98     	; 0x2824 <register_code+0x152>
    27c2:	c3 3b       	cpi	r28, 0xB3	; 179
    27c4:	91 f1       	breq	.+100    	; 0x282a <register_code+0x158>
    27c6:	c4 3b       	cpi	r28, 0xB4	; 180
    27c8:	99 f1       	breq	.+102    	; 0x2830 <register_code+0x15e>
    27ca:	c5 3b       	cpi	r28, 0xB5	; 181
    27cc:	a1 f1       	breq	.+104    	; 0x2836 <register_code+0x164>
    27ce:	c6 3b       	cpi	r28, 0xB6	; 182
    27d0:	a9 f1       	breq	.+106    	; 0x283c <register_code+0x16a>
    27d2:	c7 3b       	cpi	r28, 0xB7	; 183
    27d4:	b1 f1       	breq	.+108    	; 0x2842 <register_code+0x170>
    27d6:	c8 3b       	cpi	r28, 0xB8	; 184
    27d8:	b9 f1       	breq	.+110    	; 0x2848 <register_code+0x176>
    27da:	c9 3b       	cpi	r28, 0xB9	; 185
    27dc:	c1 f1       	breq	.+112    	; 0x284e <register_code+0x17c>
    27de:	ca 3b       	cpi	r28, 0xBA	; 186
    27e0:	c9 f5       	brne	.+114    	; 0x2854 <register_code+0x182>
    27e2:	8a e2       	ldi	r24, 0x2A	; 42
    27e4:	92 e0       	ldi	r25, 0x02	; 2
    27e6:	38 c0       	rjmp	.+112    	; 0x2858 <register_code+0x186>
    27e8:	82 ee       	ldi	r24, 0xE2	; 226
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	35 c0       	rjmp	.+106    	; 0x2858 <register_code+0x186>
    27ee:	89 ee       	ldi	r24, 0xE9	; 233
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	32 c0       	rjmp	.+100    	; 0x2858 <register_code+0x186>
    27f4:	8a ee       	ldi	r24, 0xEA	; 234
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	2f c0       	rjmp	.+94     	; 0x2858 <register_code+0x186>
    27fa:	85 eb       	ldi	r24, 0xB5	; 181
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	2c c0       	rjmp	.+88     	; 0x2858 <register_code+0x186>
    2800:	86 eb       	ldi	r24, 0xB6	; 182
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	29 c0       	rjmp	.+82     	; 0x2858 <register_code+0x186>
    2806:	87 eb       	ldi	r24, 0xB7	; 183
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	26 c0       	rjmp	.+76     	; 0x2858 <register_code+0x186>
    280c:	8c ec       	ldi	r24, 0xCC	; 204
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	23 c0       	rjmp	.+70     	; 0x2858 <register_code+0x186>
    2812:	8d ec       	ldi	r24, 0xCD	; 205
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	20 c0       	rjmp	.+64     	; 0x2858 <register_code+0x186>
    2818:	83 e8       	ldi	r24, 0x83	; 131
    281a:	91 e0       	ldi	r25, 0x01	; 1
    281c:	1d c0       	rjmp	.+58     	; 0x2858 <register_code+0x186>
    281e:	8a e8       	ldi	r24, 0x8A	; 138
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	1a c0       	rjmp	.+52     	; 0x2858 <register_code+0x186>
    2824:	82 e9       	ldi	r24, 0x92	; 146
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	17 c0       	rjmp	.+46     	; 0x2858 <register_code+0x186>
    282a:	84 e9       	ldi	r24, 0x94	; 148
    282c:	91 e0       	ldi	r25, 0x01	; 1
    282e:	14 c0       	rjmp	.+40     	; 0x2858 <register_code+0x186>
    2830:	81 e2       	ldi	r24, 0x21	; 33
    2832:	92 e0       	ldi	r25, 0x02	; 2
    2834:	11 c0       	rjmp	.+34     	; 0x2858 <register_code+0x186>
    2836:	83 e2       	ldi	r24, 0x23	; 35
    2838:	92 e0       	ldi	r25, 0x02	; 2
    283a:	0e c0       	rjmp	.+28     	; 0x2858 <register_code+0x186>
    283c:	84 e2       	ldi	r24, 0x24	; 36
    283e:	92 e0       	ldi	r25, 0x02	; 2
    2840:	0b c0       	rjmp	.+22     	; 0x2858 <register_code+0x186>
    2842:	85 e2       	ldi	r24, 0x25	; 37
    2844:	92 e0       	ldi	r25, 0x02	; 2
    2846:	08 c0       	rjmp	.+16     	; 0x2858 <register_code+0x186>
    2848:	86 e2       	ldi	r24, 0x26	; 38
    284a:	92 e0       	ldi	r25, 0x02	; 2
    284c:	05 c0       	rjmp	.+10     	; 0x2858 <register_code+0x186>
    284e:	87 e2       	ldi	r24, 0x27	; 39
    2850:	92 e0       	ldi	r25, 0x02	; 2
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <register_code+0x186>
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2858:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    285a:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <host_consumer_send>
    }
}
    285e:	cf 91       	pop	r28
    2860:	08 95       	ret

00002862 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2862:	88 23       	and	r24, r24
    2864:	09 f4       	brne	.+2      	; 0x2868 <unregister_code+0x6>
    2866:	4b c0       	rjmp	.+150    	; 0x28fe <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2868:	82 38       	cpi	r24, 0x82	; 130
    286a:	59 f4       	brne	.+22     	; 0x2882 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    286c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    2870:	81 ff       	sbrs	r24, 1
    2872:	45 c0       	rjmp	.+138    	; 0x28fe <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2874:	89 e3       	ldi	r24, 0x39	; 57
    2876:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    287a:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    287e:	89 e3       	ldi	r24, 0x39	; 57
    2880:	0c c0       	rjmp	.+24     	; 0x289a <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2882:	83 38       	cpi	r24, 0x83	; 131
    2884:	71 f4       	brne	.+28     	; 0x28a2 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2886:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    288a:	80 ff       	sbrs	r24, 0
    288c:	38 c0       	rjmp	.+112    	; 0x28fe <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    288e:	83 e5       	ldi	r24, 0x53	; 83
    2890:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    2894:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2898:	83 e5       	ldi	r24, 0x53	; 83
    289a:	0e 94 56 1d 	call	0x3aac	; 0x3aac <del_key>
        send_keyboard_report();
    289e:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    28a2:	84 38       	cpi	r24, 0x84	; 132
    28a4:	59 f4       	brne	.+22     	; 0x28bc <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    28a6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    28aa:	82 ff       	sbrs	r24, 2
    28ac:	28 c0       	rjmp	.+80     	; 0x28fe <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    28ae:	87 e4       	ldi	r24, 0x47	; 71
    28b0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <add_key>
        send_keyboard_report();
    28b4:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    28b8:	87 e4       	ldi	r24, 0x47	; 71
    28ba:	ef cf       	rjmp	.-34     	; 0x289a <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    28bc:	9c ef       	ldi	r25, 0xFC	; 252
    28be:	98 0f       	add	r25, r24
    28c0:	91 3a       	cpi	r25, 0xA1	; 161
    28c2:	58 f3       	brcs	.-42     	; 0x289a <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    28c4:	90 e2       	ldi	r25, 0x20	; 32
    28c6:	98 0f       	add	r25, r24
    28c8:	98 30       	cpi	r25, 0x08	; 8
    28ca:	50 f4       	brcc	.+20     	; 0x28e0 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    28cc:	87 70       	andi	r24, 0x07	; 7
    28ce:	91 e0       	ldi	r25, 0x01	; 1
    28d0:	01 c0       	rjmp	.+2      	; 0x28d4 <unregister_code+0x72>
    28d2:	99 0f       	add	r25, r25
    28d4:	8a 95       	dec	r24
    28d6:	ea f7       	brpl	.-6      	; 0x28d2 <unregister_code+0x70>
    28d8:	89 2f       	mov	r24, r25
    28da:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <del_mods>
    28de:	df cf       	rjmp	.-66     	; 0x289e <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    28e0:	9b e5       	ldi	r25, 0x5B	; 91
    28e2:	98 0f       	add	r25, r24
    28e4:	93 30       	cpi	r25, 0x03	; 3
    28e6:	20 f4       	brcc	.+8      	; 0x28f0 <unregister_code+0x8e>
        host_system_send(0);
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	0c 94 3e 12 	jmp	0x247c	; 0x247c <host_system_send>
    }
    else if IS_CONSUMER(code) {
    28f0:	88 5a       	subi	r24, 0xA8	; 168
    28f2:	83 31       	cpi	r24, 0x13	; 19
    28f4:	20 f4       	brcc	.+8      	; 0x28fe <unregister_code+0x9c>
        host_consumer_send(0);
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <host_consumer_send>
    28fe:	08 95       	ret

00002900 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2900:	88 23       	and	r24, r24
    2902:	21 f0       	breq	.+8      	; 0x290c <register_mods+0xc>
        add_mods(mods);
    2904:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <add_mods>
        send_keyboard_report();
    2908:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <send_keyboard_report>
    290c:	08 95       	ret

0000290e <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    290e:	88 23       	and	r24, r24
    2910:	21 f0       	breq	.+8      	; 0x291a <unregister_mods+0xc>
        del_mods(mods);
    2912:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <del_mods>
        send_keyboard_report();
    2916:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <send_keyboard_report>
    291a:	08 95       	ret

0000291c <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    291c:	cf 92       	push	r12
    291e:	df 92       	push	r13
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	28 97       	sbiw	r28, 0x08	; 8
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
    293c:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    293e:	85 e0       	ldi	r24, 0x05	; 5
    2940:	f8 01       	movw	r30, r16
    2942:	de 01       	movw	r26, r28
    2944:	11 96       	adiw	r26, 0x01	; 1
    2946:	01 90       	ld	r0, Z+
    2948:	0d 92       	st	X+, r0
    294a:	8a 95       	dec	r24
    294c:	e1 f7       	brne	.-8      	; 0x2946 <process_action+0x2a>
    294e:	f8 01       	movw	r30, r16
    2950:	40 81       	ld	r20, Z
    2952:	31 81       	ldd	r19, Z+1	; 0x01
    2954:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2956:	25 81       	ldd	r18, Z+5	; 0x05
    2958:	22 95       	swap	r18
    295a:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    295c:	83 81       	ldd	r24, Z+3	; 0x03
    295e:	94 81       	ldd	r25, Z+4	; 0x04
    2960:	89 2b       	or	r24, r25
    2962:	31 f0       	breq	.+12     	; 0x2970 <process_action+0x54>
    2964:	3f 3f       	cpi	r19, 0xFF	; 255
    2966:	31 f4       	brne	.+12     	; 0x2974 <process_action+0x58>
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	4f 3f       	cpi	r20, 0xFF	; 255
    296c:	19 f4       	brne	.+6      	; 0x2974 <process_action+0x58>
    296e:	03 c0       	rjmp	.+6      	; 0x2976 <process_action+0x5a>
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <process_action+0x5a>
    2974:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2976:	80 fd       	sbrc	r24, 0
    2978:	c8 c2       	rjmp	.+1424   	; 0x2f0a <process_action+0x5ee>

    action_t action = layer_switch_get_action(event.key);
    297a:	49 83       	std	Y+1, r20	; 0x01
    297c:	3a 83       	std	Y+2, r19	; 0x02
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	9a 81       	ldd	r25, Y+2	; 0x02
    2982:	2f 83       	std	Y+7, r18	; 0x07
    2984:	0e 94 c7 1c 	call	0x398e	; 0x398e <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	88 87       	std	Y+8, r24	; 0x08
    298c:	0e 94 c6 1c 	call	0x398c	; 0x398c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2990:	0e 94 99 1b 	call	0x3732	; 0x3732 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2994:	4e 81       	ldd	r20, Y+6	; 0x06
    2996:	e4 2f       	mov	r30, r20
    2998:	e2 95       	swap	r30
    299a:	ef 70       	andi	r30, 0x0F	; 15
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	ea 5a       	subi	r30, 0xAA	; 170
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	2f 81       	ldd	r18, Y+7	; 0x07
    29a4:	68 85       	ldd	r22, Y+8	; 0x08
    29a6:	0c 94 3f 2d 	jmp	0x5a7e	; 0x5a7e <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    29aa:	84 2f       	mov	r24, r20
    29ac:	80 7f       	andi	r24, 0xF0	; 240
    29ae:	14 2f       	mov	r17, r20
    29b0:	1f 70       	andi	r17, 0x0F	; 15
    29b2:	88 23       	and	r24, r24
    29b4:	11 f0       	breq	.+4      	; 0x29ba <process_action+0x9e>
    29b6:	12 95       	swap	r17
    29b8:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    29ba:	ff 20       	and	r15, r15
    29bc:	59 f0       	breq	.+22     	; 0x29d4 <process_action+0xb8>
                    if (mods) {
    29be:	11 23       	and	r17, r17
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <process_action+0xa8>
    29c2:	58 c2       	rjmp	.+1200   	; 0x2e74 <process_action+0x558>
                        add_weak_mods(mods);
    29c4:	81 2f       	mov	r24, r17
    29c6:	68 87       	std	Y+8, r22	; 0x08
    29c8:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <add_weak_mods>
                        send_keyboard_report();
    29cc:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <send_keyboard_report>
    29d0:	68 85       	ldd	r22, Y+8	; 0x08
    29d2:	50 c2       	rjmp	.+1184   	; 0x2e74 <process_action+0x558>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    29d4:	86 2f       	mov	r24, r22
    29d6:	0e 94 31 14 	call	0x2862	; 0x2862 <unregister_code>
                    if (mods) {
    29da:	11 23       	and	r17, r17
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <process_action+0xc4>
    29de:	95 c2       	rjmp	.+1322   	; 0x2f0a <process_action+0x5ee>
                        del_weak_mods(mods);
    29e0:	81 2f       	mov	r24, r17
    29e2:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    29e6:	28 96       	adiw	r28, 0x08	; 8
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	1f 91       	pop	r17
    29f8:	0f 91       	pop	r16
    29fa:	ff 90       	pop	r15
    29fc:	ef 90       	pop	r14
    29fe:	df 90       	pop	r13
    2a00:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2a02:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2a06:	34 2f       	mov	r19, r20
    2a08:	30 7f       	andi	r19, 0xF0	; 240
    2a0a:	84 2f       	mov	r24, r20
    2a0c:	8f 70       	andi	r24, 0x0F	; 15
    2a0e:	30 32       	cpi	r19, 0x20	; 32
    2a10:	11 f0       	breq	.+4      	; 0x2a16 <process_action+0xfa>
    2a12:	82 95       	swap	r24
    2a14:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2a16:	66 23       	and	r22, r22
    2a18:	19 f0       	breq	.+6      	; 0x2a20 <process_action+0x104>
    2a1a:	61 30       	cpi	r22, 0x01	; 1
    2a1c:	09 f1       	breq	.+66     	; 0x2a60 <process_action+0x144>
    2a1e:	2a c0       	rjmp	.+84     	; 0x2a74 <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2a20:	ff 20       	and	r15, r15
    2a22:	a1 f0       	breq	.+40     	; 0x2a4c <process_action+0x130>
                            if (tap_count == 0) {
    2a24:	22 23       	and	r18, r18
    2a26:	81 f1       	breq	.+96     	; 0x2a88 <process_action+0x16c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2a28:	21 30       	cpi	r18, 0x01	; 1
    2a2a:	71 f5       	brne	.+92     	; 0x2a88 <process_action+0x16c>
            break;
#endif
        default:
            break;
    }
}
    2a2c:	28 96       	adiw	r28, 0x08	; 8
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	1f 91       	pop	r17
    2a3e:	0f 91       	pop	r16
    2a40:	ff 90       	pop	r15
    2a42:	ef 90       	pop	r14
    2a44:	df 90       	pop	r13
    2a46:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2a48:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2a4c:	22 23       	and	r18, r18
    2a4e:	19 f0       	breq	.+6      	; 0x2a56 <process_action+0x13a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2a50:	21 30       	cpi	r18, 0x01	; 1
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <process_action+0x13a>
    2a54:	5a c2       	rjmp	.+1204   	; 0x2f0a <process_action+0x5ee>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2a56:	8e 83       	std	Y+6, r24	; 0x06
    2a58:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <clear_oneshot_mods>
                                unregister_mods(mods);
    2a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a5e:	8e c1       	rjmp	.+796    	; 0x2d7c <process_action+0x460>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2a60:	ff 20       	and	r15, r15
    2a62:	21 f0       	breq	.+8      	; 0x2a6c <process_action+0x150>
                            if (tap_count <= TAPPING_TOGGLE) {
    2a64:	23 30       	cpi	r18, 0x03	; 3
    2a66:	08 f0       	brcs	.+2      	; 0x2a6a <process_action+0x14e>
    2a68:	50 c2       	rjmp	.+1184   	; 0x2f0a <process_action+0x5ee>
    2a6a:	0e c0       	rjmp	.+28     	; 0x2a88 <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2a6c:	22 30       	cpi	r18, 0x02	; 2
    2a6e:	08 f0       	brcs	.+2      	; 0x2a72 <process_action+0x156>
    2a70:	4c c2       	rjmp	.+1176   	; 0x2f0a <process_action+0x5ee>
    2a72:	84 c1       	rjmp	.+776    	; 0x2d7c <process_action+0x460>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2a74:	ff 20       	and	r15, r15
    2a76:	c1 f0       	breq	.+48     	; 0x2aa8 <process_action+0x18c>
                            if (tap_count > 0) {
    2a78:	22 23       	and	r18, r18
    2a7a:	31 f0       	breq	.+12     	; 0x2a88 <process_action+0x16c>
                                if (record->tap.interrupted) {
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	95 81       	ldd	r25, Z+5	; 0x05
    2a80:	90 ff       	sbrs	r25, 0
    2a82:	f8 c1       	rjmp	.+1008   	; 0x2e74 <process_action+0x558>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2a84:	9f 70       	andi	r25, 0x0F	; 15
    2a86:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    2a88:	28 96       	adiw	r28, 0x08	; 8
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	df 91       	pop	r29
    2a96:	cf 91       	pop	r28
    2a98:	1f 91       	pop	r17
    2a9a:	0f 91       	pop	r16
    2a9c:	ff 90       	pop	r15
    2a9e:	ef 90       	pop	r14
    2aa0:	df 90       	pop	r13
    2aa2:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2aa4:	0c 94 80 14 	jmp	0x2900	; 0x2900 <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2aa8:	22 23       	and	r18, r18
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <process_action+0x192>
    2aac:	67 c1       	rjmp	.+718    	; 0x2d7c <process_action+0x460>
    2aae:	f6 c1       	rjmp	.+1004   	; 0x2e9c <process_action+0x580>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2ab0:	24 2f       	mov	r18, r20
    2ab2:	26 95       	lsr	r18
    2ab4:	26 95       	lsr	r18
    2ab6:	23 70       	andi	r18, 0x03	; 3
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	21 15       	cp	r18, r1
    2abc:	31 05       	cpc	r19, r1
    2abe:	21 f0       	breq	.+8      	; 0x2ac8 <process_action+0x1ac>
    2ac0:	21 30       	cpi	r18, 0x01	; 1
    2ac2:	31 05       	cpc	r19, r1
    2ac4:	c9 f0       	breq	.+50     	; 0x2af8 <process_action+0x1dc>
    2ac6:	21 c2       	rjmp	.+1090   	; 0x2f0a <process_action+0x5ee>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2ac8:	ff 20       	and	r15, r15
    2aca:	21 f0       	breq	.+8      	; 0x2ad4 <process_action+0x1b8>
                        host_system_send(action.usage.code);
    2acc:	86 2f       	mov	r24, r22
    2ace:	94 2f       	mov	r25, r20
    2ad0:	93 70       	andi	r25, 0x03	; 3
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <process_action+0x1bc>
                    } else {
                        host_system_send(0);
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2ad8:	28 96       	adiw	r28, 0x08	; 8
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	ff 90       	pop	r15
    2aee:	ef 90       	pop	r14
    2af0:	df 90       	pop	r13
    2af2:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2af4:	0c 94 3e 12 	jmp	0x247c	; 0x247c <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2af8:	ff 20       	and	r15, r15
    2afa:	21 f0       	breq	.+8      	; 0x2b04 <process_action+0x1e8>
                        host_consumer_send(action.usage.code);
    2afc:	86 2f       	mov	r24, r22
    2afe:	94 2f       	mov	r25, r20
    2b00:	93 70       	andi	r25, 0x03	; 3
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <process_action+0x1ec>
                    } else {
                        host_consumer_send(0);
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2b08:	28 96       	adiw	r28, 0x08	; 8
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	df 91       	pop	r29
    2b16:	cf 91       	pop	r28
    2b18:	1f 91       	pop	r17
    2b1a:	0f 91       	pop	r16
    2b1c:	ff 90       	pop	r15
    2b1e:	ef 90       	pop	r14
    2b20:	df 90       	pop	r13
    2b22:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2b24:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2b28:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2b2a:	ff 20       	and	r15, r15
    2b2c:	19 f0       	breq	.+6      	; 0x2b34 <process_action+0x218>
                mousekey_on(action.key.code);
    2b2e:	0e 94 95 22 	call	0x452a	; 0x452a <mousekey_on>
    2b32:	02 c0       	rjmp	.+4      	; 0x2b38 <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2b34:	0e 94 fd 22 	call	0x45fa	; 0x45fa <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2b38:	28 96       	adiw	r28, 0x08	; 8
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2b54:	0c 94 82 23 	jmp	0x4704	; 0x4704 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2b58:	84 2f       	mov	r24, r20
    2b5a:	83 70       	andi	r24, 0x03	; 3
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <process_action+0x244>
    2b5e:	76 c0       	rjmp	.+236    	; 0x2c4c <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2b60:	f1 10       	cpse	r15, r1
    2b62:	d3 c1       	rjmp	.+934    	; 0x2f0a <process_action+0x5ee>
                    uint8_t shift = action.layer_bitop.part*4;
    2b64:	26 2f       	mov	r18, r22
    2b66:	22 95       	swap	r18
    2b68:	26 95       	lsr	r18
    2b6a:	27 70       	andi	r18, 0x07	; 7
    2b6c:	22 0f       	add	r18, r18
    2b6e:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2b70:	86 2f       	mov	r24, r22
    2b72:	8f 70       	andi	r24, 0x0F	; 15
    2b74:	c8 2e       	mov	r12, r24
    2b76:	d1 2c       	mov	r13, r1
    2b78:	e1 2c       	mov	r14, r1
    2b7a:	f1 2c       	mov	r15, r1
    2b7c:	02 2e       	mov	r0, r18
    2b7e:	04 c0       	rjmp	.+8      	; 0x2b88 <process_action+0x26c>
    2b80:	cc 0c       	add	r12, r12
    2b82:	dd 1c       	adc	r13, r13
    2b84:	ee 1c       	adc	r14, r14
    2b86:	ff 1c       	adc	r15, r15
    2b88:	0a 94       	dec	r0
    2b8a:	d2 f7       	brpl	.-12     	; 0x2b80 <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2b8c:	64 ff       	sbrs	r22, 4
    2b8e:	10 c0       	rjmp	.+32     	; 0x2bb0 <process_action+0x294>
    2b90:	6f e0       	ldi	r22, 0x0F	; 15
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	04 c0       	rjmp	.+8      	; 0x2ba2 <process_action+0x286>
    2b9a:	66 0f       	add	r22, r22
    2b9c:	77 1f       	adc	r23, r23
    2b9e:	88 1f       	adc	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	2a 95       	dec	r18
    2ba4:	d2 f7       	brpl	.-12     	; 0x2b9a <process_action+0x27e>
    2ba6:	60 95       	com	r22
    2ba8:	70 95       	com	r23
    2baa:	80 95       	com	r24
    2bac:	90 95       	com	r25
    2bae:	03 c0       	rjmp	.+6      	; 0x2bb6 <process_action+0x29a>
    2bb0:	60 e0       	ldi	r22, 0x00	; 0
    2bb2:	70 e0       	ldi	r23, 0x00	; 0
    2bb4:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2bb6:	24 2f       	mov	r18, r20
    2bb8:	26 95       	lsr	r18
    2bba:	26 95       	lsr	r18
    2bbc:	23 70       	andi	r18, 0x03	; 3
    2bbe:	42 2f       	mov	r20, r18
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	42 30       	cpi	r20, 0x02	; 2
    2bc4:	51 05       	cpc	r21, r1
    2bc6:	d1 f0       	breq	.+52     	; 0x2bfc <process_action+0x2e0>
    2bc8:	43 30       	cpi	r20, 0x03	; 3
    2bca:	51 05       	cpc	r21, r1
    2bcc:	59 f1       	breq	.+86     	; 0x2c24 <process_action+0x308>
    2bce:	6c 29       	or	r22, r12
    2bd0:	7d 29       	or	r23, r13
    2bd2:	8e 29       	or	r24, r14
    2bd4:	9f 29       	or	r25, r15
    2bd6:	41 30       	cpi	r20, 0x01	; 1
    2bd8:	51 05       	cpc	r21, r1
    2bda:	41 f1       	breq	.+80     	; 0x2c2c <process_action+0x310>
            break;
#endif
        default:
            break;
    }
}
    2bdc:	28 96       	adiw	r28, 0x08	; 8
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	ff 90       	pop	r15
    2bf2:	ef 90       	pop	r14
    2bf4:	df 90       	pop	r13
    2bf6:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2bf8:	0c 94 be 1b 	jmp	0x377c	; 0x377c <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2bfc:	6c 29       	or	r22, r12
    2bfe:	7d 29       	or	r23, r13
    2c00:	8e 29       	or	r24, r14
    2c02:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2c04:	28 96       	adiw	r28, 0x08	; 8
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	ff 90       	pop	r15
    2c1a:	ef 90       	pop	r14
    2c1c:	df 90       	pop	r13
    2c1e:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2c20:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2c24:	0e 94 be 1b 	call	0x377c	; 0x377c <default_layer_and>
    2c28:	c7 01       	movw	r24, r14
    2c2a:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2c2c:	28 96       	adiw	r28, 0x08	; 8
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	df 91       	pop	r29
    2c3a:	cf 91       	pop	r28
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	ff 90       	pop	r15
    2c42:	ef 90       	pop	r14
    2c44:	df 90       	pop	r13
    2c46:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2c48:	0c 94 a4 1b 	jmp	0x3748	; 0x3748 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2c4c:	ff 20       	and	r15, r15
    2c4e:	19 f0       	breq	.+6      	; 0x2c56 <process_action+0x33a>
    2c50:	84 2f       	mov	r24, r20
    2c52:	81 70       	andi	r24, 0x01	; 1
    2c54:	01 c0       	rjmp	.+2      	; 0x2c58 <process_action+0x33c>
    2c56:	86 95       	lsr	r24
    2c58:	88 23       	and	r24, r24
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <process_action+0x342>
    2c5c:	56 c1       	rjmp	.+684    	; 0x2f0a <process_action+0x5ee>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2c5e:	26 2f       	mov	r18, r22
    2c60:	22 95       	swap	r18
    2c62:	26 95       	lsr	r18
    2c64:	27 70       	andi	r18, 0x07	; 7
    2c66:	22 0f       	add	r18, r18
    2c68:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2c6a:	86 2f       	mov	r24, r22
    2c6c:	8f 70       	andi	r24, 0x0F	; 15
    2c6e:	c8 2e       	mov	r12, r24
    2c70:	d1 2c       	mov	r13, r1
    2c72:	e1 2c       	mov	r14, r1
    2c74:	f1 2c       	mov	r15, r1
    2c76:	02 2e       	mov	r0, r18
    2c78:	04 c0       	rjmp	.+8      	; 0x2c82 <process_action+0x366>
    2c7a:	cc 0c       	add	r12, r12
    2c7c:	dd 1c       	adc	r13, r13
    2c7e:	ee 1c       	adc	r14, r14
    2c80:	ff 1c       	adc	r15, r15
    2c82:	0a 94       	dec	r0
    2c84:	d2 f7       	brpl	.-12     	; 0x2c7a <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2c86:	64 ff       	sbrs	r22, 4
    2c88:	10 c0       	rjmp	.+32     	; 0x2caa <process_action+0x38e>
    2c8a:	6f e0       	ldi	r22, 0x0F	; 15
    2c8c:	70 e0       	ldi	r23, 0x00	; 0
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	04 c0       	rjmp	.+8      	; 0x2c9c <process_action+0x380>
    2c94:	66 0f       	add	r22, r22
    2c96:	77 1f       	adc	r23, r23
    2c98:	88 1f       	adc	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	2a 95       	dec	r18
    2c9e:	d2 f7       	brpl	.-12     	; 0x2c94 <process_action+0x378>
    2ca0:	60 95       	com	r22
    2ca2:	70 95       	com	r23
    2ca4:	80 95       	com	r24
    2ca6:	90 95       	com	r25
    2ca8:	03 c0       	rjmp	.+6      	; 0x2cb0 <process_action+0x394>
    2caa:	60 e0       	ldi	r22, 0x00	; 0
    2cac:	70 e0       	ldi	r23, 0x00	; 0
    2cae:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2cb0:	24 2f       	mov	r18, r20
    2cb2:	26 95       	lsr	r18
    2cb4:	26 95       	lsr	r18
    2cb6:	23 70       	andi	r18, 0x03	; 3
    2cb8:	42 2f       	mov	r20, r18
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	42 30       	cpi	r20, 0x02	; 2
    2cbe:	51 05       	cpc	r21, r1
    2cc0:	d1 f0       	breq	.+52     	; 0x2cf6 <process_action+0x3da>
    2cc2:	43 30       	cpi	r20, 0x03	; 3
    2cc4:	51 05       	cpc	r21, r1
    2cc6:	59 f1       	breq	.+86     	; 0x2d1e <process_action+0x402>
    2cc8:	6c 29       	or	r22, r12
    2cca:	7d 29       	or	r23, r13
    2ccc:	8e 29       	or	r24, r14
    2cce:	9f 29       	or	r25, r15
    2cd0:	41 30       	cpi	r20, 0x01	; 1
    2cd2:	51 05       	cpc	r21, r1
    2cd4:	41 f1       	breq	.+80     	; 0x2d26 <process_action+0x40a>
            break;
#endif
        default:
            break;
    }
}
    2cd6:	28 96       	adiw	r28, 0x08	; 8
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	df 91       	pop	r29
    2ce4:	cf 91       	pop	r28
    2ce6:	1f 91       	pop	r17
    2ce8:	0f 91       	pop	r16
    2cea:	ff 90       	pop	r15
    2cec:	ef 90       	pop	r14
    2cee:	df 90       	pop	r13
    2cf0:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2cf2:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2cf6:	6c 29       	or	r22, r12
    2cf8:	7d 29       	or	r23, r13
    2cfa:	8e 29       	or	r24, r14
    2cfc:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2cfe:	28 96       	adiw	r28, 0x08	; 8
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	ff 90       	pop	r15
    2d14:	ef 90       	pop	r14
    2d16:	df 90       	pop	r13
    2d18:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2d1a:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2d1e:	0e 94 92 1c 	call	0x3924	; 0x3924 <layer_and>
    2d22:	c7 01       	movw	r24, r14
    2d24:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2d26:	28 96       	adiw	r28, 0x08	; 8
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	cd bf       	out	0x3d, r28	; 61
    2d32:	df 91       	pop	r29
    2d34:	cf 91       	pop	r28
    2d36:	1f 91       	pop	r17
    2d38:	0f 91       	pop	r16
    2d3a:	ff 90       	pop	r15
    2d3c:	ef 90       	pop	r14
    2d3e:	df 90       	pop	r13
    2d40:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2d42:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d46:	60 3f       	cpi	r22, 0xF0	; 240
    2d48:	49 f1       	breq	.+82     	; 0x2d9c <process_action+0x480>
    2d4a:	18 f4       	brcc	.+6      	; 0x2d52 <process_action+0x436>
    2d4c:	60 3e       	cpi	r22, 0xE0	; 224
    2d4e:	48 f4       	brcc	.+18     	; 0x2d62 <process_action+0x446>
    2d50:	8c c0       	rjmp	.+280    	; 0x2e6a <process_action+0x54e>
    2d52:	62 3f       	cpi	r22, 0xF2	; 242
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <process_action+0x43c>
    2d56:	51 c0       	rjmp	.+162    	; 0x2dfa <process_action+0x4de>
    2d58:	e0 f1       	brcs	.+120    	; 0x2dd2 <process_action+0x4b6>
    2d5a:	63 3f       	cpi	r22, 0xF3	; 243
    2d5c:	09 f4       	brne	.+2      	; 0x2d60 <process_action+0x444>
    2d5e:	61 c0       	rjmp	.+194    	; 0x2e22 <process_action+0x506>
    2d60:	84 c0       	rjmp	.+264    	; 0x2e6a <process_action+0x54e>
    2d62:	16 2f       	mov	r17, r22
    2d64:	1f 70       	andi	r17, 0x0F	; 15
    2d66:	84 2f       	mov	r24, r20
    2d68:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2d6a:	ff 20       	and	r15, r15
    2d6c:	21 f0       	breq	.+8      	; 0x2d76 <process_action+0x45a>
                        layer_on(action.layer_tap.val);
    2d6e:	0e 94 11 1c 	call	0x3822	; 0x3822 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2d72:	81 2f       	mov	r24, r17
    2d74:	89 ce       	rjmp	.-750    	; 0x2a88 <process_action+0x16c>
                    } else {
                        layer_off(action.layer_tap.val);
    2d76:	0e 94 32 1c 	call	0x3864	; 0x3864 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2d7a:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2d7c:	28 96       	adiw	r28, 0x08	; 8
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	df 90       	pop	r13
    2d96:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2d98:	0c 94 87 14 	jmp	0x290e	; 0x290e <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2d9c:	ff 20       	and	r15, r15
    2d9e:	a9 f0       	breq	.+42     	; 0x2dca <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2da0:	22 30       	cpi	r18, 0x02	; 2
    2da2:	08 f0       	brcs	.+2      	; 0x2da6 <process_action+0x48a>
    2da4:	b2 c0       	rjmp	.+356    	; 0x2f0a <process_action+0x5ee>
                            layer_invert(action.layer_tap.val);
    2da6:	84 2f       	mov	r24, r20
    2da8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2daa:	28 96       	adiw	r28, 0x08	; 8
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	1f 91       	pop	r17
    2dbc:	0f 91       	pop	r16
    2dbe:	ff 90       	pop	r15
    2dc0:	ef 90       	pop	r14
    2dc2:	df 90       	pop	r13
    2dc4:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2dc6:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2dca:	23 30       	cpi	r18, 0x03	; 3
    2dcc:	08 f0       	brcs	.+2      	; 0x2dd0 <process_action+0x4b4>
    2dce:	9d c0       	rjmp	.+314    	; 0x2f0a <process_action+0x5ee>
    2dd0:	ea cf       	rjmp	.-44     	; 0x2da6 <process_action+0x48a>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2dd2:	ff 20       	and	r15, r15
    2dd4:	a1 f0       	breq	.+40     	; 0x2dfe <process_action+0x4e2>
    2dd6:	84 2f       	mov	r24, r20
    2dd8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2dda:	28 96       	adiw	r28, 0x08	; 8
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	1f 91       	pop	r17
    2dec:	0f 91       	pop	r16
    2dee:	ff 90       	pop	r15
    2df0:	ef 90       	pop	r14
    2df2:	df 90       	pop	r13
    2df4:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2df6:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2dfa:	ff 20       	and	r15, r15
    2dfc:	61 f3       	breq	.-40     	; 0x2dd6 <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2dfe:	84 2f       	mov	r24, r20
    2e00:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2e02:	28 96       	adiw	r28, 0x08	; 8
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	ff 90       	pop	r15
    2e18:	ef 90       	pop	r14
    2e1a:	df 90       	pop	r13
    2e1c:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2e1e:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2e22:	ff 20       	and	r15, r15
    2e24:	91 f0       	breq	.+36     	; 0x2e4a <process_action+0x52e>
    2e26:	84 2f       	mov	r24, r20
    2e28:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2e2a:	28 96       	adiw	r28, 0x08	; 8
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
    2e36:	df 91       	pop	r29
    2e38:	cf 91       	pop	r28
    2e3a:	1f 91       	pop	r17
    2e3c:	0f 91       	pop	r16
    2e3e:	ff 90       	pop	r15
    2e40:	ef 90       	pop	r14
    2e42:	df 90       	pop	r13
    2e44:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2e46:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2e4a:	28 96       	adiw	r28, 0x08	; 8
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	ff 90       	pop	r15
    2e60:	ef 90       	pop	r14
    2e62:	df 90       	pop	r13
    2e64:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2e66:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2e6a:	ff 20       	and	r15, r15
    2e6c:	a1 f0       	breq	.+40     	; 0x2e96 <process_action+0x57a>
                        if (tap_count > 0) {
    2e6e:	22 23       	and	r18, r18
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <process_action+0x558>
    2e72:	b1 cf       	rjmp	.-158    	; 0x2dd6 <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2e74:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2e76:	28 96       	adiw	r28, 0x08	; 8
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	1f 91       	pop	r17
    2e88:	0f 91       	pop	r16
    2e8a:	ff 90       	pop	r15
    2e8c:	ef 90       	pop	r14
    2e8e:	df 90       	pop	r13
    2e90:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2e92:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2e96:	22 23       	and	r18, r18
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <process_action+0x580>
    2e9a:	b1 cf       	rjmp	.-158    	; 0x2dfe <process_action+0x4e2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2e9c:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2e9e:	28 96       	adiw	r28, 0x08	; 8
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	1f 91       	pop	r17
    2eb0:	0f 91       	pop	r16
    2eb2:	ff 90       	pop	r15
    2eb4:	ef 90       	pop	r14
    2eb6:	df 90       	pop	r13
    2eb8:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2eba:	0c 94 31 14 	jmp	0x2862	; 0x2862 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2ebe:	4f 70       	andi	r20, 0x0F	; 15
    2ec0:	c8 01       	movw	r24, r16
    2ec2:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2ec6:	28 96       	adiw	r28, 0x08	; 8
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	1f 91       	pop	r17
    2ed8:	0f 91       	pop	r16
    2eda:	ff 90       	pop	r15
    2edc:	ef 90       	pop	r14
    2ede:	df 90       	pop	r13
    2ee0:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2ee2:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2ee6:	4f 70       	andi	r20, 0x0F	; 15
    2ee8:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2eea:	28 96       	adiw	r28, 0x08	; 8
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	ff 90       	pop	r15
    2f00:	ef 90       	pop	r14
    2f02:	df 90       	pop	r13
    2f04:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2f06:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <action_function>
            break;
#endif
        default:
            break;
    }
}
    2f0a:	28 96       	adiw	r28, 0x08	; 8
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	ff 90       	pop	r15
    2f20:	ef 90       	pop	r14
    2f22:	df 90       	pop	r13
    2f24:	cf 90       	pop	r12
    2f26:	08 95       	ret

00002f28 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2f28:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <clear_weak_mods>
    clear_keys();
    2f2c:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <clear_keys>
    send_keyboard_report();
    2f30:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2f34:	0e 94 b0 24 	call	0x4960	; 0x4960 <mousekey_clear>
    mousekey_send();
    2f38:	0e 94 82 23 	call	0x4704	; 0x4704 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	0e 94 3e 12 	call	0x247c	; 0x247c <host_system_send>
    host_consumer_send(0);
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <host_consumer_send>

00002f4c <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2f4c:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <clear_mods>
    clear_keyboard_but_mods();
    2f50:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

00002f54 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2f54:	0e 94 c7 1c 	call	0x398e	; 0x398e <layer_switch_get_action>

    switch (action.kind.id) {
    2f58:	29 2f       	mov	r18, r25
    2f5a:	22 95       	swap	r18
    2f5c:	2f 70       	andi	r18, 0x0F	; 15
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	2c 30       	cpi	r18, 0x0C	; 12
    2f62:	31 05       	cpc	r19, r1
    2f64:	4c f4       	brge	.+18     	; 0x2f78 <is_tap_key+0x24>
    2f66:	2a 30       	cpi	r18, 0x0A	; 10
    2f68:	31 05       	cpc	r19, r1
    2f6a:	6c f4       	brge	.+26     	; 0x2f86 <is_tap_key+0x32>
    2f6c:	22 50       	subi	r18, 0x02	; 2
    2f6e:	31 09       	sbc	r19, r1
    2f70:	22 30       	cpi	r18, 0x02	; 2
    2f72:	31 05       	cpc	r19, r1
    2f74:	70 f4       	brcc	.+28     	; 0x2f92 <is_tap_key+0x3e>
    2f76:	07 c0       	rjmp	.+14     	; 0x2f86 <is_tap_key+0x32>
    2f78:	2c 30       	cpi	r18, 0x0C	; 12
    2f7a:	31 05       	cpc	r19, r1
    2f7c:	31 f0       	breq	.+12     	; 0x2f8a <is_tap_key+0x36>
    2f7e:	2f 30       	cpi	r18, 0x0F	; 15
    2f80:	31 05       	cpc	r19, r1
    2f82:	19 f0       	breq	.+6      	; 0x2f8a <is_tap_key+0x36>
    2f84:	06 c0       	rjmp	.+12     	; 0x2f92 <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            return true;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	08 95       	ret
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2f8a:	93 fb       	bst	r25, 3
    2f8c:	88 27       	eor	r24, r24
    2f8e:	80 f9       	bld	r24, 0
    2f90:	08 95       	ret
            return false;
    }
    return false;
    2f92:	80 e0       	ldi	r24, 0x00	; 0
}
    2f94:	08 95       	ret

00002f96 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <debug_event+0x6>
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <debug_event+0x8>
    2f9e:	1f 92       	push	r1
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	08 95       	ret

00002fb4 <debug_record>:

void debug_record(keyrecord_t record)
{
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <debug_record+0x6>
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <debug_record+0x8>
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <debug_record+0xa>
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2fc2:	26 96       	adiw	r28, 0x06	; 6
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	08 95       	ret

00002fd4 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2fd4:	1f 93       	push	r17
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fda:	c0 91 60 01 	lds	r28, 0x0160
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2fde:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fe0:	80 91 61 01 	lds	r24, 0x0161
    2fe4:	c8 17       	cp	r28, r24
    2fe6:	99 f0       	breq	.+38     	; 0x300e <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2fe8:	d0 e0       	ldi	r29, 0x00	; 0
    2fea:	1c 9f       	mul	r17, r28
    2fec:	f0 01       	movw	r30, r0
    2fee:	1d 9f       	mul	r17, r29
    2ff0:	f0 0d       	add	r31, r0
    2ff2:	11 24       	eor	r1, r1
    2ff4:	ee 59       	subi	r30, 0x9E	; 158
    2ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff8:	40 81       	ld	r20, Z
    2ffa:	51 81       	ldd	r21, Z+1	; 0x01
    2ffc:	62 81       	ldd	r22, Z+2	; 0x02
    2ffe:	73 81       	ldd	r23, Z+3	; 0x03
    3000:	84 81       	ldd	r24, Z+4	; 0x04
    3002:	95 81       	ldd	r25, Z+5	; 0x05
    3004:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3008:	21 96       	adiw	r28, 0x01	; 1
    300a:	c7 70       	andi	r28, 0x07	; 7
    300c:	e9 cf       	rjmp	.-46     	; 0x2fe0 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	1f 91       	pop	r17
    3014:	08 95       	ret

00003016 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    3016:	40 91 92 01 	lds	r20, 0x0192
    301a:	50 91 93 01 	lds	r21, 0x0193
    301e:	60 91 94 01 	lds	r22, 0x0194
    3022:	70 91 95 01 	lds	r23, 0x0195
    3026:	80 91 96 01 	lds	r24, 0x0196
    302a:	90 91 97 01 	lds	r25, 0x0197
    302e:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <debug_record>

00003032 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    3032:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    3034:	80 91 97 01 	lds	r24, 0x0197
    3038:	82 95       	swap	r24
    303a:	8f 70       	andi	r24, 0x0F	; 15
    303c:	09 f0       	breq	.+2      	; 0x3040 <waiting_buffer_scan_tap+0xe>
    303e:	5f c0       	rjmp	.+190    	; 0x30fe <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    3040:	80 91 94 01 	lds	r24, 0x0194
    3044:	88 23       	and	r24, r24
    3046:	09 f4       	brne	.+2      	; 0x304a <waiting_buffer_scan_tap+0x18>
    3048:	5a c0       	rjmp	.+180    	; 0x30fe <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    304a:	20 91 60 01 	lds	r18, 0x0160
    304e:	a0 91 61 01 	lds	r26, 0x0161
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3052:	60 91 92 01 	lds	r22, 0x0192
    3056:	70 91 93 01 	lds	r23, 0x0193
    305a:	80 91 95 01 	lds	r24, 0x0195
    305e:	90 91 96 01 	lds	r25, 0x0196
    3062:	31 e0       	ldi	r19, 0x01	; 1
    3064:	6f 3f       	cpi	r22, 0xFF	; 255
    3066:	09 f0       	breq	.+2      	; 0x306a <waiting_buffer_scan_tap+0x38>
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	b3 2f       	mov	r27, r19
    306c:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    306e:	2a 17       	cp	r18, r26
    3070:	09 f4       	brne	.+2      	; 0x3074 <waiting_buffer_scan_tap+0x42>
    3072:	45 c0       	rjmp	.+138    	; 0x30fe <waiting_buffer_scan_tap+0xcc>
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	21 f0       	breq	.+8      	; 0x3080 <waiting_buffer_scan_tap+0x4e>
    3078:	7f 3f       	cpi	r23, 0xFF	; 255
    307a:	21 f4       	brne	.+8      	; 0x3084 <waiting_buffer_scan_tap+0x52>
    307c:	4b 2f       	mov	r20, r27
    307e:	03 c0       	rjmp	.+6      	; 0x3086 <waiting_buffer_scan_tap+0x54>
    3080:	41 e0       	ldi	r20, 0x01	; 1
    3082:	01 c0       	rjmp	.+2      	; 0x3086 <waiting_buffer_scan_tap+0x54>
    3084:	40 e0       	ldi	r20, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3088:	40 fd       	sbrc	r20, 0
    308a:	35 c0       	rjmp	.+106    	; 0x30f6 <waiting_buffer_scan_tap+0xc4>
    308c:	c2 9f       	mul	r28, r18
    308e:	f0 01       	movw	r30, r0
    3090:	c3 9f       	mul	r28, r19
    3092:	f0 0d       	add	r31, r0
    3094:	11 24       	eor	r1, r1
    3096:	ee 59       	subi	r30, 0x9E	; 158
    3098:	fe 4f       	sbci	r31, 0xFE	; 254
    309a:	41 81       	ldd	r20, Z+1	; 0x01
    309c:	74 13       	cpse	r23, r20
    309e:	2b c0       	rjmp	.+86     	; 0x30f6 <waiting_buffer_scan_tap+0xc4>
    30a0:	40 81       	ld	r20, Z
    30a2:	64 13       	cpse	r22, r20
    30a4:	28 c0       	rjmp	.+80     	; 0x30f6 <waiting_buffer_scan_tap+0xc4>
    30a6:	42 81       	ldd	r20, Z+2	; 0x02
    30a8:	41 11       	cpse	r20, r1
    30aa:	25 c0       	rjmp	.+74     	; 0x30f6 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    30ac:	43 81       	ldd	r20, Z+3	; 0x03
    30ae:	54 81       	ldd	r21, Z+4	; 0x04
    30b0:	48 17       	cp	r20, r24
    30b2:	59 07       	cpc	r21, r25
    30b4:	10 f4       	brcc	.+4      	; 0x30ba <waiting_buffer_scan_tap+0x88>
    30b6:	41 50       	subi	r20, 0x01	; 1
    30b8:	51 09       	sbc	r21, r1
    30ba:	48 1b       	sub	r20, r24
    30bc:	59 0b       	sbc	r21, r25
    30be:	4a 3f       	cpi	r20, 0xFA	; 250
    30c0:	51 05       	cpc	r21, r1
    30c2:	c8 f4       	brcc	.+50     	; 0x30f6 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    30c4:	80 91 97 01 	lds	r24, 0x0197
    30c8:	8f 70       	andi	r24, 0x0F	; 15
    30ca:	80 61       	ori	r24, 0x10	; 16
    30cc:	80 93 97 01 	sts	0x0197, r24
            waiting_buffer[i].tap.count = 1;
    30d0:	86 e0       	ldi	r24, 0x06	; 6
    30d2:	82 9f       	mul	r24, r18
    30d4:	f0 01       	movw	r30, r0
    30d6:	83 9f       	mul	r24, r19
    30d8:	f0 0d       	add	r31, r0
    30da:	11 24       	eor	r1, r1
    30dc:	e9 59       	subi	r30, 0x99	; 153
    30de:	fe 4f       	sbci	r31, 0xFE	; 254
    30e0:	80 81       	ld	r24, Z
    30e2:	8f 70       	andi	r24, 0x0F	; 15
    30e4:	80 61       	ori	r24, 0x10	; 16
    30e6:	80 83       	st	Z, r24
            process_action(&tapping_key);
    30e8:	82 e9       	ldi	r24, 0x92	; 146
    30ea:	91 e0       	ldi	r25, 0x01	; 1
    30ec:	0e 94 8e 14 	call	0x291c	; 0x291c <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    30f0:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    30f2:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30f6:	2f 5f       	subi	r18, 0xFF	; 255
    30f8:	3f 4f       	sbci	r19, 0xFF	; 255
    30fa:	27 70       	andi	r18, 0x07	; 7
    30fc:	b8 cf       	rjmp	.-144    	; 0x306e <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    30fe:	cf 91       	pop	r28
    3100:	08 95       	ret

00003102 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3102:	cf 92       	push	r12
    3104:	df 92       	push	r13
    3106:	ef 92       	push	r14
    3108:	ff 92       	push	r15
    310a:	0f 93       	push	r16
    310c:	1f 93       	push	r17
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	62 97       	sbiw	r28, 0x12	; 18
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	cd bf       	out	0x3d, r28	; 61
    3122:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3124:	85 e0       	ldi	r24, 0x05	; 5
    3126:	f8 01       	movw	r30, r16
    3128:	de 01       	movw	r26, r28
    312a:	1d 96       	adiw	r26, 0x0d	; 13
    312c:	01 90       	ld	r0, Z+
    312e:	0d 92       	st	X+, r0
    3130:	8a 95       	dec	r24
    3132:	e1 f7       	brne	.-8      	; 0x312c <process_tapping+0x2a>
    3134:	d8 01       	movw	r26, r16
    3136:	4c 91       	ld	r20, X
    3138:	11 96       	adiw	r26, 0x01	; 1
    313a:	5c 91       	ld	r21, X
    313c:	11 97       	sbiw	r26, 0x01	; 1
    313e:	12 96       	adiw	r26, 0x02	; 2
    3140:	6c 91       	ld	r22, X
    3142:	12 97       	sbiw	r26, 0x02	; 2
    3144:	13 96       	adiw	r26, 0x03	; 3
    3146:	ed 90       	ld	r14, X+
    3148:	fc 90       	ld	r15, X
    314a:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    314c:	70 91 92 01 	lds	r23, 0x0192
    3150:	e0 91 93 01 	lds	r30, 0x0193
    3154:	20 91 95 01 	lds	r18, 0x0195
    3158:	30 91 96 01 	lds	r19, 0x0196
    315c:	21 15       	cp	r18, r1
    315e:	31 05       	cpc	r19, r1
    3160:	31 f0       	breq	.+12     	; 0x316e <process_tapping+0x6c>
    3162:	ef 3f       	cpi	r30, 0xFF	; 255
    3164:	31 f4       	brne	.+12     	; 0x3172 <process_tapping+0x70>
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	7f 3f       	cpi	r23, 0xFF	; 255
    316a:	19 f4       	brne	.+6      	; 0x3172 <process_tapping+0x70>
    316c:	03 c0       	rjmp	.+6      	; 0x3174 <process_tapping+0x72>
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	01 c0       	rjmp	.+2      	; 0x3174 <process_tapping+0x72>
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	b8 2f       	mov	r27, r24
    3176:	b1 70       	andi	r27, 0x01	; 1
    3178:	cb 2e       	mov	r12, r27
    317a:	80 fd       	sbrc	r24, 0
    317c:	6c c1       	rjmp	.+728    	; 0x3456 <process_tapping+0x354>
    317e:	d0 90 94 01 	lds	r13, 0x0194
    3182:	dd 20       	and	r13, r13
    3184:	09 f4       	brne	.+2      	; 0x3188 <process_tapping+0x86>
    3186:	f5 c0       	rjmp	.+490    	; 0x3372 <process_tapping+0x270>
    3188:	f0 91 97 01 	lds	r31, 0x0197
        if (WITHIN_TAPPING_TERM(event)) {
    318c:	e2 16       	cp	r14, r18
    318e:	f3 06       	cpc	r15, r19
    3190:	38 f0       	brcs	.+14     	; 0x31a0 <process_tapping+0x9e>
    3192:	c7 01       	movw	r24, r14
    3194:	82 1b       	sub	r24, r18
    3196:	93 0b       	sbc	r25, r19
    3198:	8a 3f       	cpi	r24, 0xFA	; 250
    319a:	91 05       	cpc	r25, r1
    319c:	48 f0       	brcs	.+18     	; 0x31b0 <process_tapping+0xae>
    319e:	9b c0       	rjmp	.+310    	; 0x32d6 <process_tapping+0x1d4>
    31a0:	20 95       	com	r18
    31a2:	30 95       	com	r19
    31a4:	2e 0d       	add	r18, r14
    31a6:	3f 1d       	adc	r19, r15
    31a8:	2a 3f       	cpi	r18, 0xFA	; 250
    31aa:	31 05       	cpc	r19, r1
    31ac:	08 f0       	brcs	.+2      	; 0x31b0 <process_tapping+0xae>
    31ae:	93 c0       	rjmp	.+294    	; 0x32d6 <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    31b0:	8f 2f       	mov	r24, r31
    31b2:	80 7f       	andi	r24, 0xF0	; 240
    31b4:	09 f0       	breq	.+2      	; 0x31b8 <process_tapping+0xb6>
    31b6:	52 c0       	rjmp	.+164    	; 0x325c <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    31b8:	e5 13       	cpse	r30, r21
    31ba:	14 c0       	rjmp	.+40     	; 0x31e4 <process_tapping+0xe2>
    31bc:	74 13       	cpse	r23, r20
    31be:	12 c0       	rjmp	.+36     	; 0x31e4 <process_tapping+0xe2>
    31c0:	d6 2e       	mov	r13, r22
    31c2:	61 11       	cpse	r22, r1
    31c4:	0f c0       	rjmp	.+30     	; 0x31e4 <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    31c6:	ff 70       	andi	r31, 0x0F	; 15
    31c8:	f0 61       	ori	r31, 0x10	; 16
    31ca:	f0 93 97 01 	sts	0x0197, r31
                    debug_tapping_key();
    31ce:	0e 94 0b 18 	call	0x3016	; 0x3016 <debug_tapping_key>
                    process_action(&tapping_key);
    31d2:	82 e9       	ldi	r24, 0x92	; 146
    31d4:	91 e0       	ldi	r25, 0x01	; 1
    31d6:	0e 94 8e 14 	call	0x291c	; 0x291c <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    31da:	80 91 97 01 	lds	r24, 0x0197
    31de:	f8 01       	movw	r30, r16
    31e0:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    31e2:	6c c1       	rjmp	.+728    	; 0x34bc <process_tapping+0x3ba>
    31e4:	ef 28       	or	r14, r15
    31e6:	31 f0       	breq	.+12     	; 0x31f4 <process_tapping+0xf2>
    31e8:	5f 3f       	cpi	r21, 0xFF	; 255
    31ea:	31 f4       	brne	.+12     	; 0x31f8 <process_tapping+0xf6>
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	4f 3f       	cpi	r20, 0xFF	; 255
    31f0:	19 f4       	brne	.+6      	; 0x31f8 <process_tapping+0xf6>
    31f2:	03 c0       	rjmp	.+6      	; 0x31fa <process_tapping+0xf8>
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	01 c0       	rjmp	.+2      	; 0x31fa <process_tapping+0xf8>
    31f8:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    31fa:	80 fd       	sbrc	r24, 0
    31fc:	03 c0       	rjmp	.+6      	; 0x3204 <process_tapping+0x102>
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	86 27       	eor	r24, r22
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <process_tapping+0x104>
    3204:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3206:	f8 2f       	mov	r31, r24
    3208:	f1 70       	andi	r31, 0x01	; 1
    320a:	ff 2e       	mov	r15, r31
    320c:	80 ff       	sbrs	r24, 0
    320e:	1c c0       	rjmp	.+56     	; 0x3248 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3210:	80 91 60 01 	lds	r24, 0x0160
    3214:	20 91 61 01 	lds	r18, 0x0161
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3218:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    321a:	82 17       	cp	r24, r18
    321c:	09 f4       	brne	.+2      	; 0x3220 <process_tapping+0x11e>
    321e:	28 c1       	rjmp	.+592    	; 0x3470 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	38 9f       	mul	r19, r24
    3224:	f0 01       	movw	r30, r0
    3226:	39 9f       	mul	r19, r25
    3228:	f0 0d       	add	r31, r0
    322a:	11 24       	eor	r1, r1
    322c:	ee 59       	subi	r30, 0x9E	; 158
    322e:	fe 4f       	sbci	r31, 0xFE	; 254
    3230:	71 81       	ldd	r23, Z+1	; 0x01
    3232:	57 13       	cpse	r21, r23
    3234:	06 c0       	rjmp	.+12     	; 0x3242 <process_tapping+0x140>
    3236:	70 81       	ld	r23, Z
    3238:	47 13       	cpse	r20, r23
    323a:	03 c0       	rjmp	.+6      	; 0x3242 <process_tapping+0x140>
    323c:	72 81       	ldd	r23, Z+2	; 0x02
    323e:	67 13       	cpse	r22, r23
    3240:	03 c0       	rjmp	.+6      	; 0x3248 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3242:	01 96       	adiw	r24, 0x01	; 1
    3244:	87 70       	andi	r24, 0x07	; 7
    3246:	e9 cf       	rjmp	.-46     	; 0x321a <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3248:	d6 2e       	mov	r13, r22
    324a:	66 23       	and	r22, r22
    324c:	09 f4       	brne	.+2      	; 0x3250 <process_tapping+0x14e>
    324e:	36 c1       	rjmp	.+620    	; 0x34bc <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    3250:	80 91 97 01 	lds	r24, 0x0197
    3254:	81 60       	ori	r24, 0x01	; 1
    3256:	80 93 97 01 	sts	0x0197, r24
    325a:	53 c0       	rjmp	.+166    	; 0x3302 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    325c:	e5 13       	cpse	r30, r21
    325e:	08 c0       	rjmp	.+16     	; 0x3270 <process_tapping+0x16e>
    3260:	74 13       	cpse	r23, r20
    3262:	06 c0       	rjmp	.+12     	; 0x3270 <process_tapping+0x16e>
    3264:	61 11       	cpse	r22, r1
    3266:	04 c0       	rjmp	.+8      	; 0x3270 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3268:	d8 01       	movw	r26, r16
    326a:	15 96       	adiw	r26, 0x05	; 5
    326c:	fc 93       	st	X, r31
    326e:	ae c0       	rjmp	.+348    	; 0x33cc <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3270:	4d 87       	std	Y+13, r20	; 0x0d
    3272:	5e 87       	std	Y+14, r21	; 0x0e
    3274:	8d 85       	ldd	r24, Y+13	; 0x0d
    3276:	9e 85       	ldd	r25, Y+14	; 0x0e
    3278:	6a 8b       	std	Y+18, r22	; 0x12
    327a:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <is_tap_key>
    327e:	6a 89       	ldd	r22, Y+18	; 0x12
    3280:	88 23       	and	r24, r24
    3282:	29 f1       	breq	.+74     	; 0x32ce <process_tapping+0x1cc>
    3284:	d6 2e       	mov	r13, r22
    3286:	66 23       	and	r22, r22
    3288:	11 f1       	breq	.+68     	; 0x32ce <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    328a:	20 91 97 01 	lds	r18, 0x0197
    328e:	82 2f       	mov	r24, r18
    3290:	82 95       	swap	r24
    3292:	8f 70       	andi	r24, 0x0F	; 15
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	02 97       	sbiw	r24, 0x02	; 2
    3298:	0c f4       	brge	.+2      	; 0x329c <process_tapping+0x19a>
    329a:	60 c0       	rjmp	.+192    	; 0x335c <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    329c:	80 91 92 01 	lds	r24, 0x0192
    32a0:	90 91 93 01 	lds	r25, 0x0193
    32a4:	98 87       	std	Y+8, r25	; 0x08
    32a6:	8f 83       	std	Y+7, r24	; 0x07
    32a8:	19 86       	std	Y+9, r1	; 0x09
    32aa:	fb 86       	std	Y+11, r15	; 0x0b
    32ac:	ea 86       	std	Y+10, r14	; 0x0a
    32ae:	2c 87       	std	Y+12, r18	; 0x0c
    32b0:	ce 01       	movw	r24, r28
    32b2:	07 96       	adiw	r24, 0x07	; 7
    32b4:	51 c0       	rjmp	.+162    	; 0x3358 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    32b6:	e5 17       	cp	r30, r21
    32b8:	31 f1       	breq	.+76     	; 0x3306 <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    32ba:	4d 87       	std	Y+13, r20	; 0x0d
    32bc:	5e 87       	std	Y+14, r21	; 0x0e
    32be:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c2:	6a 8b       	std	Y+18, r22	; 0x12
    32c4:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <is_tap_key>
    32c8:	6a 89       	ldd	r22, Y+18	; 0x12
    32ca:	81 11       	cpse	r24, r1
    32cc:	2e c0       	rjmp	.+92     	; 0x332a <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    32ce:	c8 01       	movw	r24, r16
    32d0:	0e 94 8e 14 	call	0x291c	; 0x291c <process_action>
    32d4:	a4 c0       	rjmp	.+328    	; 0x341e <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    32d6:	8f 2f       	mov	r24, r31
    32d8:	80 7f       	andi	r24, 0xF0	; 240
    32da:	69 f7       	brne	.-38     	; 0x32b6 <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    32dc:	7e 2d       	mov	r23, r14
    32de:	f9 8a       	std	Y+17, r15	; 0x11
    32e0:	e8 8a       	std	Y+16, r14	; 0x10
    32e2:	89 89       	ldd	r24, Y+17	; 0x11
    32e4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <debug_event>
                process_action(&tapping_key);
    32e8:	82 e9       	ldi	r24, 0x92	; 146
    32ea:	91 e0       	ldi	r25, 0x01	; 1
    32ec:	0e 94 8e 14 	call	0x291c	; 0x291c <process_action>
                tapping_key = (keyrecord_t){};
    32f0:	e2 e9       	ldi	r30, 0x92	; 146
    32f2:	f1 e0       	ldi	r31, 0x01	; 1
    32f4:	86 e0       	ldi	r24, 0x06	; 6
    32f6:	df 01       	movw	r26, r30
    32f8:	1d 92       	st	X+, r1
    32fa:	8a 95       	dec	r24
    32fc:	e9 f7       	brne	.-6      	; 0x32f8 <process_tapping+0x1f6>
                debug_tapping_key();
    32fe:	0e 94 0b 18 	call	0x3016	; 0x3016 <debug_tapping_key>
                return false;
    3302:	d1 2c       	mov	r13, r1
    3304:	db c0       	rjmp	.+438    	; 0x34bc <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3306:	74 13       	cpse	r23, r20
    3308:	d8 cf       	rjmp	.-80     	; 0x32ba <process_tapping+0x1b8>
    330a:	61 11       	cpse	r22, r1
    330c:	d6 cf       	rjmp	.-84     	; 0x32ba <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    330e:	d8 01       	movw	r26, r16
    3310:	15 96       	adiw	r26, 0x05	; 5
    3312:	fc 93       	st	X, r31
                    process_action(keyp);
    3314:	c8 01       	movw	r24, r16
    3316:	0e 94 8e 14 	call	0x291c	; 0x291c <process_action>
                    tapping_key = (keyrecord_t){};
    331a:	e2 e9       	ldi	r30, 0x92	; 146
    331c:	f1 e0       	ldi	r31, 0x01	; 1
    331e:	86 e0       	ldi	r24, 0x06	; 6
    3320:	df 01       	movw	r26, r30
    3322:	1d 92       	st	X+, r1
    3324:	8a 95       	dec	r24
    3326:	e9 f7       	brne	.-6      	; 0x3322 <process_tapping+0x220>
                    return true;
    3328:	c9 c0       	rjmp	.+402    	; 0x34bc <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    332a:	d6 2e       	mov	r13, r22
    332c:	66 23       	and	r22, r22
    332e:	79 f2       	breq	.-98     	; 0x32ce <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3330:	20 91 97 01 	lds	r18, 0x0197
    3334:	82 2f       	mov	r24, r18
    3336:	82 95       	swap	r24
    3338:	8f 70       	andi	r24, 0x0F	; 15
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	02 97       	sbiw	r24, 0x02	; 2
    333e:	74 f0       	brlt	.+28     	; 0x335c <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3340:	80 91 92 01 	lds	r24, 0x0192
    3344:	90 91 93 01 	lds	r25, 0x0193
    3348:	9a 83       	std	Y+2, r25	; 0x02
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	1b 82       	std	Y+3, r1	; 0x03
    334e:	fd 82       	std	Y+5, r15	; 0x05
    3350:	ec 82       	std	Y+4, r14	; 0x04
    3352:	2e 83       	std	Y+6, r18	; 0x06
    3354:	ce 01       	movw	r24, r28
    3356:	01 96       	adiw	r24, 0x01	; 1
    3358:	0e 94 8e 14 	call	0x291c	; 0x291c <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    335c:	86 e0       	ldi	r24, 0x06	; 6
    335e:	f8 01       	movw	r30, r16
    3360:	a2 e9       	ldi	r26, 0x92	; 146
    3362:	b1 e0       	ldi	r27, 0x01	; 1
    3364:	01 90       	ld	r0, Z+
    3366:	0d 92       	st	X+, r0
    3368:	8a 95       	dec	r24
    336a:	e1 f7       	brne	.-8      	; 0x3364 <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    336c:	0e 94 19 18 	call	0x3032	; 0x3032 <waiting_buffer_scan_tap>
    3370:	6f c0       	rjmp	.+222    	; 0x3450 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3372:	e2 16       	cp	r14, r18
    3374:	f3 06       	cpc	r15, r19
    3376:	28 f0       	brcs	.+10     	; 0x3382 <process_tapping+0x280>
    3378:	c7 01       	movw	r24, r14
    337a:	82 1b       	sub	r24, r18
    337c:	93 0b       	sbc	r25, r19
    337e:	9c 01       	movw	r18, r24
    3380:	04 c0       	rjmp	.+8      	; 0x338a <process_tapping+0x288>
    3382:	20 95       	com	r18
    3384:	30 95       	com	r19
    3386:	2e 0d       	add	r18, r14
    3388:	3f 1d       	adc	r19, r15
    338a:	2a 3f       	cpi	r18, 0xFA	; 250
    338c:	31 05       	cpc	r19, r1
    338e:	08 f0       	brcs	.+2      	; 0x3392 <process_tapping+0x290>
    3390:	52 c0       	rjmp	.+164    	; 0x3436 <process_tapping+0x334>
            if (event.pressed) {
    3392:	d6 2e       	mov	r13, r22
    3394:	66 23       	and	r22, r22
    3396:	09 f4       	brne	.+2      	; 0x339a <process_tapping+0x298>
    3398:	9a cf       	rjmp	.-204    	; 0x32ce <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    339a:	e5 13       	cpse	r30, r21
    339c:	2c c0       	rjmp	.+88     	; 0x33f6 <process_tapping+0x2f4>
    339e:	74 13       	cpse	r23, r20
    33a0:	2a c0       	rjmp	.+84     	; 0x33f6 <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    33a2:	80 91 97 01 	lds	r24, 0x0197
    33a6:	80 fd       	sbrc	r24, 0
    33a8:	1d c0       	rjmp	.+58     	; 0x33e4 <process_tapping+0x2e2>
    33aa:	98 2f       	mov	r25, r24
    33ac:	92 95       	swap	r25
    33ae:	9f 70       	andi	r25, 0x0F	; 15
    33b0:	c9 f0       	breq	.+50     	; 0x33e4 <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    33b2:	d8 01       	movw	r26, r16
    33b4:	15 96       	adiw	r26, 0x05	; 5
    33b6:	8c 93       	st	X, r24
    33b8:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    33ba:	9f 30       	cpi	r25, 0x0F	; 15
    33bc:	39 f0       	breq	.+14     	; 0x33cc <process_tapping+0x2ca>
    33be:	9f 5f       	subi	r25, 0xFF	; 255
    33c0:	92 95       	swap	r25
    33c2:	90 7f       	andi	r25, 0xF0	; 240
    33c4:	8f 70       	andi	r24, 0x0F	; 15
    33c6:	89 2b       	or	r24, r25
    33c8:	15 96       	adiw	r26, 0x05	; 5
    33ca:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    33cc:	c8 01       	movw	r24, r16
    33ce:	0e 94 8e 14 	call	0x291c	; 0x291c <process_action>
                        tapping_key = *keyp;
    33d2:	86 e0       	ldi	r24, 0x06	; 6
    33d4:	f8 01       	movw	r30, r16
    33d6:	a2 e9       	ldi	r26, 0x92	; 146
    33d8:	b1 e0       	ldi	r27, 0x01	; 1
    33da:	01 90       	ld	r0, Z+
    33dc:	0d 92       	st	X+, r0
    33de:	8a 95       	dec	r24
    33e0:	e1 f7       	brne	.-8      	; 0x33da <process_tapping+0x2d8>
    33e2:	36 c0       	rjmp	.+108    	; 0x3450 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    33e4:	86 e0       	ldi	r24, 0x06	; 6
    33e6:	f8 01       	movw	r30, r16
    33e8:	a2 e9       	ldi	r26, 0x92	; 146
    33ea:	b1 e0       	ldi	r27, 0x01	; 1
    33ec:	01 90       	ld	r0, Z+
    33ee:	0d 92       	st	X+, r0
    33f0:	8a 95       	dec	r24
    33f2:	e1 f7       	brne	.-8      	; 0x33ec <process_tapping+0x2ea>
                        return true;
    33f4:	63 c0       	rjmp	.+198    	; 0x34bc <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    33f6:	4d 87       	std	Y+13, r20	; 0x0d
    33f8:	5e 87       	std	Y+14, r21	; 0x0e
    33fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    33fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33fe:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <is_tap_key>
    3402:	88 23       	and	r24, r24
    3404:	79 f0       	breq	.+30     	; 0x3424 <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    3406:	86 e0       	ldi	r24, 0x06	; 6
    3408:	f8 01       	movw	r30, r16
    340a:	a2 e9       	ldi	r26, 0x92	; 146
    340c:	b1 e0       	ldi	r27, 0x01	; 1
    340e:	01 90       	ld	r0, Z+
    3410:	0d 92       	st	X+, r0
    3412:	8a 95       	dec	r24
    3414:	e1 f7       	brne	.-8      	; 0x340e <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    3416:	0e 94 19 18 	call	0x3032	; 0x3032 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    341a:	0e 94 0b 18 	call	0x3016	; 0x3016 <debug_tapping_key>
                    return true;
    341e:	dd 24       	eor	r13, r13
    3420:	d3 94       	inc	r13
    3422:	4c c0       	rjmp	.+152    	; 0x34bc <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3424:	80 91 97 01 	lds	r24, 0x0197
    3428:	81 60       	ori	r24, 0x01	; 1
    342a:	80 93 97 01 	sts	0x0197, r24
                    process_action(keyp);
    342e:	c8 01       	movw	r24, r16
    3430:	0e 94 8e 14 	call	0x291c	; 0x291c <process_action>
                    return true;
    3434:	43 c0       	rjmp	.+134    	; 0x34bc <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3436:	7e 2d       	mov	r23, r14
    3438:	f9 8a       	std	Y+17, r15	; 0x11
    343a:	e8 8a       	std	Y+16, r14	; 0x10
    343c:	89 89       	ldd	r24, Y+17	; 0x11
    343e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <debug_event>
            tapping_key = (keyrecord_t){};
    3442:	e2 e9       	ldi	r30, 0x92	; 146
    3444:	f1 e0       	ldi	r31, 0x01	; 1
    3446:	86 e0       	ldi	r24, 0x06	; 6
    3448:	df 01       	movw	r26, r30
    344a:	1d 92       	st	X+, r1
    344c:	8a 95       	dec	r24
    344e:	e9 f7       	brne	.-6      	; 0x344a <process_tapping+0x348>
            debug_tapping_key();
    3450:	0e 94 0b 18 	call	0x3016	; 0x3016 <debug_tapping_key>
            return false;
    3454:	33 c0       	rjmp	.+102    	; 0x34bc <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3456:	66 23       	and	r22, r22
    3458:	09 f4       	brne	.+2      	; 0x345c <process_tapping+0x35a>
    345a:	39 cf       	rjmp	.-398    	; 0x32ce <process_tapping+0x1cc>
    345c:	4d 87       	std	Y+13, r20	; 0x0d
    345e:	5e 87       	std	Y+14, r21	; 0x0e
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <is_tap_key>
    3468:	88 23       	and	r24, r24
    346a:	09 f4       	brne	.+2      	; 0x346e <process_tapping+0x36c>
    346c:	30 cf       	rjmp	.-416    	; 0x32ce <process_tapping+0x1cc>
    346e:	cb cf       	rjmp	.-106    	; 0x3406 <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3470:	4d 87       	std	Y+13, r20	; 0x0d
    3472:	5e 87       	std	Y+14, r21	; 0x0e
    3474:	8d 85       	ldd	r24, Y+13	; 0x0d
    3476:	9e 85       	ldd	r25, Y+14	; 0x0e
    3478:	0e 94 c7 1c 	call	0x398e	; 0x398e <layer_switch_get_action>
                    switch (action.kind.id) {
    347c:	29 2f       	mov	r18, r25
    347e:	22 95       	swap	r18
    3480:	2f 70       	andi	r18, 0x0F	; 15
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	22 30       	cpi	r18, 0x02	; 2
    3486:	31 05       	cpc	r19, r1
    3488:	2c f4       	brge	.+10     	; 0x3494 <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    348a:	9f 70       	andi	r25, 0x0F	; 15
    348c:	41 f0       	breq	.+16     	; 0x349e <process_tapping+0x39c>
    348e:	81 11       	cpse	r24, r1
    3490:	06 c0       	rjmp	.+12     	; 0x349e <process_tapping+0x39c>
    3492:	0c c0       	rjmp	.+24     	; 0x34ac <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3494:	24 30       	cpi	r18, 0x04	; 4
    3496:	31 05       	cpc	r19, r1
    3498:	2c f4       	brge	.+10     	; 0x34a4 <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    349a:	9f 70       	andi	r25, 0x0F	; 15
    349c:	49 f4       	brne	.+18     	; 0x34b0 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    349e:	80 5e       	subi	r24, 0xE0	; 224
    34a0:	88 30       	cpi	r24, 0x08	; 8
    34a2:	20 f0       	brcs	.+8      	; 0x34ac <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    34a4:	c8 01       	movw	r24, r16
    34a6:	0e 94 8e 14 	call	0x291c	; 0x291c <process_action>
                    return true;
    34aa:	cf 2c       	mov	r12, r15
    34ac:	dc 2c       	mov	r13, r12
    34ae:	06 c0       	rjmp	.+12     	; 0x34bc <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    34b0:	d8 01       	movw	r26, r16
    34b2:	15 96       	adiw	r26, 0x05	; 5
    34b4:	9c 91       	ld	r25, X
    34b6:	90 7f       	andi	r25, 0xF0	; 240
    34b8:	91 f7       	brne	.-28     	; 0x349e <process_tapping+0x39c>
    34ba:	f8 cf       	rjmp	.-16     	; 0x34ac <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    34bc:	8d 2d       	mov	r24, r13
    34be:	62 96       	adiw	r28, 0x12	; 18
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	ff 90       	pop	r15
    34d4:	ef 90       	pop	r14
    34d6:	df 90       	pop	r13
    34d8:	cf 90       	pop	r12
    34da:	08 95       	ret

000034dc <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    34dc:	1f 93       	push	r17
    34de:	cf 93       	push	r28
    34e0:	df 93       	push	r29
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	2c 97       	sbiw	r28, 0x0c	; 12
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	4f 83       	std	Y+7, r20	; 0x07
    34f4:	58 87       	std	Y+8, r21	; 0x08
    34f6:	69 87       	std	Y+9, r22	; 0x09
    34f8:	7a 87       	std	Y+10, r23	; 0x0a
    34fa:	8b 87       	std	Y+11, r24	; 0x0b
    34fc:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    34fe:	ce 01       	movw	r24, r28
    3500:	07 96       	adiw	r24, 0x07	; 7
    3502:	0e 94 81 18 	call	0x3102	; 0x3102 <process_tapping>
    3506:	88 23       	and	r24, r24
    3508:	c1 f0       	breq	.+48     	; 0x353a <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    350a:	2f 81       	ldd	r18, Y+7	; 0x07
    350c:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    350e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3510:	9b 85       	ldd	r25, Y+11	; 0x0b
    3512:	89 2b       	or	r24, r25
    3514:	31 f0       	breq	.+12     	; 0x3522 <action_tapping_process+0x46>
    3516:	3f 3f       	cpi	r19, 0xFF	; 255
    3518:	11 f0       	breq	.+4      	; 0x351e <action_tapping_process+0x42>
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	03 c0       	rjmp	.+6      	; 0x3524 <action_tapping_process+0x48>
    351e:	2f 3f       	cpi	r18, 0xFF	; 255
    3520:	e1 f7       	brne	.-8      	; 0x351a <action_tapping_process+0x3e>
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	81 11       	cpse	r24, r1
    3526:	47 c0       	rjmp	.+142    	; 0x35b6 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    3528:	4f 81       	ldd	r20, Y+7	; 0x07
    352a:	58 85       	ldd	r21, Y+8	; 0x08
    352c:	69 85       	ldd	r22, Y+9	; 0x09
    352e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3530:	8b 85       	ldd	r24, Y+11	; 0x0b
    3532:	9c 85       	ldd	r25, Y+12	; 0x0c
    3534:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <debug_record>
    3538:	3e c0       	rjmp	.+124    	; 0x35b6 <action_tapping_process+0xda>
    353a:	86 e0       	ldi	r24, 0x06	; 6
    353c:	fe 01       	movw	r30, r28
    353e:	37 96       	adiw	r30, 0x07	; 7
    3540:	de 01       	movw	r26, r28
    3542:	11 96       	adiw	r26, 0x01	; 1
    3544:	01 90       	ld	r0, Z+
    3546:	0d 92       	st	X+, r0
    3548:	8a 95       	dec	r24
    354a:	e1 f7       	brne	.-8      	; 0x3544 <action_tapping_process+0x68>
    354c:	ff 81       	ldd	r31, Y+7	; 0x07
    354e:	e8 85       	ldd	r30, Y+8	; 0x08
    3550:	4a 85       	ldd	r20, Y+10	; 0x0a
    3552:	5b 85       	ldd	r21, Y+11	; 0x0b
    3554:	41 15       	cp	r20, r1
    3556:	51 05       	cpc	r21, r1
    3558:	31 f0       	breq	.+12     	; 0x3566 <action_tapping_process+0x8a>
    355a:	ef 3f       	cpi	r30, 0xFF	; 255
    355c:	31 f4       	brne	.+12     	; 0x356a <action_tapping_process+0x8e>
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	ff 3f       	cpi	r31, 0xFF	; 255
    3562:	19 f4       	brne	.+6      	; 0x356a <action_tapping_process+0x8e>
    3564:	03 c0       	rjmp	.+6      	; 0x356c <action_tapping_process+0x90>
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	01 c0       	rjmp	.+2      	; 0x356c <action_tapping_process+0x90>
    356a:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    356c:	80 fd       	sbrc	r24, 0
    356e:	23 c0       	rjmp	.+70     	; 0x35b6 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3570:	20 91 61 01 	lds	r18, 0x0161
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	c9 01       	movw	r24, r18
    3578:	01 96       	adiw	r24, 0x01	; 1
    357a:	87 70       	andi	r24, 0x07	; 7
    357c:	99 27       	eor	r25, r25
    357e:	60 91 60 01 	lds	r22, 0x0160
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	86 17       	cp	r24, r22
    3586:	97 07       	cpc	r25, r23
    3588:	f1 f1       	breq	.+124    	; 0x3606 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    358a:	f9 83       	std	Y+1, r31	; 0x01
    358c:	ea 83       	std	Y+2, r30	; 0x02
    358e:	5d 83       	std	Y+5, r21	; 0x05
    3590:	4c 83       	std	Y+4, r20	; 0x04
    3592:	96 e0       	ldi	r25, 0x06	; 6
    3594:	92 9f       	mul	r25, r18
    3596:	d0 01       	movw	r26, r0
    3598:	93 9f       	mul	r25, r19
    359a:	b0 0d       	add	r27, r0
    359c:	11 24       	eor	r1, r1
    359e:	ae 59       	subi	r26, 0x9E	; 158
    35a0:	be 4f       	sbci	r27, 0xFE	; 254
    35a2:	fe 01       	movw	r30, r28
    35a4:	31 96       	adiw	r30, 0x01	; 1
    35a6:	01 90       	ld	r0, Z+
    35a8:	0d 92       	st	X+, r0
    35aa:	9a 95       	dec	r25
    35ac:	e1 f7       	brne	.-8      	; 0x35a6 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    35ae:	80 93 61 01 	sts	0x0161, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    35b2:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35b6:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    35b8:	80 91 60 01 	lds	r24, 0x0160
    35bc:	90 91 61 01 	lds	r25, 0x0161
    35c0:	89 17       	cp	r24, r25
    35c2:	79 f1       	breq	.+94     	; 0x3622 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35c4:	18 9f       	mul	r17, r24
    35c6:	c0 01       	movw	r24, r0
    35c8:	11 24       	eor	r1, r1
    35ca:	8e 59       	subi	r24, 0x9E	; 158
    35cc:	9e 4f       	sbci	r25, 0xFE	; 254
    35ce:	0e 94 81 18 	call	0x3102	; 0x3102 <process_tapping>
    35d2:	88 23       	and	r24, r24
    35d4:	31 f1       	breq	.+76     	; 0x3622 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    35d6:	e0 91 60 01 	lds	r30, 0x0160
    35da:	1e 9f       	mul	r17, r30
    35dc:	f0 01       	movw	r30, r0
    35de:	11 24       	eor	r1, r1
    35e0:	ee 59       	subi	r30, 0x9E	; 158
    35e2:	fe 4f       	sbci	r31, 0xFE	; 254
    35e4:	40 81       	ld	r20, Z
    35e6:	51 81       	ldd	r21, Z+1	; 0x01
    35e8:	62 81       	ldd	r22, Z+2	; 0x02
    35ea:	73 81       	ldd	r23, Z+3	; 0x03
    35ec:	84 81       	ldd	r24, Z+4	; 0x04
    35ee:	95 81       	ldd	r25, Z+5	; 0x05
    35f0:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    35f4:	80 91 60 01 	lds	r24, 0x0160
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	87 70       	andi	r24, 0x07	; 7
    35fe:	99 27       	eor	r25, r25
    3600:	80 93 60 01 	sts	0x0160, r24
    3604:	d9 cf       	rjmp	.-78     	; 0x35b8 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3606:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    360a:	10 92 61 01 	sts	0x0161, r1
    waiting_buffer_tail = 0;
    360e:	10 92 60 01 	sts	0x0160, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3612:	e2 e9       	ldi	r30, 0x92	; 146
    3614:	f1 e0       	ldi	r31, 0x01	; 1
    3616:	86 e0       	ldi	r24, 0x06	; 6
    3618:	df 01       	movw	r26, r30
    361a:	1d 92       	st	X+, r1
    361c:	8a 95       	dec	r24
    361e:	e9 f7       	brne	.-6      	; 0x361a <action_tapping_process+0x13e>
    3620:	ca cf       	rjmp	.-108    	; 0x35b6 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3622:	2c 96       	adiw	r28, 0x0c	; 12
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	1f 91       	pop	r17
    3634:	08 95       	ret

00003636 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3636:	ef 92       	push	r14
    3638:	ff 92       	push	r15
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	09 f4       	brne	.+2      	; 0x364a <action_macro_play+0x14>
    3648:	6d c0       	rjmp	.+218    	; 0x3724 <action_macro_play+0xee>
    364a:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    364c:	ee 24       	eor	r14, r14
    364e:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3650:	ef 01       	movw	r28, r30
    3652:	21 96       	adiw	r28, 0x01	; 1
    3654:	84 91       	lpm	r24, Z
    3656:	84 37       	cpi	r24, 0x74	; 116
    3658:	40 f4       	brcc	.+16     	; 0x366a <action_macro_play+0x34>
    365a:	84 30       	cpi	r24, 0x04	; 4
    365c:	08 f0       	brcs	.+2      	; 0x3660 <action_macro_play+0x2a>
    365e:	53 c0       	rjmp	.+166    	; 0x3706 <action_macro_play+0xd0>
    3660:	81 30       	cpi	r24, 0x01	; 1
    3662:	81 f0       	breq	.+32     	; 0x3684 <action_macro_play+0x4e>
    3664:	82 30       	cpi	r24, 0x02	; 2
    3666:	21 f1       	breq	.+72     	; 0x36b0 <action_macro_play+0x7a>
    3668:	5d c0       	rjmp	.+186    	; 0x3724 <action_macro_play+0xee>
    366a:	85 37       	cpi	r24, 0x75	; 117
    366c:	09 f4       	brne	.+2      	; 0x3670 <action_macro_play+0x3a>
    366e:	45 c0       	rjmp	.+138    	; 0x36fa <action_macro_play+0xc4>
    3670:	b0 f1       	brcs	.+108    	; 0x36de <action_macro_play+0xa8>
    3672:	9c e7       	ldi	r25, 0x7C	; 124
    3674:	98 0f       	add	r25, r24
    3676:	90 37       	cpi	r25, 0x70	; 112
    3678:	08 f0       	brcs	.+2      	; 0x367c <action_macro_play+0x46>
    367a:	54 c0       	rjmp	.+168    	; 0x3724 <action_macro_play+0xee>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    367c:	8f 77       	andi	r24, 0x7F	; 127
    367e:	0e 94 31 14 	call	0x2862	; 0x2862 <unregister_code>
                break;
    3682:	43 c0       	rjmp	.+134    	; 0x370a <action_macro_play+0xd4>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3684:	8f 01       	movw	r16, r30
    3686:	0e 5f       	subi	r16, 0xFE	; 254
    3688:	1f 4f       	sbci	r17, 0xFF	; 255
    368a:	fe 01       	movw	r30, r28
    368c:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    368e:	90 e2       	ldi	r25, 0x20	; 32
    3690:	98 0f       	add	r25, r24
    3692:	98 30       	cpi	r25, 0x08	; 8
    3694:	50 f4       	brcc	.+20     	; 0x36aa <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    3696:	87 70       	andi	r24, 0x07	; 7
    3698:	fe 2d       	mov	r31, r14
    369a:	01 c0       	rjmp	.+2      	; 0x369e <action_macro_play+0x68>
    369c:	ff 0f       	add	r31, r31
    369e:	8a 95       	dec	r24
    36a0:	ea f7       	brpl	.-6      	; 0x369c <action_macro_play+0x66>
    36a2:	8f 2f       	mov	r24, r31
    36a4:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <add_weak_mods>
    36a8:	15 c0       	rjmp	.+42     	; 0x36d4 <action_macro_play+0x9e>
                } else {
                    register_code(macro);
    36aa:	0e 94 69 13 	call	0x26d2	; 0x26d2 <register_code>
    36ae:	12 c0       	rjmp	.+36     	; 0x36d4 <action_macro_play+0x9e>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    36b0:	8f 01       	movw	r16, r30
    36b2:	0e 5f       	subi	r16, 0xFE	; 254
    36b4:	1f 4f       	sbci	r17, 0xFF	; 255
    36b6:	fe 01       	movw	r30, r28
    36b8:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    36ba:	90 e2       	ldi	r25, 0x20	; 32
    36bc:	98 0f       	add	r25, r24
    36be:	98 30       	cpi	r25, 0x08	; 8
    36c0:	58 f4       	brcc	.+22     	; 0x36d8 <action_macro_play+0xa2>
                    del_weak_mods(MOD_BIT(macro));
    36c2:	87 70       	andi	r24, 0x07	; 7
    36c4:	fe 2d       	mov	r31, r14
    36c6:	01 c0       	rjmp	.+2      	; 0x36ca <action_macro_play+0x94>
    36c8:	ff 0f       	add	r31, r31
    36ca:	8a 95       	dec	r24
    36cc:	ea f7       	brpl	.-6      	; 0x36c8 <action_macro_play+0x92>
    36ce:	8f 2f       	mov	r24, r31
    36d0:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <del_weak_mods>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    36d4:	e8 01       	movw	r28, r16
    36d6:	19 c0       	rjmp	.+50     	; 0x370a <action_macro_play+0xd4>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                } else {
                    unregister_code(macro);
    36d8:	0e 94 31 14 	call	0x2862	; 0x2862 <unregister_code>
    36dc:	fb cf       	rjmp	.-10     	; 0x36d4 <action_macro_play+0x9e>
                }
                break;
            case WAIT:
                MACRO_READ();
    36de:	cf 01       	movw	r24, r30
    36e0:	02 96       	adiw	r24, 0x02	; 2
    36e2:	fe 01       	movw	r30, r28
    36e4:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    36e6:	cc 23       	and	r28, r28
    36e8:	61 f0       	breq	.+24     	; 0x3702 <action_macro_play+0xcc>
    36ea:	ef e9       	ldi	r30, 0x9F	; 159
    36ec:	ff e0       	ldi	r31, 0x0F	; 15
    36ee:	31 97       	sbiw	r30, 0x01	; 1
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <action_macro_play+0xb8>
    36f2:	00 c0       	rjmp	.+0      	; 0x36f4 <action_macro_play+0xbe>
    36f4:	00 00       	nop
    36f6:	c1 50       	subi	r28, 0x01	; 1
    36f8:	f6 cf       	rjmp	.-20     	; 0x36e6 <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    36fa:	cf 01       	movw	r24, r30
    36fc:	02 96       	adiw	r24, 0x02	; 2
    36fe:	fe 01       	movw	r30, r28
    3700:	f4 90       	lpm	r15, Z
    3702:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3704:	02 c0       	rjmp	.+4      	; 0x370a <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3706:	0e 94 69 13 	call	0x26d2	; 0x26d2 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    370a:	8f 2d       	mov	r24, r15
    370c:	88 23       	and	r24, r24
    370e:	41 f0       	breq	.+16     	; 0x3720 <action_macro_play+0xea>
    3710:	ef e9       	ldi	r30, 0x9F	; 159
    3712:	ff e0       	ldi	r31, 0x0F	; 15
    3714:	31 97       	sbiw	r30, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <action_macro_play+0xde>
    3718:	00 c0       	rjmp	.+0      	; 0x371a <action_macro_play+0xe4>
    371a:	00 00       	nop
    371c:	81 50       	subi	r24, 0x01	; 1
    371e:	f6 cf       	rjmp	.-20     	; 0x370c <action_macro_play+0xd6>
    3720:	fe 01       	movw	r30, r28
    3722:	96 cf       	rjmp	.-212    	; 0x3650 <action_macro_play+0x1a>
    }
}
    3724:	df 91       	pop	r29
    3726:	cf 91       	pop	r28
    3728:	1f 91       	pop	r17
    372a:	0f 91       	pop	r16
    372c:	ff 90       	pop	r15
    372e:	ef 90       	pop	r14
    3730:	08 95       	ret

00003732 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3732:	08 95       	ret

00003734 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3734:	60 93 9c 01 	sts	0x019C, r22
    3738:	70 93 9d 01 	sts	0x019D, r23
    373c:	80 93 9e 01 	sts	0x019E, r24
    3740:	90 93 9f 01 	sts	0x019F, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3744:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

00003748 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3748:	0f 93       	push	r16
    374a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    374c:	00 91 9c 01 	lds	r16, 0x019C
    3750:	10 91 9d 01 	lds	r17, 0x019D
    3754:	20 91 9e 01 	lds	r18, 0x019E
    3758:	30 91 9f 01 	lds	r19, 0x019F
    375c:	06 2b       	or	r16, r22
    375e:	17 2b       	or	r17, r23
    3760:	28 2b       	or	r18, r24
    3762:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3764:	00 93 9c 01 	sts	0x019C, r16
    3768:	10 93 9d 01 	sts	0x019D, r17
    376c:	20 93 9e 01 	sts	0x019E, r18
    3770:	30 93 9f 01 	sts	0x019F, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3774:	1f 91       	pop	r17
    3776:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3778:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

0000377c <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    377c:	0f 93       	push	r16
    377e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3780:	00 91 9c 01 	lds	r16, 0x019C
    3784:	10 91 9d 01 	lds	r17, 0x019D
    3788:	20 91 9e 01 	lds	r18, 0x019E
    378c:	30 91 9f 01 	lds	r19, 0x019F
    3790:	06 23       	and	r16, r22
    3792:	17 23       	and	r17, r23
    3794:	28 23       	and	r18, r24
    3796:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3798:	00 93 9c 01 	sts	0x019C, r16
    379c:	10 93 9d 01 	sts	0x019D, r17
    37a0:	20 93 9e 01 	sts	0x019E, r18
    37a4:	30 93 9f 01 	sts	0x019F, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    37a8:	1f 91       	pop	r17
    37aa:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    37ac:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

000037b0 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    37b0:	0f 93       	push	r16
    37b2:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    37b4:	00 91 9c 01 	lds	r16, 0x019C
    37b8:	10 91 9d 01 	lds	r17, 0x019D
    37bc:	20 91 9e 01 	lds	r18, 0x019E
    37c0:	30 91 9f 01 	lds	r19, 0x019F
    37c4:	06 27       	eor	r16, r22
    37c6:	17 27       	eor	r17, r23
    37c8:	28 27       	eor	r18, r24
    37ca:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    37cc:	00 93 9c 01 	sts	0x019C, r16
    37d0:	10 93 9d 01 	sts	0x019D, r17
    37d4:	20 93 9e 01 	sts	0x019E, r18
    37d8:	30 93 9f 01 	sts	0x019F, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    37dc:	1f 91       	pop	r17
    37de:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    37e0:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

000037e4 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    37e4:	10 92 98 01 	sts	0x0198, r1
    37e8:	10 92 99 01 	sts	0x0199, r1
    37ec:	10 92 9a 01 	sts	0x019A, r1
    37f0:	10 92 9b 01 	sts	0x019B, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    37f4:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

000037f8 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    37f8:	41 e0       	ldi	r20, 0x01	; 1
    37fa:	50 e0       	ldi	r21, 0x00	; 0
    37fc:	60 e0       	ldi	r22, 0x00	; 0
    37fe:	70 e0       	ldi	r23, 0x00	; 0
    3800:	04 c0       	rjmp	.+8      	; 0x380a <layer_move+0x12>
    3802:	44 0f       	add	r20, r20
    3804:	55 1f       	adc	r21, r21
    3806:	66 1f       	adc	r22, r22
    3808:	77 1f       	adc	r23, r23
    380a:	8a 95       	dec	r24
    380c:	d2 f7       	brpl	.-12     	; 0x3802 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    380e:	40 93 98 01 	sts	0x0198, r20
    3812:	50 93 99 01 	sts	0x0199, r21
    3816:	60 93 9a 01 	sts	0x019A, r22
    381a:	70 93 9b 01 	sts	0x019B, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    381e:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

00003822 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3822:	41 e0       	ldi	r20, 0x01	; 1
    3824:	50 e0       	ldi	r21, 0x00	; 0
    3826:	60 e0       	ldi	r22, 0x00	; 0
    3828:	70 e0       	ldi	r23, 0x00	; 0
    382a:	04 c0       	rjmp	.+8      	; 0x3834 <layer_on+0x12>
    382c:	44 0f       	add	r20, r20
    382e:	55 1f       	adc	r21, r21
    3830:	66 1f       	adc	r22, r22
    3832:	77 1f       	adc	r23, r23
    3834:	8a 95       	dec	r24
    3836:	d2 f7       	brpl	.-12     	; 0x382c <layer_on+0xa>
    3838:	80 91 98 01 	lds	r24, 0x0198
    383c:	90 91 99 01 	lds	r25, 0x0199
    3840:	a0 91 9a 01 	lds	r26, 0x019A
    3844:	b0 91 9b 01 	lds	r27, 0x019B
    3848:	84 2b       	or	r24, r20
    384a:	95 2b       	or	r25, r21
    384c:	a6 2b       	or	r26, r22
    384e:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3850:	80 93 98 01 	sts	0x0198, r24
    3854:	90 93 99 01 	sts	0x0199, r25
    3858:	a0 93 9a 01 	sts	0x019A, r26
    385c:	b0 93 9b 01 	sts	0x019B, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3860:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

00003864 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3864:	41 e0       	ldi	r20, 0x01	; 1
    3866:	50 e0       	ldi	r21, 0x00	; 0
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	70 e0       	ldi	r23, 0x00	; 0
    386c:	04 c0       	rjmp	.+8      	; 0x3876 <layer_off+0x12>
    386e:	44 0f       	add	r20, r20
    3870:	55 1f       	adc	r21, r21
    3872:	66 1f       	adc	r22, r22
    3874:	77 1f       	adc	r23, r23
    3876:	8a 95       	dec	r24
    3878:	d2 f7       	brpl	.-12     	; 0x386e <layer_off+0xa>
    387a:	40 95       	com	r20
    387c:	50 95       	com	r21
    387e:	60 95       	com	r22
    3880:	70 95       	com	r23
    3882:	80 91 98 01 	lds	r24, 0x0198
    3886:	90 91 99 01 	lds	r25, 0x0199
    388a:	a0 91 9a 01 	lds	r26, 0x019A
    388e:	b0 91 9b 01 	lds	r27, 0x019B
    3892:	84 23       	and	r24, r20
    3894:	95 23       	and	r25, r21
    3896:	a6 23       	and	r26, r22
    3898:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    389a:	80 93 98 01 	sts	0x0198, r24
    389e:	90 93 99 01 	sts	0x0199, r25
    38a2:	a0 93 9a 01 	sts	0x019A, r26
    38a6:	b0 93 9b 01 	sts	0x019B, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    38aa:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

000038ae <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    38ae:	41 e0       	ldi	r20, 0x01	; 1
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	60 e0       	ldi	r22, 0x00	; 0
    38b4:	70 e0       	ldi	r23, 0x00	; 0
    38b6:	04 c0       	rjmp	.+8      	; 0x38c0 <layer_invert+0x12>
    38b8:	44 0f       	add	r20, r20
    38ba:	55 1f       	adc	r21, r21
    38bc:	66 1f       	adc	r22, r22
    38be:	77 1f       	adc	r23, r23
    38c0:	8a 95       	dec	r24
    38c2:	d2 f7       	brpl	.-12     	; 0x38b8 <layer_invert+0xa>
    38c4:	80 91 98 01 	lds	r24, 0x0198
    38c8:	90 91 99 01 	lds	r25, 0x0199
    38cc:	a0 91 9a 01 	lds	r26, 0x019A
    38d0:	b0 91 9b 01 	lds	r27, 0x019B
    38d4:	84 27       	eor	r24, r20
    38d6:	95 27       	eor	r25, r21
    38d8:	a6 27       	eor	r26, r22
    38da:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    38dc:	80 93 98 01 	sts	0x0198, r24
    38e0:	90 93 99 01 	sts	0x0199, r25
    38e4:	a0 93 9a 01 	sts	0x019A, r26
    38e8:	b0 93 9b 01 	sts	0x019B, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    38ec:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

000038f0 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    38f4:	00 91 98 01 	lds	r16, 0x0198
    38f8:	10 91 99 01 	lds	r17, 0x0199
    38fc:	20 91 9a 01 	lds	r18, 0x019A
    3900:	30 91 9b 01 	lds	r19, 0x019B
    3904:	06 2b       	or	r16, r22
    3906:	17 2b       	or	r17, r23
    3908:	28 2b       	or	r18, r24
    390a:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    390c:	00 93 98 01 	sts	0x0198, r16
    3910:	10 93 99 01 	sts	0x0199, r17
    3914:	20 93 9a 01 	sts	0x019A, r18
    3918:	30 93 9b 01 	sts	0x019B, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    391c:	1f 91       	pop	r17
    391e:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3920:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

00003924 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3924:	0f 93       	push	r16
    3926:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3928:	00 91 98 01 	lds	r16, 0x0198
    392c:	10 91 99 01 	lds	r17, 0x0199
    3930:	20 91 9a 01 	lds	r18, 0x019A
    3934:	30 91 9b 01 	lds	r19, 0x019B
    3938:	06 23       	and	r16, r22
    393a:	17 23       	and	r17, r23
    393c:	28 23       	and	r18, r24
    393e:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3940:	00 93 98 01 	sts	0x0198, r16
    3944:	10 93 99 01 	sts	0x0199, r17
    3948:	20 93 9a 01 	sts	0x019A, r18
    394c:	30 93 9b 01 	sts	0x019B, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    3950:	1f 91       	pop	r17
    3952:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3954:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

00003958 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3958:	0f 93       	push	r16
    395a:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    395c:	00 91 98 01 	lds	r16, 0x0198
    3960:	10 91 99 01 	lds	r17, 0x0199
    3964:	20 91 9a 01 	lds	r18, 0x019A
    3968:	30 91 9b 01 	lds	r19, 0x019B
    396c:	06 27       	eor	r16, r22
    396e:	17 27       	eor	r17, r23
    3970:	28 27       	eor	r18, r24
    3972:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3974:	00 93 98 01 	sts	0x0198, r16
    3978:	10 93 99 01 	sts	0x0199, r17
    397c:	20 93 9a 01 	sts	0x019A, r18
    3980:	30 93 9b 01 	sts	0x019B, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3984:	1f 91       	pop	r17
    3986:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3988:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <clear_keyboard_but_mods>

0000398c <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    398c:	08 95       	ret

0000398e <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    398e:	cf 92       	push	r12
    3990:	df 92       	push	r13
    3992:	ef 92       	push	r14
    3994:	ff 92       	push	r15
    3996:	0f 93       	push	r16
    3998:	1f 93       	push	r17
    399a:	cf 93       	push	r28
    399c:	df 93       	push	r29
    399e:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    39a0:	c0 90 9c 01 	lds	r12, 0x019C
    39a4:	d0 90 9d 01 	lds	r13, 0x019D
    39a8:	e0 90 9e 01 	lds	r14, 0x019E
    39ac:	f0 90 9f 01 	lds	r15, 0x019F
    39b0:	80 91 98 01 	lds	r24, 0x0198
    39b4:	90 91 99 01 	lds	r25, 0x0199
    39b8:	a0 91 9a 01 	lds	r26, 0x019A
    39bc:	b0 91 9b 01 	lds	r27, 0x019B
    39c0:	c8 2a       	or	r12, r24
    39c2:	d9 2a       	or	r13, r25
    39c4:	ea 2a       	or	r14, r26
    39c6:	fb 2a       	or	r15, r27
    39c8:	0f e1       	ldi	r16, 0x1F	; 31
    39ca:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    39cc:	b7 01       	movw	r22, r14
    39ce:	a6 01       	movw	r20, r12
    39d0:	00 2e       	mov	r0, r16
    39d2:	04 c0       	rjmp	.+8      	; 0x39dc <layer_switch_get_action+0x4e>
    39d4:	76 95       	lsr	r23
    39d6:	67 95       	ror	r22
    39d8:	57 95       	ror	r21
    39da:	47 95       	ror	r20
    39dc:	0a 94       	dec	r0
    39de:	d2 f7       	brpl	.-12     	; 0x39d4 <layer_switch_get_action+0x46>
    39e0:	40 ff       	sbrs	r20, 0
    39e2:	07 c0       	rjmp	.+14     	; 0x39f2 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    39e4:	be 01       	movw	r22, r28
    39e6:	80 2f       	mov	r24, r16
    39e8:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    39ec:	81 30       	cpi	r24, 0x01	; 1
    39ee:	91 05       	cpc	r25, r1
    39f0:	39 f4       	brne	.+14     	; 0x3a00 <layer_switch_get_action+0x72>
    39f2:	01 50       	subi	r16, 0x01	; 1
    39f4:	11 09       	sbc	r17, r1
    39f6:	50 f7       	brcc	.-44     	; 0x39cc <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    39f8:	be 01       	movw	r22, r28
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	ff 90       	pop	r15
    3a0a:	ef 90       	pop	r14
    3a0c:	df 90       	pop	r13
    3a0e:	cf 90       	pop	r12
    3a10:	08 95       	ret

00003a12 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3a12:	90 91 0f 01 	lds	r25, 0x010F
    3a16:	99 23       	and	r25, r25
    3a18:	41 f1       	breq	.+80     	; 0x3a6a <add_key+0x58>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3a1a:	98 2f       	mov	r25, r24
    3a1c:	96 95       	lsr	r25
    3a1e:	96 95       	lsr	r25
    3a20:	96 95       	lsr	r25
    3a22:	9f 30       	cpi	r25, 0x0F	; 15
    3a24:	88 f4       	brcc	.+34     	; 0x3a48 <add_key+0x36>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3a26:	e0 91 10 01 	lds	r30, 0x0110
    3a2a:	f0 91 11 01 	lds	r31, 0x0111
    3a2e:	e9 0f       	add	r30, r25
    3a30:	f1 1d       	adc	r31, r1
    3a32:	87 70       	andi	r24, 0x07	; 7
    3a34:	21 e0       	ldi	r18, 0x01	; 1
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	01 c0       	rjmp	.+2      	; 0x3a3c <add_key+0x2a>
    3a3a:	22 0f       	add	r18, r18
    3a3c:	8a 95       	dec	r24
    3a3e:	ea f7       	brpl	.-6      	; 0x3a3a <add_key+0x28>
    3a40:	81 81       	ldd	r24, Z+1	; 0x01
    3a42:	82 2b       	or	r24, r18
    3a44:	81 83       	std	Z+1, r24	; 0x01
    3a46:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3a48:	90 91 b3 01 	lds	r25, 0x01B3
    3a4c:	90 ff       	sbrs	r25, 0
    3a4e:	2d c0       	rjmp	.+90     	; 0x3aaa <add_key+0x98>
    3a50:	1f 92       	push	r1
    3a52:	8f 93       	push	r24
    3a54:	8b e0       	ldi	r24, 0x0B	; 11
    3a56:	96 e0       	ldi	r25, 0x06	; 6
    3a58:	9f 93       	push	r25
    3a5a:	8f 93       	push	r24
    3a5c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3a6a:	40 91 10 01 	lds	r20, 0x0110
    3a6e:	50 91 11 01 	lds	r21, 0x0111
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	9f ef       	ldi	r25, 0xFF	; 255
    3a78:	fa 01       	movw	r30, r20
    3a7a:	e2 0f       	add	r30, r18
    3a7c:	f3 1f       	adc	r31, r19
    3a7e:	62 81       	ldd	r22, Z+2	; 0x02
    3a80:	68 17       	cp	r22, r24
    3a82:	99 f0       	breq	.+38     	; 0x3aaa <add_key+0x98>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3a84:	9f 3f       	cpi	r25, 0xFF	; 255
    3a86:	19 f4       	brne	.+6      	; 0x3a8e <add_key+0x7c>
    3a88:	61 11       	cpse	r22, r1
    3a8a:	01 c0       	rjmp	.+2      	; 0x3a8e <add_key+0x7c>
    3a8c:	92 2f       	mov	r25, r18
    3a8e:	2f 5f       	subi	r18, 0xFF	; 255
    3a90:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3a92:	2e 30       	cpi	r18, 0x0E	; 14
    3a94:	31 05       	cpc	r19, r1
    3a96:	81 f7       	brne	.-32     	; 0x3a78 <add_key+0x66>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3a98:	9f 3f       	cpi	r25, 0xFF	; 255
    3a9a:	39 f0       	breq	.+14     	; 0x3aaa <add_key+0x98>
            keyboard_report->keys[empty] = code;
    3a9c:	fa 01       	movw	r30, r20
    3a9e:	e9 0f       	add	r30, r25
    3aa0:	f1 1d       	adc	r31, r1
    3aa2:	97 fd       	sbrc	r25, 7
    3aa4:	fa 95       	dec	r31
    3aa6:	82 83       	std	Z+2, r24	; 0x02
    3aa8:	08 95       	ret
    3aaa:	08 95       	ret

00003aac <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3aac:	90 91 0f 01 	lds	r25, 0x010F
    3ab0:	99 23       	and	r25, r25
    3ab2:	49 f1       	breq	.+82     	; 0x3b06 <del_key+0x5a>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3ab4:	98 2f       	mov	r25, r24
    3ab6:	96 95       	lsr	r25
    3ab8:	96 95       	lsr	r25
    3aba:	96 95       	lsr	r25
    3abc:	9f 30       	cpi	r25, 0x0F	; 15
    3abe:	90 f4       	brcc	.+36     	; 0x3ae4 <del_key+0x38>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3ac0:	e0 91 10 01 	lds	r30, 0x0110
    3ac4:	f0 91 11 01 	lds	r31, 0x0111
    3ac8:	e9 0f       	add	r30, r25
    3aca:	f1 1d       	adc	r31, r1
    3acc:	87 70       	andi	r24, 0x07	; 7
    3ace:	21 e0       	ldi	r18, 0x01	; 1
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	01 c0       	rjmp	.+2      	; 0x3ad6 <del_key+0x2a>
    3ad4:	22 0f       	add	r18, r18
    3ad6:	8a 95       	dec	r24
    3ad8:	ea f7       	brpl	.-6      	; 0x3ad4 <del_key+0x28>
    3ada:	20 95       	com	r18
    3adc:	81 81       	ldd	r24, Z+1	; 0x01
    3ade:	28 23       	and	r18, r24
    3ae0:	21 83       	std	Z+1, r18	; 0x01
    3ae2:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3ae4:	90 91 b3 01 	lds	r25, 0x01B3
    3ae8:	90 ff       	sbrs	r25, 0
    3aea:	1f c0       	rjmp	.+62     	; 0x3b2a <del_key+0x7e>
    3aec:	1f 92       	push	r1
    3aee:	8f 93       	push	r24
    3af0:	8d ee       	ldi	r24, 0xED	; 237
    3af2:	95 e0       	ldi	r25, 0x05	; 5
    3af4:	9f 93       	push	r25
    3af6:	8f 93       	push	r24
    3af8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    3afc:	0f 90       	pop	r0
    3afe:	0f 90       	pop	r0
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3b06:	40 91 10 01 	lds	r20, 0x0110
    3b0a:	50 91 11 01 	lds	r21, 0x0111
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	fa 01       	movw	r30, r20
    3b14:	e2 0f       	add	r30, r18
    3b16:	f3 1f       	adc	r31, r19
    3b18:	92 81       	ldd	r25, Z+2	; 0x02
    3b1a:	98 13       	cpse	r25, r24
    3b1c:	01 c0       	rjmp	.+2      	; 0x3b20 <del_key+0x74>
            keyboard_report->keys[i] = 0;
    3b1e:	12 82       	std	Z+2, r1	; 0x02
    3b20:	2f 5f       	subi	r18, 0xFF	; 255
    3b22:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3b24:	2e 30       	cpi	r18, 0x0E	; 14
    3b26:	31 05       	cpc	r19, r1
    3b28:	a1 f7       	brne	.-24     	; 0x3b12 <del_key+0x66>
    3b2a:	08 95       	ret

00003b2c <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3b30:	e0 91 10 01 	lds	r30, 0x0110
    3b34:	f0 91 11 01 	lds	r31, 0x0111
    3b38:	e8 0f       	add	r30, r24
    3b3a:	f9 1f       	adc	r31, r25
    3b3c:	10 82       	st	Z, r1
    3b3e:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3b40:	80 31       	cpi	r24, 0x10	; 16
    3b42:	91 05       	cpc	r25, r1
    3b44:	a9 f7       	brne	.-22     	; 0x3b30 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3b46:	08 95       	ret

00003b48 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    3b48:	90 91 b2 01 	lds	r25, 0x01B2
    3b4c:	98 2b       	or	r25, r24
    3b4e:	90 93 b2 01 	sts	0x01B2, r25
    3b52:	08 95       	ret

00003b54 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3b54:	80 95       	com	r24
    3b56:	90 91 b2 01 	lds	r25, 0x01B2
    3b5a:	98 23       	and	r25, r24
    3b5c:	90 93 b2 01 	sts	0x01B2, r25
    3b60:	08 95       	ret

00003b62 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3b62:	10 92 b2 01 	sts	0x01B2, r1
    3b66:	08 95       	ret

00003b68 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3b68:	90 91 b1 01 	lds	r25, 0x01B1
    3b6c:	98 2b       	or	r25, r24
    3b6e:	90 93 b1 01 	sts	0x01B1, r25
    3b72:	08 95       	ret

00003b74 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3b74:	80 95       	com	r24
    3b76:	90 91 b1 01 	lds	r25, 0x01B1
    3b7a:	98 23       	and	r25, r24
    3b7c:	90 93 b1 01 	sts	0x01B1, r25
    3b80:	08 95       	ret

00003b82 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3b82:	10 92 b1 01 	sts	0x01B1, r1
    3b86:	08 95       	ret

00003b88 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3b88:	80 93 a0 01 	sts	0x01A0, r24
    3b8c:	08 95       	ret

00003b8e <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3b8e:	10 92 a0 01 	sts	0x01A0, r1
    3b92:	08 95       	ret

00003b94 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3b94:	40 91 10 01 	lds	r20, 0x0110
    3b98:	50 91 11 01 	lds	r21, 0x0111
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	fa 01       	movw	r30, r20
    3ba4:	e2 0f       	add	r30, r18
    3ba6:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3ba8:	91 81       	ldd	r25, Z+1	; 0x01
    3baa:	91 11       	cpse	r25, r1
            cnt++;
    3bac:	8f 5f       	subi	r24, 0xFF	; 255
    3bae:	2f 5f       	subi	r18, 0xFF	; 255
    3bb0:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3bb2:	2f 30       	cpi	r18, 0x0F	; 15
    3bb4:	31 05       	cpc	r19, r1
    3bb6:	a9 f7       	brne	.-22     	; 0x3ba2 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3bb8:	08 95       	ret

00003bba <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3bba:	e0 91 10 01 	lds	r30, 0x0110
    3bbe:	f0 91 11 01 	lds	r31, 0x0111
    3bc2:	80 91 b2 01 	lds	r24, 0x01B2
    3bc6:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3bc8:	e0 91 10 01 	lds	r30, 0x0110
    3bcc:	f0 91 11 01 	lds	r31, 0x0111
    3bd0:	80 81       	ld	r24, Z
    3bd2:	90 91 b1 01 	lds	r25, 0x01B1
    3bd6:	89 2b       	or	r24, r25
    3bd8:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3bda:	90 91 a0 01 	lds	r25, 0x01A0
    3bde:	99 23       	and	r25, r25
    3be0:	61 f0       	breq	.+24     	; 0x3bfa <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3be2:	e0 91 10 01 	lds	r30, 0x0110
    3be6:	f0 91 11 01 	lds	r31, 0x0111
    3bea:	80 81       	ld	r24, Z
    3bec:	89 2b       	or	r24, r25
    3bee:	80 83       	st	Z, r24
        if (has_anykey()) {
    3bf0:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <has_anykey>
    3bf4:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3bf6:	10 92 a0 01 	sts	0x01A0, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3bfa:	80 91 10 01 	lds	r24, 0x0110
    3bfe:	90 91 11 01 	lds	r25, 0x0111
    3c02:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <host_keyboard_send>

00003c06 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3c06:	8b 3b       	cpi	r24, 0xBB	; 187
    3c08:	60 f4       	brcc	.+24     	; 0x3c22 <keycode_to_action+0x1c>
    3c0a:	88 3a       	cpi	r24, 0xA8	; 168
    3c0c:	00 f5       	brcc	.+64     	; 0x3c4e <keycode_to_action+0x48>
    3c0e:	85 3a       	cpi	r24, 0xA5	; 165
    3c10:	a8 f4       	brcc	.+42     	; 0x3c3c <keycode_to_action+0x36>
    3c12:	84 30       	cpi	r24, 0x04	; 4
    3c14:	88 f4       	brcc	.+34     	; 0x3c38 <keycode_to_action+0x32>
    3c16:	81 30       	cpi	r24, 0x01	; 1
    3c18:	09 f0       	breq	.+2      	; 0x3c1c <keycode_to_action+0x16>
    3c1a:	55 c0       	rjmp	.+170    	; 0x3cc6 <keycode_to_action+0xc0>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3c22:	80 3e       	cpi	r24, 0xE0	; 224
    3c24:	08 f4       	brcc	.+2      	; 0x3c28 <keycode_to_action+0x22>
    3c26:	4f c0       	rjmp	.+158    	; 0x3cc6 <keycode_to_action+0xc0>
    3c28:	88 3e       	cpi	r24, 0xE8	; 232
    3c2a:	30 f0       	brcs	.+12     	; 0x3c38 <keycode_to_action+0x32>
    3c2c:	80 3f       	cpi	r24, 0xF0	; 240
    3c2e:	08 f4       	brcc	.+2      	; 0x3c32 <keycode_to_action+0x2c>
    3c30:	4a c0       	rjmp	.+148    	; 0x3cc6 <keycode_to_action+0xc0>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	90 65       	ori	r25, 0x50	; 80
            break;
    3c36:	08 95       	ret
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3c38:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3c3a:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c3c:	85 3a       	cpi	r24, 0xA5	; 165
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <keycode_to_action+0x3c>
    3c40:	45 c0       	rjmp	.+138    	; 0x3ccc <keycode_to_action+0xc6>
    3c42:	86 3a       	cpi	r24, 0xA6	; 166
    3c44:	09 f0       	breq	.+2      	; 0x3c48 <keycode_to_action+0x42>
    3c46:	45 c0       	rjmp	.+138    	; 0x3cd2 <keycode_to_action+0xcc>
    3c48:	82 e8       	ldi	r24, 0x82	; 130
    3c4a:	90 e4       	ldi	r25, 0x40	; 64
    3c4c:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c4e:	88 3a       	cpi	r24, 0xA8	; 168
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <keycode_to_action+0x4e>
    3c52:	42 c0       	rjmp	.+132    	; 0x3cd8 <keycode_to_action+0xd2>
    3c54:	89 3a       	cpi	r24, 0xA9	; 169
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <keycode_to_action+0x54>
    3c58:	42 c0       	rjmp	.+132    	; 0x3cde <keycode_to_action+0xd8>
    3c5a:	8a 3a       	cpi	r24, 0xAA	; 170
    3c5c:	09 f4       	brne	.+2      	; 0x3c60 <keycode_to_action+0x5a>
    3c5e:	42 c0       	rjmp	.+132    	; 0x3ce4 <keycode_to_action+0xde>
    3c60:	8b 3a       	cpi	r24, 0xAB	; 171
    3c62:	09 f4       	brne	.+2      	; 0x3c66 <keycode_to_action+0x60>
    3c64:	42 c0       	rjmp	.+132    	; 0x3cea <keycode_to_action+0xe4>
    3c66:	8c 3a       	cpi	r24, 0xAC	; 172
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <keycode_to_action+0x66>
    3c6a:	42 c0       	rjmp	.+132    	; 0x3cf0 <keycode_to_action+0xea>
    3c6c:	8d 3a       	cpi	r24, 0xAD	; 173
    3c6e:	09 f4       	brne	.+2      	; 0x3c72 <keycode_to_action+0x6c>
    3c70:	42 c0       	rjmp	.+132    	; 0x3cf6 <keycode_to_action+0xf0>
    3c72:	80 3b       	cpi	r24, 0xB0	; 176
    3c74:	09 f4       	brne	.+2      	; 0x3c78 <keycode_to_action+0x72>
    3c76:	42 c0       	rjmp	.+132    	; 0x3cfc <keycode_to_action+0xf6>
    3c78:	8e 3a       	cpi	r24, 0xAE	; 174
    3c7a:	09 f4       	brne	.+2      	; 0x3c7e <keycode_to_action+0x78>
    3c7c:	42 c0       	rjmp	.+132    	; 0x3d02 <keycode_to_action+0xfc>
    3c7e:	8f 3a       	cpi	r24, 0xAF	; 175
    3c80:	09 f4       	brne	.+2      	; 0x3c84 <keycode_to_action+0x7e>
    3c82:	42 c0       	rjmp	.+132    	; 0x3d08 <keycode_to_action+0x102>
    3c84:	81 3b       	cpi	r24, 0xB1	; 177
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <keycode_to_action+0x84>
    3c88:	42 c0       	rjmp	.+132    	; 0x3d0e <keycode_to_action+0x108>
    3c8a:	82 3b       	cpi	r24, 0xB2	; 178
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <keycode_to_action+0x8a>
    3c8e:	42 c0       	rjmp	.+132    	; 0x3d14 <keycode_to_action+0x10e>
    3c90:	83 3b       	cpi	r24, 0xB3	; 179
    3c92:	09 f4       	brne	.+2      	; 0x3c96 <keycode_to_action+0x90>
    3c94:	42 c0       	rjmp	.+132    	; 0x3d1a <keycode_to_action+0x114>
    3c96:	84 3b       	cpi	r24, 0xB4	; 180
    3c98:	09 f4       	brne	.+2      	; 0x3c9c <keycode_to_action+0x96>
    3c9a:	42 c0       	rjmp	.+132    	; 0x3d20 <keycode_to_action+0x11a>
    3c9c:	85 3b       	cpi	r24, 0xB5	; 181
    3c9e:	09 f4       	brne	.+2      	; 0x3ca2 <keycode_to_action+0x9c>
    3ca0:	42 c0       	rjmp	.+132    	; 0x3d26 <keycode_to_action+0x120>
    3ca2:	86 3b       	cpi	r24, 0xB6	; 182
    3ca4:	09 f4       	brne	.+2      	; 0x3ca8 <keycode_to_action+0xa2>
    3ca6:	42 c0       	rjmp	.+132    	; 0x3d2c <keycode_to_action+0x126>
    3ca8:	87 3b       	cpi	r24, 0xB7	; 183
    3caa:	09 f4       	brne	.+2      	; 0x3cae <keycode_to_action+0xa8>
    3cac:	42 c0       	rjmp	.+132    	; 0x3d32 <keycode_to_action+0x12c>
    3cae:	88 3b       	cpi	r24, 0xB8	; 184
    3cb0:	09 f4       	brne	.+2      	; 0x3cb4 <keycode_to_action+0xae>
    3cb2:	42 c0       	rjmp	.+132    	; 0x3d38 <keycode_to_action+0x132>
    3cb4:	89 3b       	cpi	r24, 0xB9	; 185
    3cb6:	09 f4       	brne	.+2      	; 0x3cba <keycode_to_action+0xb4>
    3cb8:	42 c0       	rjmp	.+132    	; 0x3d3e <keycode_to_action+0x138>
    3cba:	8a 3b       	cpi	r24, 0xBA	; 186
    3cbc:	09 f0       	breq	.+2      	; 0x3cc0 <keycode_to_action+0xba>
    3cbe:	42 c0       	rjmp	.+132    	; 0x3d44 <keycode_to_action+0x13e>
    3cc0:	8a e2       	ldi	r24, 0x2A	; 42
    3cc2:	96 e4       	ldi	r25, 0x46	; 70
    3cc4:	08 95       	ret
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3ccc:	81 e8       	ldi	r24, 0x81	; 129
    3cce:	90 e4       	ldi	r25, 0x40	; 64
    3cd0:	08 95       	ret
    3cd2:	83 e8       	ldi	r24, 0x83	; 131
    3cd4:	90 e4       	ldi	r25, 0x40	; 64
    3cd6:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3cd8:	82 ee       	ldi	r24, 0xE2	; 226
    3cda:	94 e4       	ldi	r25, 0x44	; 68
    3cdc:	08 95       	ret
    3cde:	89 ee       	ldi	r24, 0xE9	; 233
    3ce0:	94 e4       	ldi	r25, 0x44	; 68
    3ce2:	08 95       	ret
    3ce4:	8a ee       	ldi	r24, 0xEA	; 234
    3ce6:	94 e4       	ldi	r25, 0x44	; 68
    3ce8:	08 95       	ret
    3cea:	85 eb       	ldi	r24, 0xB5	; 181
    3cec:	94 e4       	ldi	r25, 0x44	; 68
    3cee:	08 95       	ret
    3cf0:	86 eb       	ldi	r24, 0xB6	; 182
    3cf2:	94 e4       	ldi	r25, 0x44	; 68
    3cf4:	08 95       	ret
    3cf6:	87 eb       	ldi	r24, 0xB7	; 183
    3cf8:	94 e4       	ldi	r25, 0x44	; 68
    3cfa:	08 95       	ret
    3cfc:	8c ec       	ldi	r24, 0xCC	; 204
    3cfe:	94 e4       	ldi	r25, 0x44	; 68
    3d00:	08 95       	ret
    3d02:	8d ec       	ldi	r24, 0xCD	; 205
    3d04:	94 e4       	ldi	r25, 0x44	; 68
    3d06:	08 95       	ret
    3d08:	83 e8       	ldi	r24, 0x83	; 131
    3d0a:	95 e4       	ldi	r25, 0x45	; 69
    3d0c:	08 95       	ret
    3d0e:	8a e8       	ldi	r24, 0x8A	; 138
    3d10:	95 e4       	ldi	r25, 0x45	; 69
    3d12:	08 95       	ret
    3d14:	82 e9       	ldi	r24, 0x92	; 146
    3d16:	95 e4       	ldi	r25, 0x45	; 69
    3d18:	08 95       	ret
    3d1a:	84 e9       	ldi	r24, 0x94	; 148
    3d1c:	95 e4       	ldi	r25, 0x45	; 69
    3d1e:	08 95       	ret
    3d20:	81 e2       	ldi	r24, 0x21	; 33
    3d22:	96 e4       	ldi	r25, 0x46	; 70
    3d24:	08 95       	ret
    3d26:	83 e2       	ldi	r24, 0x23	; 35
    3d28:	96 e4       	ldi	r25, 0x46	; 70
    3d2a:	08 95       	ret
    3d2c:	84 e2       	ldi	r24, 0x24	; 36
    3d2e:	96 e4       	ldi	r25, 0x46	; 70
    3d30:	08 95       	ret
    3d32:	85 e2       	ldi	r24, 0x25	; 37
    3d34:	96 e4       	ldi	r25, 0x46	; 70
    3d36:	08 95       	ret
    3d38:	86 e2       	ldi	r24, 0x26	; 38
    3d3a:	96 e4       	ldi	r25, 0x46	; 70
    3d3c:	08 95       	ret
    3d3e:	87 e2       	ldi	r24, 0x27	; 39
    3d40:	96 e4       	ldi	r25, 0x46	; 70
    3d42:	08 95       	ret
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3d48:	08 95       	ret

00003d4a <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d4a:	0e 94 0e 0a 	call	0x141c	; 0x141c <keymap_key_to_keycode>
    switch (keycode) {
    3d4e:	80 3e       	cpi	r24, 0xE0	; 224
    3d50:	a8 f4       	brcc	.+42     	; 0x3d7c <action_for_key+0x32>
    3d52:	80 3c       	cpi	r24, 0xC0	; 192
    3d54:	00 f5       	brcc	.+64     	; 0x3d96 <action_for_key+0x4c>
    3d56:	81 33       	cpi	r24, 0x31	; 49
    3d58:	09 f4       	brne	.+2      	; 0x3d5c <action_for_key+0x12>
    3d5a:	5c c0       	rjmp	.+184    	; 0x3e14 <action_for_key+0xca>
    3d5c:	38 f4       	brcc	.+14     	; 0x3d6c <action_for_key+0x22>
    3d5e:	89 32       	cpi	r24, 0x29	; 41
    3d60:	09 f4       	brne	.+2      	; 0x3d64 <action_for_key+0x1a>
    3d62:	52 c0       	rjmp	.+164    	; 0x3e08 <action_for_key+0xbe>
    3d64:	8a 32       	cpi	r24, 0x2A	; 42
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <action_for_key+0x20>
    3d68:	5b c0       	rjmp	.+182    	; 0x3e20 <action_for_key+0xd6>
    3d6a:	5f c0       	rjmp	.+190    	; 0x3e2a <action_for_key+0xe0>
    3d6c:	89 33       	cpi	r24, 0x39	; 57
    3d6e:	b1 f0       	breq	.+44     	; 0x3d9c <action_for_key+0x52>
    3d70:	82 38       	cpi	r24, 0x82	; 130
    3d72:	a1 f0       	breq	.+40     	; 0x3d9c <action_for_key+0x52>
    3d74:	85 33       	cpi	r24, 0x35	; 53
    3d76:	09 f4       	brne	.+2      	; 0x3d7a <action_for_key+0x30>
    3d78:	41 c0       	rjmp	.+130    	; 0x3dfc <action_for_key+0xb2>
    3d7a:	57 c0       	rjmp	.+174    	; 0x3e2a <action_for_key+0xe0>
    3d7c:	83 3e       	cpi	r24, 0xE3	; 227
    3d7e:	41 f1       	breq	.+80     	; 0x3dd0 <action_for_key+0x86>
    3d80:	28 f4       	brcc	.+10     	; 0x3d8c <action_for_key+0x42>
    3d82:	80 3e       	cpi	r24, 0xE0	; 224
    3d84:	99 f0       	breq	.+38     	; 0x3dac <action_for_key+0x62>
    3d86:	82 3e       	cpi	r24, 0xE2	; 226
    3d88:	b9 f0       	breq	.+46     	; 0x3db8 <action_for_key+0x6e>
    3d8a:	4f c0       	rjmp	.+158    	; 0x3e2a <action_for_key+0xe0>
    3d8c:	86 3e       	cpi	r24, 0xE6	; 230
    3d8e:	31 f1       	breq	.+76     	; 0x3ddc <action_for_key+0x92>
    3d90:	87 3e       	cpi	r24, 0xE7	; 231
    3d92:	71 f1       	breq	.+92     	; 0x3df0 <action_for_key+0xa6>
    3d94:	4a c0       	rjmp	.+148    	; 0x3e2a <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3d96:	0e 94 2b 0a 	call	0x1456	; 0x1456 <keymap_fn_to_action>
    3d9a:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3d9c:	90 91 ca 01 	lds	r25, 0x01CA
    3da0:	90 fd       	sbrc	r25, 0
    3da2:	02 c0       	rjmp	.+4      	; 0x3da8 <action_for_key+0x5e>
    3da4:	91 ff       	sbrs	r25, 1
    3da6:	41 c0       	rjmp	.+130    	; 0x3e2a <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3da8:	80 ee       	ldi	r24, 0xE0	; 224
    3daa:	3f c0       	rjmp	.+126    	; 0x3e2a <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3dac:	80 91 ca 01 	lds	r24, 0x01CA
    3db0:	80 ff       	sbrs	r24, 0
    3db2:	fa cf       	rjmp	.-12     	; 0x3da8 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3db4:	89 e3       	ldi	r24, 0x39	; 57
    3db6:	39 c0       	rjmp	.+114    	; 0x3e2a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3db8:	80 91 ca 01 	lds	r24, 0x01CA
    3dbc:	82 ff       	sbrs	r24, 2
    3dbe:	0c c0       	rjmp	.+24     	; 0x3dd8 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3dc0:	80 91 ca 01 	lds	r24, 0x01CA
    3dc4:	84 ff       	sbrs	r24, 4
    3dc6:	02 c0       	rjmp	.+4      	; 0x3dcc <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	2f c0       	rjmp	.+94     	; 0x3e2a <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3dcc:	83 ee       	ldi	r24, 0xE3	; 227
    3dce:	2d c0       	rjmp	.+90     	; 0x3e2a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3dd0:	80 91 ca 01 	lds	r24, 0x01CA
    3dd4:	82 ff       	sbrs	r24, 2
    3dd6:	f4 cf       	rjmp	.-24     	; 0x3dc0 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3dd8:	82 ee       	ldi	r24, 0xE2	; 226
    3dda:	27 c0       	rjmp	.+78     	; 0x3e2a <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3ddc:	80 91 ca 01 	lds	r24, 0x01CA
    3de0:	83 ff       	sbrs	r24, 3
    3de2:	0a c0       	rjmp	.+20     	; 0x3df8 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3de4:	80 91 ca 01 	lds	r24, 0x01CA
    3de8:	84 fd       	sbrc	r24, 4
    3dea:	ee cf       	rjmp	.-36     	; 0x3dc8 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3dec:	87 ee       	ldi	r24, 0xE7	; 231
    3dee:	1d c0       	rjmp	.+58     	; 0x3e2a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3df0:	80 91 ca 01 	lds	r24, 0x01CA
    3df4:	83 ff       	sbrs	r24, 3
    3df6:	f6 cf       	rjmp	.-20     	; 0x3de4 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3df8:	86 ee       	ldi	r24, 0xE6	; 230
    3dfa:	17 c0       	rjmp	.+46     	; 0x3e2a <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3dfc:	80 91 ca 01 	lds	r24, 0x01CA
    3e00:	85 ff       	sbrs	r24, 5
    3e02:	06 c0       	rjmp	.+12     	; 0x3e10 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3e04:	89 e2       	ldi	r24, 0x29	; 41
    3e06:	11 c0       	rjmp	.+34     	; 0x3e2a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3e08:	80 91 ca 01 	lds	r24, 0x01CA
    3e0c:	85 ff       	sbrs	r24, 5
    3e0e:	fa cf       	rjmp	.-12     	; 0x3e04 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3e10:	85 e3       	ldi	r24, 0x35	; 53
    3e12:	0b c0       	rjmp	.+22     	; 0x3e2a <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3e14:	80 91 ca 01 	lds	r24, 0x01CA
    3e18:	86 ff       	sbrs	r24, 6
    3e1a:	06 c0       	rjmp	.+12     	; 0x3e28 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3e1c:	8a e2       	ldi	r24, 0x2A	; 42
    3e1e:	05 c0       	rjmp	.+10     	; 0x3e2a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3e20:	80 91 ca 01 	lds	r24, 0x01CA
    3e24:	86 ff       	sbrs	r24, 6
    3e26:	fa cf       	rjmp	.-12     	; 0x3e1c <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3e28:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3e2a:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <keycode_to_action>
    }
}
    3e2e:	08 95       	ret

00003e30 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	08 95       	ret

00003e36 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3e36:	90 93 b6 01 	sts	0x01B6, r25
    3e3a:	80 93 b5 01 	sts	0x01B5, r24
    3e3e:	08 95       	ret

00003e40 <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    3e40:	cf 92       	push	r12
    3e42:	df 92       	push	r13
    3e44:	ef 92       	push	r14
    3e46:	ff 92       	push	r15
    3e48:	0f 93       	push	r16
    3e4a:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    3e4c:	6c 01       	movw	r12, r24
    3e4e:	ee 24       	eor	r14, r14
    3e50:	ff 24       	eor	r15, r15
    3e52:	c1 14       	cp	r12, r1
    3e54:	d1 04       	cpc	r13, r1
    3e56:	e1 04       	cpc	r14, r1
    3e58:	f1 04       	cpc	r15, r1
    3e5a:	21 f4       	brne	.+8      	; 0x3e64 <biton32+0x24>
    3e5c:	6b 01       	movw	r12, r22
    3e5e:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	01 c0       	rjmp	.+2      	; 0x3e66 <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    3e64:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    3e66:	33 27       	eor	r19, r19
    3e68:	2f 2d       	mov	r18, r15
    3e6a:	1e 2d       	mov	r17, r14
    3e6c:	0d 2d       	mov	r16, r13
    3e6e:	01 15       	cp	r16, r1
    3e70:	11 05       	cpc	r17, r1
    3e72:	21 05       	cpc	r18, r1
    3e74:	31 05       	cpc	r19, r1
    3e76:	19 f0       	breq	.+6      	; 0x3e7e <biton32+0x3e>
    3e78:	88 5f       	subi	r24, 0xF8	; 248
    3e7a:	68 01       	movw	r12, r16
    3e7c:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    3e7e:	97 01       	movw	r18, r14
    3e80:	86 01       	movw	r16, r12
    3e82:	a4 e0       	ldi	r26, 0x04	; 4
    3e84:	36 95       	lsr	r19
    3e86:	27 95       	ror	r18
    3e88:	17 95       	ror	r17
    3e8a:	07 95       	ror	r16
    3e8c:	aa 95       	dec	r26
    3e8e:	d1 f7       	brne	.-12     	; 0x3e84 <biton32+0x44>
    3e90:	01 15       	cp	r16, r1
    3e92:	11 05       	cpc	r17, r1
    3e94:	21 05       	cpc	r18, r1
    3e96:	31 05       	cpc	r19, r1
    3e98:	19 f0       	breq	.+6      	; 0x3ea0 <biton32+0x60>
    3e9a:	8c 5f       	subi	r24, 0xFC	; 252
    3e9c:	68 01       	movw	r12, r16
    3e9e:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    3ea0:	97 01       	movw	r18, r14
    3ea2:	86 01       	movw	r16, r12
    3ea4:	f2 e0       	ldi	r31, 0x02	; 2
    3ea6:	36 95       	lsr	r19
    3ea8:	27 95       	ror	r18
    3eaa:	17 95       	ror	r17
    3eac:	07 95       	ror	r16
    3eae:	fa 95       	dec	r31
    3eb0:	d1 f7       	brne	.-12     	; 0x3ea6 <biton32+0x66>
    3eb2:	01 15       	cp	r16, r1
    3eb4:	11 05       	cpc	r17, r1
    3eb6:	21 05       	cpc	r18, r1
    3eb8:	31 05       	cpc	r19, r1
    3eba:	19 f0       	breq	.+6      	; 0x3ec2 <biton32+0x82>
    3ebc:	8e 5f       	subi	r24, 0xFE	; 254
    3ebe:	68 01       	movw	r12, r16
    3ec0:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    3ec2:	b7 01       	movw	r22, r14
    3ec4:	a6 01       	movw	r20, r12
    3ec6:	76 95       	lsr	r23
    3ec8:	67 95       	ror	r22
    3eca:	57 95       	ror	r21
    3ecc:	47 95       	ror	r20
    3ece:	45 2b       	or	r20, r21
    3ed0:	46 2b       	or	r20, r22
    3ed2:	47 2b       	or	r20, r23
    3ed4:	09 f0       	breq	.+2      	; 0x3ed8 <biton32+0x98>
    3ed6:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    3ed8:	1f 91       	pop	r17
    3eda:	0f 91       	pop	r16
    3edc:	ff 90       	pop	r15
    3ede:	ef 90       	pop	r14
    3ee0:	df 90       	pop	r13
    3ee2:	cf 90       	pop	r12
    3ee4:	08 95       	ret

00003ee6 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3ee6:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3ee8:	98 2f       	mov	r25, r24
    3eea:	9c 7c       	andi	r25, 0xCC	; 204
    3eec:	96 95       	lsr	r25
    3eee:	96 95       	lsr	r25
    3ef0:	83 73       	andi	r24, 0x33	; 51
    3ef2:	44 e0       	ldi	r20, 0x04	; 4
    3ef4:	84 9f       	mul	r24, r20
    3ef6:	90 01       	movw	r18, r0
    3ef8:	11 24       	eor	r1, r1
    3efa:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3efc:	89 2f       	mov	r24, r25
    3efe:	8a 7a       	andi	r24, 0xAA	; 170
    3f00:	86 95       	lsr	r24
    3f02:	95 75       	andi	r25, 0x55	; 85
    3f04:	99 0f       	add	r25, r25
    return bits;
}
    3f06:	89 2b       	or	r24, r25
    3f08:	08 95       	ret

00003f0a <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3f0a:	1f 93       	push	r17
    3f0c:	cf 93       	push	r28
    3f0e:	df 93       	push	r29
    3f10:	1f 92       	push	r1
    3f12:	cd b7       	in	r28, 0x3d	; 61
    3f14:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3f16:	99 83       	std	Y+1, r25	; 0x01
    3f18:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <bitrev>
    3f1c:	18 2f       	mov	r17, r24
    3f1e:	99 81       	ldd	r25, Y+1	; 0x01
    3f20:	89 2f       	mov	r24, r25
    3f22:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <bitrev>
    3f26:	21 2f       	mov	r18, r17
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	32 2f       	mov	r19, r18
    3f2c:	22 27       	eor	r18, r18
    return bits;
}
    3f2e:	a9 01       	movw	r20, r18
    3f30:	48 2b       	or	r20, r24
    3f32:	ca 01       	movw	r24, r20
    3f34:	0f 90       	pop	r0
    3f36:	df 91       	pop	r29
    3f38:	cf 91       	pop	r28
    3f3a:	1f 91       	pop	r17
    3f3c:	08 95       	ret

00003f3e <suspend_power_down>:
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
#endif
    wdt_timeout = wdto;
    3f3e:	10 92 b4 01 	sts	0x01B4, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3f42:	20 e4       	ldi	r18, 0x40	; 64
    3f44:	88 e1       	ldi	r24, 0x18	; 24
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	0f b6       	in	r0, 0x3f	; 63
    3f4a:	f8 94       	cli
    3f4c:	a8 95       	wdr
    3f4e:	80 93 60 00 	sts	0x0060, r24
    3f52:	0f be       	out	0x3f, r0	; 63
    3f54:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3f58:	83 b7       	in	r24, 0x33	; 51
    3f5a:	81 7f       	andi	r24, 0xF1	; 241
    3f5c:	84 60       	ori	r24, 0x04	; 4
    3f5e:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3f60:	83 b7       	in	r24, 0x33	; 51
    3f62:	81 60       	ori	r24, 0x01	; 1
    3f64:	83 bf       	out	0x33, r24	; 51
    sei();
    3f66:	78 94       	sei
    sleep_cpu();
    3f68:	88 95       	sleep
    sleep_disable();
    3f6a:	83 b7       	in	r24, 0x33	; 51
    3f6c:	8e 7f       	andi	r24, 0xFE	; 254
    3f6e:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3f70:	88 e1       	ldi	r24, 0x18	; 24
    3f72:	0f b6       	in	r0, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	80 93 60 00 	sts	0x0060, r24
    3f7a:	10 92 60 00 	sts	0x0060, r1
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	08 95       	ret

00003f82 <suspend_wakeup_condition>:
{
    power_down(WDTO_15MS);
}

bool suspend_wakeup_condition(void)
{
    3f82:	cf 93       	push	r28
    matrix_power_up();
    3f84:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <matrix_power_up>
    matrix_scan();
    3f88:	0e 94 84 0a 	call	0x1508	; 0x1508 <matrix_scan>
    matrix_power_down();
    3f8c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f90:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3f92:	8c 2f       	mov	r24, r28
    3f94:	0e 94 af 0b 	call	0x175e	; 0x175e <matrix_get_row>
    3f98:	81 11       	cpse	r24, r1
    3f9a:	05 c0       	rjmp	.+10     	; 0x3fa6 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f9c:	cf 5f       	subi	r28, 0xFF	; 255
    3f9e:	ce 30       	cpi	r28, 0x0E	; 14
    3fa0:	c1 f7       	brne	.-16     	; 0x3f92 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	01 c0       	rjmp	.+2      	; 0x3fa8 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3fa8:	cf 91       	pop	r28
    3faa:	08 95       	ret

00003fac <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3fac:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <clear_keyboard>

00003fb0 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3fb0:	82 e0       	ldi	r24, 0x02	; 2
    3fb2:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3fb4:	93 e0       	ldi	r25, 0x03	; 3
    3fb6:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3fb8:	9a ef       	ldi	r25, 0xFA	; 250
    3fba:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3fbc:	80 93 6e 00 	sts	0x006E, r24
    3fc0:	08 95       	ret

00003fc2 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3fc2:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3fc4:	f8 94       	cli
    t = timer_count;
    3fc6:	80 91 b7 01 	lds	r24, 0x01B7
    3fca:	90 91 b8 01 	lds	r25, 0x01B8
    3fce:	a0 91 b9 01 	lds	r26, 0x01B9
    3fd2:	b0 91 ba 01 	lds	r27, 0x01BA
    SREG = sreg;
    3fd6:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3fd8:	08 95       	ret

00003fda <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    3fda:	cf 92       	push	r12
    3fdc:	df 92       	push	r13
    3fde:	ef 92       	push	r14
    3fe0:	ff 92       	push	r15
    3fe2:	0f 93       	push	r16
    3fe4:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3fe6:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3fe8:	f8 94       	cli
    t = timer_count;
    3fea:	40 91 b7 01 	lds	r20, 0x01B7
    3fee:	50 91 b8 01 	lds	r21, 0x01B8
    3ff2:	60 91 b9 01 	lds	r22, 0x01B9
    3ff6:	70 91 ba 01 	lds	r23, 0x01BA
    SREG = sreg;
    3ffa:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3ffc:	6a 01       	movw	r12, r20
    3ffe:	7b 01       	movw	r14, r22
    4000:	ee 24       	eor	r14, r14
    4002:	ff 24       	eor	r15, r15
    4004:	8c 01       	movw	r16, r24
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	c0 16       	cp	r12, r16
    400c:	d1 06       	cpc	r13, r17
    400e:	e2 06       	cpc	r14, r18
    4010:	f3 06       	cpc	r15, r19
    4012:	10 f4       	brcc	.+4      	; 0x4018 <timer_elapsed+0x3e>
    4014:	41 50       	subi	r20, 0x01	; 1
    4016:	51 09       	sbc	r21, r1
    4018:	48 1b       	sub	r20, r24
    401a:	59 0b       	sbc	r21, r25
}
    401c:	ca 01       	movw	r24, r20
    401e:	1f 91       	pop	r17
    4020:	0f 91       	pop	r16
    4022:	ff 90       	pop	r15
    4024:	ef 90       	pop	r14
    4026:	df 90       	pop	r13
    4028:	cf 90       	pop	r12
    402a:	08 95       	ret

0000402c <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    402c:	1f 92       	push	r1
    402e:	0f 92       	push	r0
    4030:	0f b6       	in	r0, 0x3f	; 63
    4032:	0f 92       	push	r0
    4034:	11 24       	eor	r1, r1
    4036:	8f 93       	push	r24
    4038:	9f 93       	push	r25
    403a:	af 93       	push	r26
    403c:	bf 93       	push	r27
    timer_count++;
    403e:	80 91 b7 01 	lds	r24, 0x01B7
    4042:	90 91 b8 01 	lds	r25, 0x01B8
    4046:	a0 91 b9 01 	lds	r26, 0x01B9
    404a:	b0 91 ba 01 	lds	r27, 0x01BA
    404e:	01 96       	adiw	r24, 0x01	; 1
    4050:	a1 1d       	adc	r26, r1
    4052:	b1 1d       	adc	r27, r1
    4054:	80 93 b7 01 	sts	0x01B7, r24
    4058:	90 93 b8 01 	sts	0x01B8, r25
    405c:	a0 93 b9 01 	sts	0x01B9, r26
    4060:	b0 93 ba 01 	sts	0x01BA, r27
}
    4064:	bf 91       	pop	r27
    4066:	af 91       	pop	r26
    4068:	9f 91       	pop	r25
    406a:	8f 91       	pop	r24
    406c:	0f 90       	pop	r0
    406e:	0f be       	out	0x3f, r0	; 63
    4070:	0f 90       	pop	r0
    4072:	1f 90       	pop	r1
    4074:	18 95       	reti

00004076 <bootloader_jump>:
    cli();
    _delay_ms(2000);
#endif

#ifdef PROTOCOL_PJRC
    cli();
    4076:	f8 94       	cli
    UDCON = 1;
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	80 93 e0 00 	sts	0x00E0, r24
    USBCON = (1<<FRZCLK);
    407e:	80 e2       	ldi	r24, 0x20	; 32
    4080:	80 93 d8 00 	sts	0x00D8, r24
    UCSR1B = 0;
    4084:	10 92 c9 00 	sts	0x00C9, r1
    4088:	8f e1       	ldi	r24, 0x1F	; 31
    408a:	9e e4       	ldi	r25, 0x4E	; 78
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	f1 f7       	brne	.-4      	; 0x408c <bootloader_jump+0x16>
    4090:	00 c0       	rjmp	.+0      	; 0x4092 <bootloader_jump+0x1c>
    4092:	00 00       	nop
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    4094:	87 e0       	ldi	r24, 0x07	; 7
    4096:	90 eb       	ldi	r25, 0xB0	; 176
    4098:	dc 01       	movw	r26, r24
    409a:	80 93 cb 01 	sts	0x01CB, r24
    409e:	90 93 cc 01 	sts	0x01CC, r25
    40a2:	a0 93 cd 01 	sts	0x01CD, r26
    40a6:	b0 93 ce 01 	sts	0x01CE, r27
    wdt_enable(WDTO_250MS);
    40aa:	2c e0       	ldi	r18, 0x0C	; 12
    40ac:	88 e1       	ldi	r24, 0x18	; 24
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	0f b6       	in	r0, 0x3f	; 63
    40b2:	f8 94       	cli
    40b4:	a8 95       	wdr
    40b6:	80 93 60 00 	sts	0x0060, r24
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	20 93 60 00 	sts	0x0060, r18
    40c0:	ff cf       	rjmp	.-2      	; 0x40c0 <bootloader_jump+0x4a>

000040c2 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    40c2:	ef 92       	push	r14
    40c4:	ff 92       	push	r15
    40c6:	0f 93       	push	r16
    40c8:	1f 93       	push	r17
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	e8 2e       	mov	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    40d0:	f1 2c       	mov	r15, r1
        matrix_row_t matrix_row = matrix_get_row(r);
    40d2:	8f 2d       	mov	r24, r15
    40d4:	0e 94 af 0b 	call	0x175e	; 0x175e <matrix_get_row>
    40d8:	c0 e0       	ldi	r28, 0x00	; 0
    40da:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    40dc:	08 2f       	mov	r16, r24
    40de:	10 e0       	ldi	r17, 0x00	; 0
    40e0:	98 01       	movw	r18, r16
    40e2:	0c 2e       	mov	r0, r28
    40e4:	02 c0       	rjmp	.+4      	; 0x40ea <scan_keycode+0x28>
    40e6:	35 95       	asr	r19
    40e8:	27 95       	ror	r18
    40ea:	0a 94       	dec	r0
    40ec:	e2 f7       	brpl	.-8      	; 0x40e6 <scan_keycode+0x24>
    40ee:	20 fd       	sbrc	r18, 0
    40f0:	05 c0       	rjmp	.+10     	; 0x40fc <scan_keycode+0x3a>
    40f2:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    40f4:	c6 30       	cpi	r28, 0x06	; 6
    40f6:	d1 05       	cpc	r29, r1
    40f8:	99 f7       	brne	.-26     	; 0x40e0 <scan_keycode+0x1e>
    40fa:	09 c0       	rjmp	.+18     	; 0x410e <scan_keycode+0x4c>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    40fc:	6c 2f       	mov	r22, r28
    40fe:	7f 2d       	mov	r23, r15
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	0e 94 0e 0a 	call	0x141c	; 0x141c <keymap_key_to_keycode>
    4106:	e8 12       	cpse	r14, r24
    4108:	f4 cf       	rjmp	.-24     	; 0x40f2 <scan_keycode+0x30>
                    return true;
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	05 c0       	rjmp	.+10     	; 0x4118 <scan_keycode+0x56>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    410e:	f3 94       	inc	r15
    4110:	8e e0       	ldi	r24, 0x0E	; 14
    4112:	f8 12       	cpse	r15, r24
    4114:	de cf       	rjmp	.-68     	; 0x40d2 <scan_keycode+0x10>
                    return true;
                }
            }
        }
    }
    return false;
    4116:	80 e0       	ldi	r24, 0x00	; 0
}
    4118:	df 91       	pop	r29
    411a:	cf 91       	pop	r28
    411c:	1f 91       	pop	r17
    411e:	0f 91       	pop	r16
    4120:	ff 90       	pop	r15
    4122:	ef 90       	pop	r14
    4124:	08 95       	ret

00004126 <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    4126:	cf 93       	push	r28
    4128:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    412a:	8c e2       	ldi	r24, 0x2C	; 44
    412c:	0e 94 61 20 	call	0x40c2	; 0x40c2 <scan_keycode>
    4130:	88 23       	and	r24, r24
    4132:	21 f0       	breq	.+8      	; 0x413c <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    4134:	8c 2f       	mov	r24, r28
}
    4136:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    4138:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <scan_keycode>
}
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	cf 91       	pop	r28
    4140:	08 95       	ret

00004142 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    4142:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    4144:	0e 94 ee 21 	call	0x43dc	; 0x43dc <eeconfig_is_enabled>
    4148:	81 11       	cpse	r24, r1
    414a:	02 c0       	rjmp	.+4      	; 0x4150 <bootmagic+0xe>
        eeconfig_init();
    414c:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    4150:	80 e3       	ldi	r24, 0x30	; 48
    4152:	96 e0       	ldi	r25, 0x06	; 6
    4154:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    4158:	c5 e6       	ldi	r28, 0x65	; 101
    415a:	c1 50       	subi	r28, 0x01	; 1
    415c:	49 f0       	breq	.+18     	; 0x4170 <bootmagic+0x2e>
    415e:	0e 94 84 0a 	call	0x1508	; 0x1508 <matrix_scan>
    4162:	8f e3       	ldi	r24, 0x3F	; 63
    4164:	9c e9       	ldi	r25, 0x9C	; 156
    4166:	01 97       	sbiw	r24, 0x01	; 1
    4168:	f1 f7       	brne	.-4      	; 0x4166 <bootmagic+0x24>
    416a:	00 c0       	rjmp	.+0      	; 0x416c <bootmagic+0x2a>
    416c:	00 00       	nop
    416e:	f5 cf       	rjmp	.-22     	; 0x415a <bootmagic+0x18>
    print("done.\n");
    4170:	89 e2       	ldi	r24, 0x29	; 41
    4172:	96 e0       	ldi	r25, 0x06	; 6
    4174:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    4178:	89 e2       	ldi	r24, 0x29	; 41
    417a:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    417e:	81 11       	cpse	r24, r1
    4180:	11 c1       	rjmp	.+546    	; 0x43a4 <bootmagic+0x262>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4182:	8a e2       	ldi	r24, 0x2A	; 42
    4184:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4188:	81 11       	cpse	r24, r1
        eeconfig_init();
    418a:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    418e:	85 e0       	ldi	r24, 0x05	; 5
    4190:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4194:	81 11       	cpse	r24, r1
        bootloader_jump();
    4196:	0e 94 3b 20 	call	0x4076	; 0x4076 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    419a:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <eeconfig_read_debug>
    419e:	80 93 b3 01 	sts	0x01B3, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    41a2:	87 e0       	ldi	r24, 0x07	; 7
    41a4:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    41a8:	88 23       	and	r24, r24
    41aa:	99 f1       	breq	.+102    	; 0x4212 <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    41ac:	8b e1       	ldi	r24, 0x1B	; 27
    41ae:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    41b2:	88 23       	and	r24, r24
    41b4:	51 f0       	breq	.+20     	; 0x41ca <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    41b6:	90 91 b3 01 	lds	r25, 0x01B3
    41ba:	91 fb       	bst	r25, 1
    41bc:	88 27       	eor	r24, r24
    41be:	80 f9       	bld	r24, 0
    41c0:	21 e0       	ldi	r18, 0x01	; 1
    41c2:	82 27       	eor	r24, r18
    41c4:	80 fb       	bst	r24, 0
    41c6:	91 f9       	bld	r25, 1
    41c8:	22 c0       	rjmp	.+68     	; 0x420e <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    41ca:	8e e0       	ldi	r24, 0x0E	; 14
    41cc:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    41d0:	88 23       	and	r24, r24
    41d2:	51 f0       	breq	.+20     	; 0x41e8 <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    41d4:	90 91 b3 01 	lds	r25, 0x01B3
    41d8:	92 fb       	bst	r25, 2
    41da:	88 27       	eor	r24, r24
    41dc:	80 f9       	bld	r24, 0
    41de:	21 e0       	ldi	r18, 0x01	; 1
    41e0:	82 27       	eor	r24, r18
    41e2:	80 fb       	bst	r24, 0
    41e4:	92 f9       	bld	r25, 2
    41e6:	13 c0       	rjmp	.+38     	; 0x420e <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    41e8:	80 e1       	ldi	r24, 0x10	; 16
    41ea:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    41ee:	90 91 b3 01 	lds	r25, 0x01B3
    41f2:	88 23       	and	r24, r24
    41f4:	41 f0       	breq	.+16     	; 0x4206 <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    41f6:	93 fb       	bst	r25, 3
    41f8:	88 27       	eor	r24, r24
    41fa:	80 f9       	bld	r24, 0
    41fc:	21 e0       	ldi	r18, 0x01	; 1
    41fe:	82 27       	eor	r24, r18
    4200:	80 fb       	bst	r24, 0
    4202:	93 f9       	bld	r25, 3
    4204:	04 c0       	rjmp	.+8      	; 0x420e <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    4206:	89 2f       	mov	r24, r25
    4208:	80 95       	com	r24
    420a:	80 fb       	bst	r24, 0
    420c:	90 f9       	bld	r25, 0
    420e:	90 93 b3 01 	sts	0x01B3, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    4212:	80 91 b3 01 	lds	r24, 0x01B3
    4216:	0e 94 fd 21 	call	0x43fa	; 0x43fa <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    421a:	0e 94 0b 22 	call	0x4416	; 0x4416 <eeconfig_read_keymap>
    421e:	80 93 ca 01 	sts	0x01CA, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    4222:	80 ee       	ldi	r24, 0xE0	; 224
    4224:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4228:	88 23       	and	r24, r24
    422a:	41 f0       	breq	.+16     	; 0x423c <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    422c:	80 91 ca 01 	lds	r24, 0x01CA
    4230:	98 2f       	mov	r25, r24
    4232:	90 95       	com	r25
    4234:	90 fb       	bst	r25, 0
    4236:	80 f9       	bld	r24, 0
    4238:	80 93 ca 01 	sts	0x01CA, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    423c:	89 e3       	ldi	r24, 0x39	; 57
    423e:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4242:	88 23       	and	r24, r24
    4244:	59 f0       	breq	.+22     	; 0x425c <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4246:	90 91 ca 01 	lds	r25, 0x01CA
    424a:	91 fb       	bst	r25, 1
    424c:	88 27       	eor	r24, r24
    424e:	80 f9       	bld	r24, 0
    4250:	21 e0       	ldi	r18, 0x01	; 1
    4252:	82 27       	eor	r24, r18
    4254:	80 fb       	bst	r24, 0
    4256:	91 f9       	bld	r25, 1
    4258:	90 93 ca 01 	sts	0x01CA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    425c:	82 ee       	ldi	r24, 0xE2	; 226
    425e:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4262:	88 23       	and	r24, r24
    4264:	59 f0       	breq	.+22     	; 0x427c <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4266:	90 91 ca 01 	lds	r25, 0x01CA
    426a:	92 fb       	bst	r25, 2
    426c:	88 27       	eor	r24, r24
    426e:	80 f9       	bld	r24, 0
    4270:	21 e0       	ldi	r18, 0x01	; 1
    4272:	82 27       	eor	r24, r18
    4274:	80 fb       	bst	r24, 0
    4276:	92 f9       	bld	r25, 2
    4278:	90 93 ca 01 	sts	0x01CA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    427c:	86 ee       	ldi	r24, 0xE6	; 230
    427e:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4282:	88 23       	and	r24, r24
    4284:	59 f0       	breq	.+22     	; 0x429c <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4286:	90 91 ca 01 	lds	r25, 0x01CA
    428a:	93 fb       	bst	r25, 3
    428c:	88 27       	eor	r24, r24
    428e:	80 f9       	bld	r24, 0
    4290:	21 e0       	ldi	r18, 0x01	; 1
    4292:	82 27       	eor	r24, r18
    4294:	80 fb       	bst	r24, 0
    4296:	93 f9       	bld	r25, 3
    4298:	90 93 ca 01 	sts	0x01CA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    429c:	83 ee       	ldi	r24, 0xE3	; 227
    429e:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    42a2:	88 23       	and	r24, r24
    42a4:	59 f0       	breq	.+22     	; 0x42bc <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    42a6:	90 91 ca 01 	lds	r25, 0x01CA
    42aa:	94 fb       	bst	r25, 4
    42ac:	88 27       	eor	r24, r24
    42ae:	80 f9       	bld	r24, 0
    42b0:	21 e0       	ldi	r18, 0x01	; 1
    42b2:	82 27       	eor	r24, r18
    42b4:	80 fb       	bst	r24, 0
    42b6:	94 f9       	bld	r25, 4
    42b8:	90 93 ca 01 	sts	0x01CA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    42bc:	85 e3       	ldi	r24, 0x35	; 53
    42be:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    42c2:	88 23       	and	r24, r24
    42c4:	59 f0       	breq	.+22     	; 0x42dc <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    42c6:	90 91 ca 01 	lds	r25, 0x01CA
    42ca:	95 fb       	bst	r25, 5
    42cc:	88 27       	eor	r24, r24
    42ce:	80 f9       	bld	r24, 0
    42d0:	21 e0       	ldi	r18, 0x01	; 1
    42d2:	82 27       	eor	r24, r18
    42d4:	80 fb       	bst	r24, 0
    42d6:	95 f9       	bld	r25, 5
    42d8:	90 93 ca 01 	sts	0x01CA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    42dc:	81 e3       	ldi	r24, 0x31	; 49
    42de:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    42e2:	88 23       	and	r24, r24
    42e4:	59 f0       	breq	.+22     	; 0x42fc <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    42e6:	90 91 ca 01 	lds	r25, 0x01CA
    42ea:	96 fb       	bst	r25, 6
    42ec:	88 27       	eor	r24, r24
    42ee:	80 f9       	bld	r24, 0
    42f0:	21 e0       	ldi	r18, 0x01	; 1
    42f2:	82 27       	eor	r24, r18
    42f4:	80 fb       	bst	r24, 0
    42f6:	96 f9       	bld	r25, 6
    42f8:	90 93 ca 01 	sts	0x01CA, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    42fc:	81 e1       	ldi	r24, 0x11	; 17
    42fe:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4302:	88 23       	and	r24, r24
    4304:	59 f0       	breq	.+22     	; 0x431c <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    4306:	90 91 ca 01 	lds	r25, 0x01CA
    430a:	97 fb       	bst	r25, 7
    430c:	88 27       	eor	r24, r24
    430e:	80 f9       	bld	r24, 0
    4310:	21 e0       	ldi	r18, 0x01	; 1
    4312:	82 27       	eor	r24, r18
    4314:	80 fb       	bst	r24, 0
    4316:	97 f9       	bld	r25, 7
    4318:	90 93 ca 01 	sts	0x01CA, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    431c:	80 91 ca 01 	lds	r24, 0x01CA
    4320:	0e 94 0f 22 	call	0x441e	; 0x441e <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    4324:	80 91 ca 01 	lds	r24, 0x01CA
    4328:	87 fb       	bst	r24, 7
    432a:	88 27       	eor	r24, r24
    432c:	80 f9       	bld	r24, 0
    432e:	80 93 0f 01 	sts	0x010F, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4332:	87 e2       	ldi	r24, 0x27	; 39
    4334:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4338:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    433a:	8e e1       	ldi	r24, 0x1E	; 30
    433c:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4340:	81 11       	cpse	r24, r1
    4342:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4344:	8f e1       	ldi	r24, 0x1F	; 31
    4346:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    434a:	81 11       	cpse	r24, r1
    434c:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    434e:	80 e2       	ldi	r24, 0x20	; 32
    4350:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4354:	81 11       	cpse	r24, r1
    4356:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    4358:	81 e2       	ldi	r24, 0x21	; 33
    435a:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    435e:	81 11       	cpse	r24, r1
    4360:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4362:	82 e2       	ldi	r24, 0x22	; 34
    4364:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4368:	81 11       	cpse	r24, r1
    436a:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    436c:	83 e2       	ldi	r24, 0x23	; 35
    436e:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    4372:	81 11       	cpse	r24, r1
    4374:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4376:	84 e2       	ldi	r24, 0x24	; 36
    4378:	0e 94 93 20 	call	0x4126	; 0x4126 <bootmagic_scan_keycode>
    437c:	88 23       	and	r24, r24
    437e:	11 f0       	breq	.+4      	; 0x4384 <bootmagic+0x242>
    4380:	c0 68       	ori	r28, 0x80	; 128
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <bootmagic+0x246>
    if (default_layer) {
    4384:	cc 23       	and	r28, r28
    4386:	29 f0       	breq	.+10     	; 0x4392 <bootmagic+0x250>
        eeconfig_write_default_layer(default_layer);
    4388:	8c 2f       	mov	r24, r28
    438a:	0e 94 06 22 	call	0x440c	; 0x440c <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    438e:	6c 2f       	mov	r22, r28
    4390:	03 c0       	rjmp	.+6      	; 0x4398 <bootmagic+0x256>
    } else {
        default_layer = eeconfig_read_default_layer();
    4392:	0e 94 02 22 	call	0x4404	; 0x4404 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4396:	68 2f       	mov	r22, r24
    4398:	70 e0       	ldi	r23, 0x00	; 0
    439a:	80 e0       	ldi	r24, 0x00	; 0
    439c:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    439e:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    43a0:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <default_layer_set>
    }
}
    43a4:	cf 91       	pop	r28
    43a6:	08 95       	ret

000043a8 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    43a8:	6d ee       	ldi	r22, 0xED	; 237
    43aa:	7e ef       	ldi	r23, 0xFE	; 254
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	0e 94 75 2d 	call	0x5aea	; 0x5aea <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    43b4:	60 e0       	ldi	r22, 0x00	; 0
    43b6:	82 e0       	ldi	r24, 0x02	; 2
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	0e 94 67 2d 	call	0x5ace	; 0x5ace <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    43be:	60 e0       	ldi	r22, 0x00	; 0
    43c0:	83 e0       	ldi	r24, 0x03	; 3
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	0e 94 67 2d 	call	0x5ace	; 0x5ace <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    43c8:	60 e0       	ldi	r22, 0x00	; 0
    43ca:	84 e0       	ldi	r24, 0x04	; 4
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	0e 94 67 2d 	call	0x5ace	; 0x5ace <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    43d2:	60 e0       	ldi	r22, 0x00	; 0
    43d4:	85 e0       	ldi	r24, 0x05	; 5
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	0c 94 67 2d 	jmp	0x5ace	; 0x5ace <__eewr_byte_m32u4>

000043dc <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	0e 94 61 2d 	call	0x5ac2	; 0x5ac2 <__eerd_word_m32u4>
    43e4:	21 e0       	ldi	r18, 0x01	; 1
    43e6:	8d 3e       	cpi	r24, 0xED	; 237
    43e8:	9e 4f       	sbci	r25, 0xFE	; 254
    43ea:	09 f0       	breq	.+2      	; 0x43ee <eeconfig_is_enabled+0x12>
    43ec:	20 e0       	ldi	r18, 0x00	; 0
}
    43ee:	82 2f       	mov	r24, r18
    43f0:	08 95       	ret

000043f2 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    43f2:	82 e0       	ldi	r24, 0x02	; 2
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__eerd_byte_m32u4>

000043fa <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    43fa:	68 2f       	mov	r22, r24
    43fc:	82 e0       	ldi	r24, 0x02	; 2
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	0c 94 67 2d 	jmp	0x5ace	; 0x5ace <__eewr_byte_m32u4>

00004404 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4404:	83 e0       	ldi	r24, 0x03	; 3
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__eerd_byte_m32u4>

0000440c <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    440c:	68 2f       	mov	r22, r24
    440e:	83 e0       	ldi	r24, 0x03	; 3
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	0c 94 67 2d 	jmp	0x5ace	; 0x5ace <__eewr_byte_m32u4>

00004416 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4416:	84 e0       	ldi	r24, 0x04	; 4
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__eerd_byte_m32u4>

0000441e <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    441e:	68 2f       	mov	r22, r24
    4420:	84 e0       	ldi	r24, 0x04	; 4
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	0c 94 67 2d 	jmp	0x5ace	; 0x5ace <__eewr_byte_m32u4>

00004428 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4428:	80 91 bd 01 	lds	r24, 0x01BD
    442c:	80 ff       	sbrs	r24, 0
    442e:	0b c0       	rjmp	.+22     	; 0x4446 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4430:	60 91 15 01 	lds	r22, 0x0115
    4434:	85 e0       	ldi	r24, 0x05	; 5
    4436:	68 9f       	mul	r22, r24
    4438:	b0 01       	movw	r22, r0
    443a:	11 24       	eor	r1, r1
    443c:	75 95       	asr	r23
    443e:	67 95       	ror	r22
    4440:	75 95       	asr	r23
    4442:	67 95       	ror	r22
    4444:	2a c0       	rjmp	.+84     	; 0x449a <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4446:	81 ff       	sbrs	r24, 1
    4448:	09 c0       	rjmp	.+18     	; 0x445c <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    444a:	60 91 15 01 	lds	r22, 0x0115
    444e:	85 e0       	ldi	r24, 0x05	; 5
    4450:	68 9f       	mul	r22, r24
    4452:	b0 01       	movw	r22, r0
    4454:	11 24       	eor	r1, r1
    4456:	75 95       	asr	r23
    4458:	67 95       	ror	r22
    445a:	1f c0       	rjmp	.+62     	; 0x449a <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    445c:	82 ff       	sbrs	r24, 2
    445e:	07 c0       	rjmp	.+14     	; 0x446e <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4460:	60 91 15 01 	lds	r22, 0x0115
    4464:	85 e0       	ldi	r24, 0x05	; 5
    4466:	68 9f       	mul	r22, r24
    4468:	b0 01       	movw	r22, r0
    446a:	11 24       	eor	r1, r1
    446c:	16 c0       	rjmp	.+44     	; 0x449a <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    446e:	40 91 be 01 	lds	r20, 0x01BE
    4472:	44 23       	and	r20, r20
    4474:	c9 f0       	breq	.+50     	; 0x44a8 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4476:	60 91 14 01 	lds	r22, 0x0114
    447a:	46 17       	cp	r20, r22
    447c:	88 f7       	brcc	.-30     	; 0x4460 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    447e:	20 91 15 01 	lds	r18, 0x0115
    4482:	85 e0       	ldi	r24, 0x05	; 5
    4484:	28 9f       	mul	r18, r24
    4486:	90 01       	movw	r18, r0
    4488:	11 24       	eor	r1, r1
    448a:	42 9f       	mul	r20, r18
    448c:	c0 01       	movw	r24, r0
    448e:	43 9f       	mul	r20, r19
    4490:	90 0d       	add	r25, r0
    4492:	11 24       	eor	r1, r1
    4494:	70 e0       	ldi	r23, 0x00	; 0
    4496:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    449a:	60 38       	cpi	r22, 0x80	; 128
    449c:	71 05       	cpc	r23, r1
    449e:	40 f4       	brcc	.+16     	; 0x44b0 <move_unit+0x88>
    44a0:	61 15       	cp	r22, r1
    44a2:	71 05       	cpc	r23, r1
    44a4:	39 f0       	breq	.+14     	; 0x44b4 <move_unit+0x8c>
    44a6:	02 c0       	rjmp	.+4      	; 0x44ac <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    44a8:	65 e0       	ldi	r22, 0x05	; 5
    44aa:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    44ac:	86 2f       	mov	r24, r22
    44ae:	08 95       	ret
    44b0:	8f e7       	ldi	r24, 0x7F	; 127
    44b2:	08 95       	ret
    44b4:	81 e0       	ldi	r24, 0x01	; 1
}
    44b6:	08 95       	ret

000044b8 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    44b8:	80 91 bd 01 	lds	r24, 0x01BD
    44bc:	80 ff       	sbrs	r24, 0
    44be:	08 c0       	rjmp	.+16     	; 0x44d0 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    44c0:	60 91 13 01 	lds	r22, 0x0113
    44c4:	70 e0       	ldi	r23, 0x00	; 0
    44c6:	75 95       	asr	r23
    44c8:	67 95       	ror	r22
    44ca:	75 95       	asr	r23
    44cc:	67 95       	ror	r22
    44ce:	21 c0       	rjmp	.+66     	; 0x4512 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    44d0:	81 ff       	sbrs	r24, 1
    44d2:	06 c0       	rjmp	.+12     	; 0x44e0 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    44d4:	60 91 13 01 	lds	r22, 0x0113
    44d8:	70 e0       	ldi	r23, 0x00	; 0
    44da:	75 95       	asr	r23
    44dc:	67 95       	ror	r22
    44de:	19 c0       	rjmp	.+50     	; 0x4512 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    44e0:	82 ff       	sbrs	r24, 2
    44e2:	04 c0       	rjmp	.+8      	; 0x44ec <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    44e4:	60 91 13 01 	lds	r22, 0x0113
    44e8:	70 e0       	ldi	r23, 0x00	; 0
    44ea:	10 c0       	rjmp	.+32     	; 0x450c <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    44ec:	80 91 be 01 	lds	r24, 0x01BE
    44f0:	88 23       	and	r24, r24
    44f2:	c1 f0       	breq	.+48     	; 0x4524 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    44f4:	60 91 12 01 	lds	r22, 0x0112
    44f8:	86 17       	cp	r24, r22
    44fa:	a0 f7       	brcc	.-24     	; 0x44e4 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    44fc:	90 91 13 01 	lds	r25, 0x0113
    4500:	98 9f       	mul	r25, r24
    4502:	c0 01       	movw	r24, r0
    4504:	11 24       	eor	r1, r1
    4506:	70 e0       	ldi	r23, 0x00	; 0
    4508:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    450c:	60 38       	cpi	r22, 0x80	; 128
    450e:	71 05       	cpc	r23, r1
    4510:	28 f4       	brcc	.+10     	; 0x451c <wheel_unit+0x64>
    4512:	61 15       	cp	r22, r1
    4514:	71 05       	cpc	r23, r1
    4516:	21 f0       	breq	.+8      	; 0x4520 <wheel_unit+0x68>
    4518:	86 2f       	mov	r24, r22
    451a:	08 95       	ret
    451c:	8f e7       	ldi	r24, 0x7F	; 127
    451e:	08 95       	ret
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4524:	61 e0       	ldi	r22, 0x01	; 1
    4526:	70 e0       	ldi	r23, 0x00	; 0
    4528:	f4 cf       	rjmp	.-24     	; 0x4512 <wheel_unit+0x5a>

0000452a <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    452a:	80 3f       	cpi	r24, 0xF0	; 240
    452c:	21 f4       	brne	.+8      	; 0x4536 <mousekey_on+0xc>
    452e:	0e 94 14 22 	call	0x4428	; 0x4428 <move_unit>
    4532:	81 95       	neg	r24
    4534:	04 c0       	rjmp	.+8      	; 0x453e <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4536:	81 3f       	cpi	r24, 0xF1	; 241
    4538:	29 f4       	brne	.+10     	; 0x4544 <mousekey_on+0x1a>
    453a:	0e 94 14 22 	call	0x4428	; 0x4428 <move_unit>
    453e:	80 93 c1 01 	sts	0x01C1, r24
    4542:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4544:	82 3f       	cpi	r24, 0xF2	; 242
    4546:	21 f4       	brne	.+8      	; 0x4550 <mousekey_on+0x26>
    4548:	0e 94 14 22 	call	0x4428	; 0x4428 <move_unit>
    454c:	81 95       	neg	r24
    454e:	04 c0       	rjmp	.+8      	; 0x4558 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4550:	83 3f       	cpi	r24, 0xF3	; 243
    4552:	29 f4       	brne	.+10     	; 0x455e <mousekey_on+0x34>
    4554:	0e 94 14 22 	call	0x4428	; 0x4428 <move_unit>
    4558:	80 93 c0 01 	sts	0x01C0, r24
    455c:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    455e:	89 3f       	cpi	r24, 0xF9	; 249
    4560:	19 f4       	brne	.+6      	; 0x4568 <mousekey_on+0x3e>
    4562:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <wheel_unit>
    4566:	05 c0       	rjmp	.+10     	; 0x4572 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4568:	8a 3f       	cpi	r24, 0xFA	; 250
    456a:	31 f4       	brne	.+12     	; 0x4578 <mousekey_on+0x4e>
    456c:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <wheel_unit>
    4570:	81 95       	neg	r24
    4572:	80 93 c2 01 	sts	0x01C2, r24
    4576:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4578:	8b 3f       	cpi	r24, 0xFB	; 251
    457a:	21 f4       	brne	.+8      	; 0x4584 <mousekey_on+0x5a>
    457c:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <wheel_unit>
    4580:	81 95       	neg	r24
    4582:	04 c0       	rjmp	.+8      	; 0x458c <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4584:	8c 3f       	cpi	r24, 0xFC	; 252
    4586:	29 f4       	brne	.+10     	; 0x4592 <mousekey_on+0x68>
    4588:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <wheel_unit>
    458c:	80 93 c3 01 	sts	0x01C3, r24
    4590:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4592:	84 3f       	cpi	r24, 0xF4	; 244
    4594:	21 f4       	brne	.+8      	; 0x459e <mousekey_on+0x74>
    4596:	80 91 bf 01 	lds	r24, 0x01BF
    459a:	81 60       	ori	r24, 0x01	; 1
    459c:	17 c0       	rjmp	.+46     	; 0x45cc <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    459e:	85 3f       	cpi	r24, 0xF5	; 245
    45a0:	21 f4       	brne	.+8      	; 0x45aa <mousekey_on+0x80>
    45a2:	80 91 bf 01 	lds	r24, 0x01BF
    45a6:	82 60       	ori	r24, 0x02	; 2
    45a8:	11 c0       	rjmp	.+34     	; 0x45cc <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    45aa:	86 3f       	cpi	r24, 0xF6	; 246
    45ac:	21 f4       	brne	.+8      	; 0x45b6 <mousekey_on+0x8c>
    45ae:	80 91 bf 01 	lds	r24, 0x01BF
    45b2:	84 60       	ori	r24, 0x04	; 4
    45b4:	0b c0       	rjmp	.+22     	; 0x45cc <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    45b6:	87 3f       	cpi	r24, 0xF7	; 247
    45b8:	21 f4       	brne	.+8      	; 0x45c2 <mousekey_on+0x98>
    45ba:	80 91 bf 01 	lds	r24, 0x01BF
    45be:	88 60       	ori	r24, 0x08	; 8
    45c0:	05 c0       	rjmp	.+10     	; 0x45cc <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    45c2:	88 3f       	cpi	r24, 0xF8	; 248
    45c4:	31 f4       	brne	.+12     	; 0x45d2 <mousekey_on+0xa8>
    45c6:	80 91 bf 01 	lds	r24, 0x01BF
    45ca:	80 61       	ori	r24, 0x10	; 16
    45cc:	80 93 bf 01 	sts	0x01BF, r24
    45d0:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    45d2:	8d 3f       	cpi	r24, 0xFD	; 253
    45d4:	21 f4       	brne	.+8      	; 0x45de <mousekey_on+0xb4>
    45d6:	80 91 bd 01 	lds	r24, 0x01BD
    45da:	81 60       	ori	r24, 0x01	; 1
    45dc:	0b c0       	rjmp	.+22     	; 0x45f4 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    45de:	8e 3f       	cpi	r24, 0xFE	; 254
    45e0:	21 f4       	brne	.+8      	; 0x45ea <mousekey_on+0xc0>
    45e2:	80 91 bd 01 	lds	r24, 0x01BD
    45e6:	82 60       	ori	r24, 0x02	; 2
    45e8:	05 c0       	rjmp	.+10     	; 0x45f4 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    45ea:	8f 3f       	cpi	r24, 0xFF	; 255
    45ec:	29 f4       	brne	.+10     	; 0x45f8 <mousekey_on+0xce>
    45ee:	80 91 bd 01 	lds	r24, 0x01BD
    45f2:	84 60       	ori	r24, 0x04	; 4
    45f4:	80 93 bd 01 	sts	0x01BD, r24
    45f8:	08 95       	ret

000045fa <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    45fa:	80 3f       	cpi	r24, 0xF0	; 240
    45fc:	39 f4       	brne	.+14     	; 0x460c <mousekey_off+0x12>
    45fe:	80 91 c1 01 	lds	r24, 0x01C1
    4602:	87 ff       	sbrs	r24, 7
    4604:	6c c0       	rjmp	.+216    	; 0x46de <mousekey_off+0xe4>
    4606:	10 92 c1 01 	sts	0x01C1, r1
    460a:	69 c0       	rjmp	.+210    	; 0x46de <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    460c:	81 3f       	cpi	r24, 0xF1	; 241
    460e:	29 f4       	brne	.+10     	; 0x461a <mousekey_off+0x20>
    4610:	80 91 c1 01 	lds	r24, 0x01C1
    4614:	18 16       	cp	r1, r24
    4616:	bc f3       	brlt	.-18     	; 0x4606 <mousekey_off+0xc>
    4618:	62 c0       	rjmp	.+196    	; 0x46de <mousekey_off+0xe4>
    461a:	90 91 c0 01 	lds	r25, 0x01C0
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    461e:	82 3f       	cpi	r24, 0xF2	; 242
    4620:	29 f4       	brne	.+10     	; 0x462c <mousekey_off+0x32>
    4622:	97 ff       	sbrs	r25, 7
    4624:	5c c0       	rjmp	.+184    	; 0x46de <mousekey_off+0xe4>
    4626:	10 92 c0 01 	sts	0x01C0, r1
    462a:	59 c0       	rjmp	.+178    	; 0x46de <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    462c:	83 3f       	cpi	r24, 0xF3	; 243
    462e:	19 f4       	brne	.+6      	; 0x4636 <mousekey_off+0x3c>
    4630:	19 16       	cp	r1, r25
    4632:	cc f3       	brlt	.-14     	; 0x4626 <mousekey_off+0x2c>
    4634:	54 c0       	rjmp	.+168    	; 0x46de <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4636:	89 3f       	cpi	r24, 0xF9	; 249
    4638:	41 f4       	brne	.+16     	; 0x464a <mousekey_off+0x50>
    463a:	80 91 c2 01 	lds	r24, 0x01C2
    463e:	18 16       	cp	r1, r24
    4640:	0c f0       	brlt	.+2      	; 0x4644 <mousekey_off+0x4a>
    4642:	4d c0       	rjmp	.+154    	; 0x46de <mousekey_off+0xe4>
    4644:	10 92 c2 01 	sts	0x01C2, r1
    4648:	4a c0       	rjmp	.+148    	; 0x46de <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    464a:	8a 3f       	cpi	r24, 0xFA	; 250
    464c:	29 f4       	brne	.+10     	; 0x4658 <mousekey_off+0x5e>
    464e:	80 91 c2 01 	lds	r24, 0x01C2
    4652:	87 ff       	sbrs	r24, 7
    4654:	44 c0       	rjmp	.+136    	; 0x46de <mousekey_off+0xe4>
    4656:	f6 cf       	rjmp	.-20     	; 0x4644 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4658:	8b 3f       	cpi	r24, 0xFB	; 251
    465a:	39 f4       	brne	.+14     	; 0x466a <mousekey_off+0x70>
    465c:	80 91 c3 01 	lds	r24, 0x01C3
    4660:	87 ff       	sbrs	r24, 7
    4662:	3d c0       	rjmp	.+122    	; 0x46de <mousekey_off+0xe4>
    4664:	10 92 c3 01 	sts	0x01C3, r1
    4668:	3a c0       	rjmp	.+116    	; 0x46de <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    466a:	8c 3f       	cpi	r24, 0xFC	; 252
    466c:	29 f4       	brne	.+10     	; 0x4678 <mousekey_off+0x7e>
    466e:	80 91 c3 01 	lds	r24, 0x01C3
    4672:	18 16       	cp	r1, r24
    4674:	bc f3       	brlt	.-18     	; 0x4664 <mousekey_off+0x6a>
    4676:	33 c0       	rjmp	.+102    	; 0x46de <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4678:	84 3f       	cpi	r24, 0xF4	; 244
    467a:	21 f4       	brne	.+8      	; 0x4684 <mousekey_off+0x8a>
    467c:	80 91 bf 01 	lds	r24, 0x01BF
    4680:	8e 7f       	andi	r24, 0xFE	; 254
    4682:	17 c0       	rjmp	.+46     	; 0x46b2 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4684:	85 3f       	cpi	r24, 0xF5	; 245
    4686:	21 f4       	brne	.+8      	; 0x4690 <mousekey_off+0x96>
    4688:	80 91 bf 01 	lds	r24, 0x01BF
    468c:	8d 7f       	andi	r24, 0xFD	; 253
    468e:	11 c0       	rjmp	.+34     	; 0x46b2 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4690:	86 3f       	cpi	r24, 0xF6	; 246
    4692:	21 f4       	brne	.+8      	; 0x469c <mousekey_off+0xa2>
    4694:	80 91 bf 01 	lds	r24, 0x01BF
    4698:	8b 7f       	andi	r24, 0xFB	; 251
    469a:	0b c0       	rjmp	.+22     	; 0x46b2 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    469c:	87 3f       	cpi	r24, 0xF7	; 247
    469e:	21 f4       	brne	.+8      	; 0x46a8 <mousekey_off+0xae>
    46a0:	80 91 bf 01 	lds	r24, 0x01BF
    46a4:	87 7f       	andi	r24, 0xF7	; 247
    46a6:	05 c0       	rjmp	.+10     	; 0x46b2 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    46a8:	88 3f       	cpi	r24, 0xF8	; 248
    46aa:	31 f4       	brne	.+12     	; 0x46b8 <mousekey_off+0xbe>
    46ac:	80 91 bf 01 	lds	r24, 0x01BF
    46b0:	8f 7e       	andi	r24, 0xEF	; 239
    46b2:	80 93 bf 01 	sts	0x01BF, r24
    46b6:	13 c0       	rjmp	.+38     	; 0x46de <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    46b8:	8d 3f       	cpi	r24, 0xFD	; 253
    46ba:	21 f4       	brne	.+8      	; 0x46c4 <mousekey_off+0xca>
    46bc:	80 91 bd 01 	lds	r24, 0x01BD
    46c0:	8e 7f       	andi	r24, 0xFE	; 254
    46c2:	0b c0       	rjmp	.+22     	; 0x46da <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    46c4:	8e 3f       	cpi	r24, 0xFE	; 254
    46c6:	21 f4       	brne	.+8      	; 0x46d0 <mousekey_off+0xd6>
    46c8:	80 91 bd 01 	lds	r24, 0x01BD
    46cc:	8d 7f       	andi	r24, 0xFD	; 253
    46ce:	05 c0       	rjmp	.+10     	; 0x46da <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    46d0:	8f 3f       	cpi	r24, 0xFF	; 255
    46d2:	29 f4       	brne	.+10     	; 0x46de <mousekey_off+0xe4>
    46d4:	80 91 bd 01 	lds	r24, 0x01BD
    46d8:	8b 7f       	andi	r24, 0xFB	; 251
    46da:	80 93 bd 01 	sts	0x01BD, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    46de:	80 91 c0 01 	lds	r24, 0x01C0
    46e2:	81 11       	cpse	r24, r1
    46e4:	0e c0       	rjmp	.+28     	; 0x4702 <mousekey_off+0x108>
    46e6:	80 91 c1 01 	lds	r24, 0x01C1
    46ea:	81 11       	cpse	r24, r1
    46ec:	0a c0       	rjmp	.+20     	; 0x4702 <mousekey_off+0x108>
    46ee:	80 91 c2 01 	lds	r24, 0x01C2
    46f2:	81 11       	cpse	r24, r1
    46f4:	06 c0       	rjmp	.+12     	; 0x4702 <mousekey_off+0x108>
    46f6:	80 91 c3 01 	lds	r24, 0x01C3
    46fa:	81 11       	cpse	r24, r1
    46fc:	02 c0       	rjmp	.+4      	; 0x4702 <mousekey_off+0x108>
        mousekey_repeat = 0;
    46fe:	10 92 be 01 	sts	0x01BE, r1
    4702:	08 95       	ret

00004704 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4704:	80 91 b3 01 	lds	r24, 0x01B3
    4708:	83 ff       	sbrs	r24, 3
    470a:	7e c0       	rjmp	.+252    	; 0x4808 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    470c:	8c e6       	ldi	r24, 0x6C	; 108
    470e:	96 e0       	ldi	r25, 0x06	; 6
    4710:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    phex(mouse_report.buttons); print("|");
    4714:	80 91 bf 01 	lds	r24, 0x01BF
    4718:	1f 92       	push	r1
    471a:	8f 93       	push	r24
    471c:	87 e6       	ldi	r24, 0x67	; 103
    471e:	96 e0       	ldi	r25, 0x06	; 6
    4720:	9f 93       	push	r25
    4722:	8f 93       	push	r24
    4724:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4728:	85 e6       	ldi	r24, 0x65	; 101
    472a:	96 e0       	ldi	r25, 0x06	; 6
    472c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print_decs(mouse_report.x); print(" ");
    4730:	20 91 c0 01 	lds	r18, 0x01C0
    4734:	82 2f       	mov	r24, r18
    4736:	99 27       	eor	r25, r25
    4738:	87 fd       	sbrc	r24, 7
    473a:	90 95       	com	r25
    473c:	9f 93       	push	r25
    473e:	2f 93       	push	r18
    4740:	82 e6       	ldi	r24, 0x62	; 98
    4742:	96 e0       	ldi	r25, 0x06	; 6
    4744:	9f 93       	push	r25
    4746:	8f 93       	push	r24
    4748:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    474c:	80 e6       	ldi	r24, 0x60	; 96
    474e:	96 e0       	ldi	r25, 0x06	; 6
    4750:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print_decs(mouse_report.y); print(" ");
    4754:	20 91 c1 01 	lds	r18, 0x01C1
    4758:	82 2f       	mov	r24, r18
    475a:	99 27       	eor	r25, r25
    475c:	87 fd       	sbrc	r24, 7
    475e:	90 95       	com	r25
    4760:	9f 93       	push	r25
    4762:	2f 93       	push	r18
    4764:	8d e5       	ldi	r24, 0x5D	; 93
    4766:	96 e0       	ldi	r25, 0x06	; 6
    4768:	9f 93       	push	r25
    476a:	8f 93       	push	r24
    476c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4770:	8b e5       	ldi	r24, 0x5B	; 91
    4772:	96 e0       	ldi	r25, 0x06	; 6
    4774:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print_decs(mouse_report.v); print(" ");
    4778:	20 91 c2 01 	lds	r18, 0x01C2
    477c:	82 2f       	mov	r24, r18
    477e:	99 27       	eor	r25, r25
    4780:	87 fd       	sbrc	r24, 7
    4782:	90 95       	com	r25
    4784:	9f 93       	push	r25
    4786:	2f 93       	push	r18
    4788:	88 e5       	ldi	r24, 0x58	; 88
    478a:	96 e0       	ldi	r25, 0x06	; 6
    478c:	9f 93       	push	r25
    478e:	8f 93       	push	r24
    4790:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4794:	86 e5       	ldi	r24, 0x56	; 86
    4796:	96 e0       	ldi	r25, 0x06	; 6
    4798:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print_decs(mouse_report.h); print("](");
    479c:	20 91 c3 01 	lds	r18, 0x01C3
    47a0:	82 2f       	mov	r24, r18
    47a2:	99 27       	eor	r25, r25
    47a4:	87 fd       	sbrc	r24, 7
    47a6:	90 95       	com	r25
    47a8:	9f 93       	push	r25
    47aa:	2f 93       	push	r18
    47ac:	83 e5       	ldi	r24, 0x53	; 83
    47ae:	96 e0       	ldi	r25, 0x06	; 6
    47b0:	9f 93       	push	r25
    47b2:	8f 93       	push	r24
    47b4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    47b8:	80 e5       	ldi	r24, 0x50	; 80
    47ba:	96 e0       	ldi	r25, 0x06	; 6
    47bc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print_dec(mousekey_repeat); print("/");
    47c0:	80 91 be 01 	lds	r24, 0x01BE
    47c4:	1f 92       	push	r1
    47c6:	8f 93       	push	r24
    47c8:	8d e4       	ldi	r24, 0x4D	; 77
    47ca:	96 e0       	ldi	r25, 0x06	; 6
    47cc:	9f 93       	push	r25
    47ce:	8f 93       	push	r24
    47d0:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    47d4:	8b e4       	ldi	r24, 0x4B	; 75
    47d6:	96 e0       	ldi	r25, 0x06	; 6
    47d8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print_dec(mousekey_accel); print(")\n");
    47dc:	80 91 bd 01 	lds	r24, 0x01BD
    47e0:	1f 92       	push	r1
    47e2:	8f 93       	push	r24
    47e4:	88 e4       	ldi	r24, 0x48	; 72
    47e6:	96 e0       	ldi	r25, 0x06	; 6
    47e8:	9f 93       	push	r25
    47ea:	8f 93       	push	r24
    47ec:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    47f0:	85 e4       	ldi	r24, 0x45	; 69
    47f2:	96 e0       	ldi	r25, 0x06	; 6
    47f4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    47f8:	8d b7       	in	r24, 0x3d	; 61
    47fa:	9e b7       	in	r25, 0x3e	; 62
    47fc:	4c 96       	adiw	r24, 0x1c	; 28
    47fe:	0f b6       	in	r0, 0x3f	; 63
    4800:	f8 94       	cli
    4802:	9e bf       	out	0x3e, r25	; 62
    4804:	0f be       	out	0x3f, r0	; 63
    4806:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4808:	8f eb       	ldi	r24, 0xBF	; 191
    480a:	91 e0       	ldi	r25, 0x01	; 1
    480c:	0e 94 33 12 	call	0x2466	; 0x2466 <host_mouse_send>
    last_timer = timer_read();
    4810:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <timer_read>
    4814:	90 93 bc 01 	sts	0x01BC, r25
    4818:	80 93 bb 01 	sts	0x01BB, r24
    481c:	08 95       	ret

0000481e <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    481e:	1f 93       	push	r17
    4820:	cf 93       	push	r28
    4822:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4824:	80 91 bb 01 	lds	r24, 0x01BB
    4828:	90 91 bc 01 	lds	r25, 0x01BC
    482c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <timer_elapsed>
    4830:	40 91 be 01 	lds	r20, 0x01BE
    4834:	44 23       	and	r20, r20
    4836:	21 f0       	breq	.+8      	; 0x4840 <mousekey_task+0x22>
    4838:	20 91 16 01 	lds	r18, 0x0116
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	06 c0       	rjmp	.+12     	; 0x484c <mousekey_task+0x2e>
    4840:	20 91 17 01 	lds	r18, 0x0117
    4844:	5a e0       	ldi	r21, 0x0A	; 10
    4846:	25 9f       	mul	r18, r21
    4848:	90 01       	movw	r18, r0
    484a:	11 24       	eor	r1, r1
    484c:	82 17       	cp	r24, r18
    484e:	93 07       	cpc	r25, r19
    4850:	08 f4       	brcc	.+2      	; 0x4854 <mousekey_task+0x36>
    4852:	82 c0       	rjmp	.+260    	; 0x4958 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4854:	80 91 c0 01 	lds	r24, 0x01C0
    4858:	10 91 c1 01 	lds	r17, 0x01C1
    485c:	d0 91 c2 01 	lds	r29, 0x01C2
    4860:	c0 91 c3 01 	lds	r28, 0x01C3
    4864:	81 11       	cpse	r24, r1
    4866:	07 c0       	rjmp	.+14     	; 0x4876 <mousekey_task+0x58>
    4868:	11 11       	cpse	r17, r1
    486a:	05 c0       	rjmp	.+10     	; 0x4876 <mousekey_task+0x58>
    486c:	d1 11       	cpse	r29, r1
    486e:	03 c0       	rjmp	.+6      	; 0x4876 <mousekey_task+0x58>
    4870:	cc 23       	and	r28, r28
    4872:	09 f4       	brne	.+2      	; 0x4876 <mousekey_task+0x58>
    4874:	71 c0       	rjmp	.+226    	; 0x4958 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4876:	4f 3f       	cpi	r20, 0xFF	; 255
    4878:	19 f0       	breq	.+6      	; 0x4880 <mousekey_task+0x62>
        mousekey_repeat++;
    487a:	4f 5f       	subi	r20, 0xFF	; 255
    487c:	40 93 be 01 	sts	0x01BE, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4880:	18 16       	cp	r1, r24
    4882:	24 f4       	brge	.+8      	; 0x488c <mousekey_task+0x6e>
    4884:	0e 94 14 22 	call	0x4428	; 0x4428 <move_unit>
    4888:	80 93 c0 01 	sts	0x01C0, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    488c:	80 91 c0 01 	lds	r24, 0x01C0
    4890:	87 ff       	sbrs	r24, 7
    4892:	05 c0       	rjmp	.+10     	; 0x489e <mousekey_task+0x80>
    4894:	0e 94 14 22 	call	0x4428	; 0x4428 <move_unit>
    4898:	81 95       	neg	r24
    489a:	80 93 c0 01 	sts	0x01C0, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    489e:	11 16       	cp	r1, r17
    48a0:	24 f4       	brge	.+8      	; 0x48aa <mousekey_task+0x8c>
    48a2:	0e 94 14 22 	call	0x4428	; 0x4428 <move_unit>
    48a6:	80 93 c1 01 	sts	0x01C1, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    48aa:	80 91 c1 01 	lds	r24, 0x01C1
    48ae:	87 ff       	sbrs	r24, 7
    48b0:	05 c0       	rjmp	.+10     	; 0x48bc <mousekey_task+0x9e>
    48b2:	0e 94 14 22 	call	0x4428	; 0x4428 <move_unit>
    48b6:	81 95       	neg	r24
    48b8:	80 93 c1 01 	sts	0x01C1, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    48bc:	60 91 c0 01 	lds	r22, 0x01C0
    48c0:	66 23       	and	r22, r22
    48c2:	39 f1       	breq	.+78     	; 0x4912 <mousekey_task+0xf4>
    48c4:	10 91 c1 01 	lds	r17, 0x01C1
    48c8:	11 23       	and	r17, r17
    48ca:	19 f1       	breq	.+70     	; 0x4912 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    48cc:	77 27       	eor	r23, r23
    48ce:	67 fd       	sbrc	r22, 7
    48d0:	70 95       	com	r23
    48d2:	87 2f       	mov	r24, r23
    48d4:	97 2f       	mov	r25, r23
    48d6:	0e 94 3c 2c 	call	0x5878	; 0x5878 <__floatsisf>
    48da:	23 e3       	ldi	r18, 0x33	; 51
    48dc:	33 e3       	ldi	r19, 0x33	; 51
    48de:	43 e3       	ldi	r20, 0x33	; 51
    48e0:	5f e3       	ldi	r21, 0x3F	; 63
    48e2:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__mulsf3>
    48e6:	0e 94 09 2c 	call	0x5812	; 0x5812 <__fixsfsi>
    48ea:	60 93 c0 01 	sts	0x01C0, r22
        mouse_report.y *= 0.7;
    48ee:	61 2f       	mov	r22, r17
    48f0:	77 27       	eor	r23, r23
    48f2:	67 fd       	sbrc	r22, 7
    48f4:	70 95       	com	r23
    48f6:	87 2f       	mov	r24, r23
    48f8:	97 2f       	mov	r25, r23
    48fa:	0e 94 3c 2c 	call	0x5878	; 0x5878 <__floatsisf>
    48fe:	23 e3       	ldi	r18, 0x33	; 51
    4900:	33 e3       	ldi	r19, 0x33	; 51
    4902:	43 e3       	ldi	r20, 0x33	; 51
    4904:	5f e3       	ldi	r21, 0x3F	; 63
    4906:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__mulsf3>
    490a:	0e 94 09 2c 	call	0x5812	; 0x5812 <__fixsfsi>
    490e:	60 93 c1 01 	sts	0x01C1, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4912:	1d 16       	cp	r1, r29
    4914:	24 f4       	brge	.+8      	; 0x491e <mousekey_task+0x100>
    4916:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <wheel_unit>
    491a:	80 93 c2 01 	sts	0x01C2, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    491e:	80 91 c2 01 	lds	r24, 0x01C2
    4922:	87 ff       	sbrs	r24, 7
    4924:	05 c0       	rjmp	.+10     	; 0x4930 <mousekey_task+0x112>
    4926:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <wheel_unit>
    492a:	81 95       	neg	r24
    492c:	80 93 c2 01 	sts	0x01C2, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4930:	1c 16       	cp	r1, r28
    4932:	24 f4       	brge	.+8      	; 0x493c <mousekey_task+0x11e>
    4934:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <wheel_unit>
    4938:	80 93 c3 01 	sts	0x01C3, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    493c:	80 91 c3 01 	lds	r24, 0x01C3
    4940:	87 ff       	sbrs	r24, 7
    4942:	05 c0       	rjmp	.+10     	; 0x494e <mousekey_task+0x130>
    4944:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <wheel_unit>
    4948:	81 95       	neg	r24
    494a:	80 93 c3 01 	sts	0x01C3, r24

    mousekey_send();
}
    494e:	df 91       	pop	r29
    4950:	cf 91       	pop	r28
    4952:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4954:	0c 94 82 23 	jmp	0x4704	; 0x4704 <mousekey_send>
}
    4958:	df 91       	pop	r29
    495a:	cf 91       	pop	r28
    495c:	1f 91       	pop	r17
    495e:	08 95       	ret

00004960 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4960:	ef eb       	ldi	r30, 0xBF	; 191
    4962:	f1 e0       	ldi	r31, 0x01	; 1
    4964:	85 e0       	ldi	r24, 0x05	; 5
    4966:	df 01       	movw	r26, r30
    4968:	1d 92       	st	X+, r1
    496a:	8a 95       	dec	r24
    496c:	e9 f7       	brne	.-6      	; 0x4968 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    496e:	10 92 be 01 	sts	0x01BE, r1
    mousekey_accel = 0;
    4972:	10 92 bd 01 	sts	0x01BD, r1
    4976:	08 95       	ret

00004978 <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    4978:	8b e3       	ldi	r24, 0x3B	; 59
    497a:	9b e0       	ldi	r25, 0x0B	; 11
    497c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("ESC/q:	quit\n");
    4980:	8e e2       	ldi	r24, 0x2E	; 46
    4982:	9b e0       	ldi	r25, 0x0B	; 11
    4984:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
#ifdef MOUSEKEY_ENABLE
    print("m:	mousekey\n");
    4988:	81 e2       	ldi	r24, 0x21	; 33
    498a:	9b e0       	ldi	r25, 0x0B	; 11
    498c:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <xputs>

00004990 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\n----- Mousekey Parameters Help -----\n");
    4990:	8e e9       	ldi	r24, 0x9E	; 158
    4992:	9a e0       	ldi	r25, 0x0A	; 10
    4994:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("ESC/q:	quit\n");
    4998:	81 e9       	ldi	r24, 0x91	; 145
    499a:	9a e0       	ldi	r25, 0x0A	; 10
    499c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("1:	select mk_delay(*10ms)\n");
    49a0:	86 e7       	ldi	r24, 0x76	; 118
    49a2:	9a e0       	ldi	r25, 0x0A	; 10
    49a4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("2:	select mk_interval(ms)\n");
    49a8:	8b e5       	ldi	r24, 0x5B	; 91
    49aa:	9a e0       	ldi	r25, 0x0A	; 10
    49ac:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("3:	select mk_max_speed\n");
    49b0:	83 e4       	ldi	r24, 0x43	; 67
    49b2:	9a e0       	ldi	r25, 0x0A	; 10
    49b4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("4:	select mk_time_to_max\n");
    49b8:	89 e2       	ldi	r24, 0x29	; 41
    49ba:	9a e0       	ldi	r25, 0x0A	; 10
    49bc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("5:	select mk_wheel_max_speed\n");
    49c0:	8b e0       	ldi	r24, 0x0B	; 11
    49c2:	9a e0       	ldi	r25, 0x0A	; 10
    49c4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("6:	select mk_wheel_time_to_max\n");
    49c8:	8b ee       	ldi	r24, 0xEB	; 235
    49ca:	99 e0       	ldi	r25, 0x09	; 9
    49cc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("p:	print parameters\n");
    49d0:	86 ed       	ldi	r24, 0xD6	; 214
    49d2:	99 e0       	ldi	r25, 0x09	; 9
    49d4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("d:	set default values\n");
    49d8:	8f eb       	ldi	r24, 0xBF	; 191
    49da:	99 e0       	ldi	r25, 0x09	; 9
    49dc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("up:	increase parameters(+1)\n");
    49e0:	82 ea       	ldi	r24, 0xA2	; 162
    49e2:	99 e0       	ldi	r25, 0x09	; 9
    49e4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("down:	decrease parameters(-1)\n");
    49e8:	83 e8       	ldi	r24, 0x83	; 131
    49ea:	99 e0       	ldi	r25, 0x09	; 9
    49ec:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("pgup:	increase parameters(+10)\n");
    49f0:	83 e6       	ldi	r24, 0x63	; 99
    49f2:	99 e0       	ldi	r25, 0x09	; 9
    49f4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("pgdown:	decrease parameters(-10)\n");
    49f8:	81 e4       	ldi	r24, 0x41	; 65
    49fa:	99 e0       	ldi	r25, 0x09	; 9
    49fc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
    4a00:	8c e0       	ldi	r24, 0x0C	; 12
    4a02:	99 e0       	ldi	r25, 0x09	; 9
    4a04:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
    4a08:	87 ef       	ldi	r24, 0xF7	; 247
    4a0a:	98 e0       	ldi	r25, 0x08	; 8
    4a0c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4a10:	1f 92       	push	r1
    4a12:	85 e0       	ldi	r24, 0x05	; 5
    4a14:	8f 93       	push	r24
    4a16:	84 ef       	ldi	r24, 0xF4	; 244
    4a18:	98 e0       	ldi	r25, 0x08	; 8
    4a1a:	9f 93       	push	r25
    4a1c:	8f 93       	push	r24
    4a1e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
    4a22:	8b ee       	ldi	r24, 0xEB	; 235
    4a24:	98 e0       	ldi	r25, 0x08	; 8
    4a26:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4a2a:	1f 92       	push	r1
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	8f 93       	push	r24
    4a30:	88 ee       	ldi	r24, 0xE8	; 232
    4a32:	98 e0       	ldi	r25, 0x08	; 8
    4a34:	9f 93       	push	r25
    4a36:	8f 93       	push	r24
    4a38:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4a3c:	86 ee       	ldi	r24, 0xE6	; 230
    4a3e:	98 e0       	ldi	r25, 0x08	; 8
    4a40:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
    4a44:	8d b7       	in	r24, 0x3d	; 61
    4a46:	9e b7       	in	r25, 0x3e	; 62
    4a48:	08 96       	adiw	r24, 0x08	; 8
    4a4a:	0f b6       	in	r0, 0x3f	; 63
    4a4c:	f8 94       	cli
    4a4e:	9e bf       	out	0x3e, r25	; 62
    4a50:	0f be       	out	0x3f, r0	; 63
    4a52:	8d bf       	out	0x3d, r24	; 61
    4a54:	89 eb       	ldi	r24, 0xB9	; 185
    4a56:	98 e0       	ldi	r25, 0x08	; 8
    4a58:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <xputs>

00004a5c <mousekey_param_inc>:
}

#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4a5c:	83 30       	cpi	r24, 0x03	; 3
    4a5e:	09 f4       	brne	.+2      	; 0x4a62 <mousekey_param_inc+0x6>
    4a60:	59 c0       	rjmp	.+178    	; 0x4b14 <mousekey_param_inc+0xb8>
    4a62:	28 f4       	brcc	.+10     	; 0x4a6e <mousekey_param_inc+0x12>
    4a64:	81 30       	cpi	r24, 0x01	; 1
    4a66:	61 f0       	breq	.+24     	; 0x4a80 <mousekey_param_inc+0x24>
    4a68:	82 30       	cpi	r24, 0x02	; 2
    4a6a:	79 f1       	breq	.+94     	; 0x4aca <mousekey_param_inc+0x6e>
    4a6c:	08 95       	ret
    4a6e:	85 30       	cpi	r24, 0x05	; 5
    4a70:	09 f4       	brne	.+2      	; 0x4a74 <mousekey_param_inc+0x18>
    4a72:	9a c0       	rjmp	.+308    	; 0x4ba8 <mousekey_param_inc+0x14c>
    4a74:	08 f4       	brcc	.+2      	; 0x4a78 <mousekey_param_inc+0x1c>
    4a76:	73 c0       	rjmp	.+230    	; 0x4b5e <mousekey_param_inc+0x102>
    4a78:	86 30       	cpi	r24, 0x06	; 6
    4a7a:	09 f4       	brne	.+2      	; 0x4a7e <mousekey_param_inc+0x22>
    4a7c:	ba c0       	rjmp	.+372    	; 0x4bf2 <mousekey_param_inc+0x196>
    4a7e:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4a80:	20 91 17 01 	lds	r18, 0x0117
    4a84:	86 2f       	mov	r24, r22
    4a86:	90 e0       	ldi	r25, 0x00	; 0
    4a88:	82 0f       	add	r24, r18
    4a8a:	91 1d       	adc	r25, r1
    4a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    4a8e:	91 05       	cpc	r25, r1
    4a90:	20 f4       	brcc	.+8      	; 0x4a9a <mousekey_param_inc+0x3e>
                mk_delay += inc;
    4a92:	62 0f       	add	r22, r18
    4a94:	60 93 17 01 	sts	0x0117, r22
    4a98:	03 c0       	rjmp	.+6      	; 0x4aa0 <mousekey_param_inc+0x44>
            else
                mk_delay = UINT8_MAX;
    4a9a:	8f ef       	ldi	r24, 0xFF	; 255
    4a9c:	80 93 17 01 	sts	0x0117, r24
            PRINT_SET_VAL(mk_delay);
    4aa0:	85 e9       	ldi	r24, 0x95	; 149
    4aa2:	97 e0       	ldi	r25, 0x07	; 7
    4aa4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4aa8:	80 91 17 01 	lds	r24, 0x0117
    4aac:	1f 92       	push	r1
    4aae:	8f 93       	push	r24
    4ab0:	82 e9       	ldi	r24, 0x92	; 146
    4ab2:	97 e0       	ldi	r25, 0x07	; 7
    4ab4:	9f 93       	push	r25
    4ab6:	8f 93       	push	r24
    4ab8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4abc:	0f 90       	pop	r0
    4abe:	0f 90       	pop	r0
    4ac0:	0f 90       	pop	r0
    4ac2:	0f 90       	pop	r0
    4ac4:	80 e9       	ldi	r24, 0x90	; 144
    4ac6:	97 e0       	ldi	r25, 0x07	; 7
    4ac8:	b8 c0       	rjmp	.+368    	; 0x4c3a <mousekey_param_inc+0x1de>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4aca:	20 91 16 01 	lds	r18, 0x0116
    4ace:	86 2f       	mov	r24, r22
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	82 0f       	add	r24, r18
    4ad4:	91 1d       	adc	r25, r1
    4ad6:	8f 3f       	cpi	r24, 0xFF	; 255
    4ad8:	91 05       	cpc	r25, r1
    4ada:	20 f4       	brcc	.+8      	; 0x4ae4 <mousekey_param_inc+0x88>
                mk_interval += inc;
    4adc:	62 0f       	add	r22, r18
    4ade:	60 93 16 01 	sts	0x0116, r22
    4ae2:	03 c0       	rjmp	.+6      	; 0x4aea <mousekey_param_inc+0x8e>
            else
                mk_interval = UINT8_MAX;
    4ae4:	8f ef       	ldi	r24, 0xFF	; 255
    4ae6:	80 93 16 01 	sts	0x0116, r24
            PRINT_SET_VAL(mk_interval);
    4aea:	81 e8       	ldi	r24, 0x81	; 129
    4aec:	97 e0       	ldi	r25, 0x07	; 7
    4aee:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4af2:	80 91 16 01 	lds	r24, 0x0116
    4af6:	1f 92       	push	r1
    4af8:	8f 93       	push	r24
    4afa:	8e e7       	ldi	r24, 0x7E	; 126
    4afc:	97 e0       	ldi	r25, 0x07	; 7
    4afe:	9f 93       	push	r25
    4b00:	8f 93       	push	r24
    4b02:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4b06:	0f 90       	pop	r0
    4b08:	0f 90       	pop	r0
    4b0a:	0f 90       	pop	r0
    4b0c:	0f 90       	pop	r0
    4b0e:	8c e7       	ldi	r24, 0x7C	; 124
    4b10:	97 e0       	ldi	r25, 0x07	; 7
    4b12:	93 c0       	rjmp	.+294    	; 0x4c3a <mousekey_param_inc+0x1de>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4b14:	20 91 15 01 	lds	r18, 0x0115
    4b18:	86 2f       	mov	r24, r22
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	82 0f       	add	r24, r18
    4b1e:	91 1d       	adc	r25, r1
    4b20:	8f 3f       	cpi	r24, 0xFF	; 255
    4b22:	91 05       	cpc	r25, r1
    4b24:	20 f4       	brcc	.+8      	; 0x4b2e <mousekey_param_inc+0xd2>
                mk_max_speed += inc;
    4b26:	62 0f       	add	r22, r18
    4b28:	60 93 15 01 	sts	0x0115, r22
    4b2c:	03 c0       	rjmp	.+6      	; 0x4b34 <mousekey_param_inc+0xd8>
            else
                mk_max_speed = UINT8_MAX;
    4b2e:	8f ef       	ldi	r24, 0xFF	; 255
    4b30:	80 93 15 01 	sts	0x0115, r24
            PRINT_SET_VAL(mk_max_speed);
    4b34:	8c e6       	ldi	r24, 0x6C	; 108
    4b36:	97 e0       	ldi	r25, 0x07	; 7
    4b38:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4b3c:	80 91 15 01 	lds	r24, 0x0115
    4b40:	1f 92       	push	r1
    4b42:	8f 93       	push	r24
    4b44:	89 e6       	ldi	r24, 0x69	; 105
    4b46:	97 e0       	ldi	r25, 0x07	; 7
    4b48:	9f 93       	push	r25
    4b4a:	8f 93       	push	r24
    4b4c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4b50:	0f 90       	pop	r0
    4b52:	0f 90       	pop	r0
    4b54:	0f 90       	pop	r0
    4b56:	0f 90       	pop	r0
    4b58:	87 e6       	ldi	r24, 0x67	; 103
    4b5a:	97 e0       	ldi	r25, 0x07	; 7
    4b5c:	6e c0       	rjmp	.+220    	; 0x4c3a <mousekey_param_inc+0x1de>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4b5e:	20 91 14 01 	lds	r18, 0x0114
    4b62:	86 2f       	mov	r24, r22
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	82 0f       	add	r24, r18
    4b68:	91 1d       	adc	r25, r1
    4b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    4b6c:	91 05       	cpc	r25, r1
    4b6e:	20 f4       	brcc	.+8      	; 0x4b78 <mousekey_param_inc+0x11c>
                mk_time_to_max += inc;
    4b70:	62 0f       	add	r22, r18
    4b72:	60 93 14 01 	sts	0x0114, r22
    4b76:	03 c0       	rjmp	.+6      	; 0x4b7e <mousekey_param_inc+0x122>
            else
                mk_time_to_max = UINT8_MAX;
    4b78:	8f ef       	ldi	r24, 0xFF	; 255
    4b7a:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_time_to_max);
    4b7e:	85 e5       	ldi	r24, 0x55	; 85
    4b80:	97 e0       	ldi	r25, 0x07	; 7
    4b82:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4b86:	80 91 14 01 	lds	r24, 0x0114
    4b8a:	1f 92       	push	r1
    4b8c:	8f 93       	push	r24
    4b8e:	82 e5       	ldi	r24, 0x52	; 82
    4b90:	97 e0       	ldi	r25, 0x07	; 7
    4b92:	9f 93       	push	r25
    4b94:	8f 93       	push	r24
    4b96:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4b9a:	0f 90       	pop	r0
    4b9c:	0f 90       	pop	r0
    4b9e:	0f 90       	pop	r0
    4ba0:	0f 90       	pop	r0
    4ba2:	80 e5       	ldi	r24, 0x50	; 80
    4ba4:	97 e0       	ldi	r25, 0x07	; 7
    4ba6:	49 c0       	rjmp	.+146    	; 0x4c3a <mousekey_param_inc+0x1de>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4ba8:	20 91 13 01 	lds	r18, 0x0113
    4bac:	86 2f       	mov	r24, r22
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	82 0f       	add	r24, r18
    4bb2:	91 1d       	adc	r25, r1
    4bb4:	8f 3f       	cpi	r24, 0xFF	; 255
    4bb6:	91 05       	cpc	r25, r1
    4bb8:	20 f4       	brcc	.+8      	; 0x4bc2 <mousekey_param_inc+0x166>
                mk_wheel_max_speed += inc;
    4bba:	62 0f       	add	r22, r18
    4bbc:	60 93 13 01 	sts	0x0113, r22
    4bc0:	03 c0       	rjmp	.+6      	; 0x4bc8 <mousekey_param_inc+0x16c>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4bc2:	8f ef       	ldi	r24, 0xFF	; 255
    4bc4:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4bc8:	8a e3       	ldi	r24, 0x3A	; 58
    4bca:	97 e0       	ldi	r25, 0x07	; 7
    4bcc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4bd0:	80 91 13 01 	lds	r24, 0x0113
    4bd4:	1f 92       	push	r1
    4bd6:	8f 93       	push	r24
    4bd8:	87 e3       	ldi	r24, 0x37	; 55
    4bda:	97 e0       	ldi	r25, 0x07	; 7
    4bdc:	9f 93       	push	r25
    4bde:	8f 93       	push	r24
    4be0:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4be4:	0f 90       	pop	r0
    4be6:	0f 90       	pop	r0
    4be8:	0f 90       	pop	r0
    4bea:	0f 90       	pop	r0
    4bec:	85 e3       	ldi	r24, 0x35	; 53
    4bee:	97 e0       	ldi	r25, 0x07	; 7
    4bf0:	24 c0       	rjmp	.+72     	; 0x4c3a <mousekey_param_inc+0x1de>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4bf2:	20 91 12 01 	lds	r18, 0x0112
    4bf6:	86 2f       	mov	r24, r22
    4bf8:	90 e0       	ldi	r25, 0x00	; 0
    4bfa:	82 0f       	add	r24, r18
    4bfc:	91 1d       	adc	r25, r1
    4bfe:	8f 3f       	cpi	r24, 0xFF	; 255
    4c00:	91 05       	cpc	r25, r1
    4c02:	20 f4       	brcc	.+8      	; 0x4c0c <mousekey_param_inc+0x1b0>
                mk_wheel_time_to_max += inc;
    4c04:	62 0f       	add	r22, r18
    4c06:	60 93 12 01 	sts	0x0112, r22
    4c0a:	03 c0       	rjmp	.+6      	; 0x4c12 <mousekey_param_inc+0x1b6>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4c0c:	8f ef       	ldi	r24, 0xFF	; 255
    4c0e:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4c12:	8d e1       	ldi	r24, 0x1D	; 29
    4c14:	97 e0       	ldi	r25, 0x07	; 7
    4c16:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4c1a:	80 91 12 01 	lds	r24, 0x0112
    4c1e:	1f 92       	push	r1
    4c20:	8f 93       	push	r24
    4c22:	8a e1       	ldi	r24, 0x1A	; 26
    4c24:	97 e0       	ldi	r25, 0x07	; 7
    4c26:	9f 93       	push	r25
    4c28:	8f 93       	push	r24
    4c2a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4c2e:	0f 90       	pop	r0
    4c30:	0f 90       	pop	r0
    4c32:	0f 90       	pop	r0
    4c34:	0f 90       	pop	r0
    4c36:	88 e1       	ldi	r24, 0x18	; 24
    4c38:	97 e0       	ldi	r25, 0x07	; 7
    4c3a:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <xputs>

00004c3e <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4c3e:	83 30       	cpi	r24, 0x03	; 3
    4c40:	09 f4       	brne	.+2      	; 0x4c44 <mousekey_param_dec+0x6>
    4c42:	4d c0       	rjmp	.+154    	; 0x4cde <mousekey_param_dec+0xa0>
    4c44:	28 f4       	brcc	.+10     	; 0x4c50 <mousekey_param_dec+0x12>
    4c46:	81 30       	cpi	r24, 0x01	; 1
    4c48:	61 f0       	breq	.+24     	; 0x4c62 <mousekey_param_dec+0x24>
    4c4a:	82 30       	cpi	r24, 0x02	; 2
    4c4c:	49 f1       	breq	.+82     	; 0x4ca0 <mousekey_param_dec+0x62>
    4c4e:	08 95       	ret
    4c50:	85 30       	cpi	r24, 0x05	; 5
    4c52:	09 f4       	brne	.+2      	; 0x4c56 <mousekey_param_dec+0x18>
    4c54:	82 c0       	rjmp	.+260    	; 0x4d5a <mousekey_param_dec+0x11c>
    4c56:	08 f4       	brcc	.+2      	; 0x4c5a <mousekey_param_dec+0x1c>
    4c58:	61 c0       	rjmp	.+194    	; 0x4d1c <mousekey_param_dec+0xde>
    4c5a:	86 30       	cpi	r24, 0x06	; 6
    4c5c:	09 f4       	brne	.+2      	; 0x4c60 <mousekey_param_dec+0x22>
    4c5e:	9c c0       	rjmp	.+312    	; 0x4d98 <mousekey_param_dec+0x15a>
    4c60:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4c62:	80 91 17 01 	lds	r24, 0x0117
    4c66:	68 17       	cp	r22, r24
    4c68:	20 f4       	brcc	.+8      	; 0x4c72 <mousekey_param_dec+0x34>
                mk_delay -= dec;
    4c6a:	86 1b       	sub	r24, r22
    4c6c:	80 93 17 01 	sts	0x0117, r24
    4c70:	02 c0       	rjmp	.+4      	; 0x4c76 <mousekey_param_dec+0x38>
            else
                mk_delay = 0;
    4c72:	10 92 17 01 	sts	0x0117, r1
            PRINT_SET_VAL(mk_delay);
    4c76:	8c e0       	ldi	r24, 0x0C	; 12
    4c78:	97 e0       	ldi	r25, 0x07	; 7
    4c7a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4c7e:	80 91 17 01 	lds	r24, 0x0117
    4c82:	1f 92       	push	r1
    4c84:	8f 93       	push	r24
    4c86:	89 e0       	ldi	r24, 0x09	; 9
    4c88:	97 e0       	ldi	r25, 0x07	; 7
    4c8a:	9f 93       	push	r25
    4c8c:	8f 93       	push	r24
    4c8e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4c92:	0f 90       	pop	r0
    4c94:	0f 90       	pop	r0
    4c96:	0f 90       	pop	r0
    4c98:	0f 90       	pop	r0
    4c9a:	87 e0       	ldi	r24, 0x07	; 7
    4c9c:	97 e0       	ldi	r25, 0x07	; 7
    4c9e:	9a c0       	rjmp	.+308    	; 0x4dd4 <mousekey_param_dec+0x196>
            break;
        case 2:
            if (mk_interval > dec)
    4ca0:	80 91 16 01 	lds	r24, 0x0116
    4ca4:	68 17       	cp	r22, r24
    4ca6:	20 f4       	brcc	.+8      	; 0x4cb0 <mousekey_param_dec+0x72>
                mk_interval -= dec;
    4ca8:	86 1b       	sub	r24, r22
    4caa:	80 93 16 01 	sts	0x0116, r24
    4cae:	02 c0       	rjmp	.+4      	; 0x4cb4 <mousekey_param_dec+0x76>
            else
                mk_interval = 0;
    4cb0:	10 92 16 01 	sts	0x0116, r1
            PRINT_SET_VAL(mk_interval);
    4cb4:	88 ef       	ldi	r24, 0xF8	; 248
    4cb6:	96 e0       	ldi	r25, 0x06	; 6
    4cb8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4cbc:	80 91 16 01 	lds	r24, 0x0116
    4cc0:	1f 92       	push	r1
    4cc2:	8f 93       	push	r24
    4cc4:	85 ef       	ldi	r24, 0xF5	; 245
    4cc6:	96 e0       	ldi	r25, 0x06	; 6
    4cc8:	9f 93       	push	r25
    4cca:	8f 93       	push	r24
    4ccc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4cd0:	0f 90       	pop	r0
    4cd2:	0f 90       	pop	r0
    4cd4:	0f 90       	pop	r0
    4cd6:	0f 90       	pop	r0
    4cd8:	83 ef       	ldi	r24, 0xF3	; 243
    4cda:	96 e0       	ldi	r25, 0x06	; 6
    4cdc:	7b c0       	rjmp	.+246    	; 0x4dd4 <mousekey_param_dec+0x196>
            break;
        case 3:
            if (mk_max_speed > dec)
    4cde:	80 91 15 01 	lds	r24, 0x0115
    4ce2:	68 17       	cp	r22, r24
    4ce4:	20 f4       	brcc	.+8      	; 0x4cee <mousekey_param_dec+0xb0>
                mk_max_speed -= dec;
    4ce6:	86 1b       	sub	r24, r22
    4ce8:	80 93 15 01 	sts	0x0115, r24
    4cec:	02 c0       	rjmp	.+4      	; 0x4cf2 <mousekey_param_dec+0xb4>
            else
                mk_max_speed = 0;
    4cee:	10 92 15 01 	sts	0x0115, r1
            PRINT_SET_VAL(mk_max_speed);
    4cf2:	83 ee       	ldi	r24, 0xE3	; 227
    4cf4:	96 e0       	ldi	r25, 0x06	; 6
    4cf6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4cfa:	80 91 15 01 	lds	r24, 0x0115
    4cfe:	1f 92       	push	r1
    4d00:	8f 93       	push	r24
    4d02:	80 ee       	ldi	r24, 0xE0	; 224
    4d04:	96 e0       	ldi	r25, 0x06	; 6
    4d06:	9f 93       	push	r25
    4d08:	8f 93       	push	r24
    4d0a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4d0e:	0f 90       	pop	r0
    4d10:	0f 90       	pop	r0
    4d12:	0f 90       	pop	r0
    4d14:	0f 90       	pop	r0
    4d16:	8e ed       	ldi	r24, 0xDE	; 222
    4d18:	96 e0       	ldi	r25, 0x06	; 6
    4d1a:	5c c0       	rjmp	.+184    	; 0x4dd4 <mousekey_param_dec+0x196>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4d1c:	80 91 14 01 	lds	r24, 0x0114
    4d20:	68 17       	cp	r22, r24
    4d22:	20 f4       	brcc	.+8      	; 0x4d2c <mousekey_param_dec+0xee>
                mk_time_to_max -= dec;
    4d24:	86 1b       	sub	r24, r22
    4d26:	80 93 14 01 	sts	0x0114, r24
    4d2a:	02 c0       	rjmp	.+4      	; 0x4d30 <mousekey_param_dec+0xf2>
            else
                mk_time_to_max = 0;
    4d2c:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_time_to_max);
    4d30:	8c ec       	ldi	r24, 0xCC	; 204
    4d32:	96 e0       	ldi	r25, 0x06	; 6
    4d34:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4d38:	80 91 14 01 	lds	r24, 0x0114
    4d3c:	1f 92       	push	r1
    4d3e:	8f 93       	push	r24
    4d40:	89 ec       	ldi	r24, 0xC9	; 201
    4d42:	96 e0       	ldi	r25, 0x06	; 6
    4d44:	9f 93       	push	r25
    4d46:	8f 93       	push	r24
    4d48:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4d4c:	0f 90       	pop	r0
    4d4e:	0f 90       	pop	r0
    4d50:	0f 90       	pop	r0
    4d52:	0f 90       	pop	r0
    4d54:	87 ec       	ldi	r24, 0xC7	; 199
    4d56:	96 e0       	ldi	r25, 0x06	; 6
    4d58:	3d c0       	rjmp	.+122    	; 0x4dd4 <mousekey_param_dec+0x196>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4d5a:	80 91 13 01 	lds	r24, 0x0113
    4d5e:	68 17       	cp	r22, r24
    4d60:	20 f4       	brcc	.+8      	; 0x4d6a <mousekey_param_dec+0x12c>
                mk_wheel_max_speed -= dec;
    4d62:	86 1b       	sub	r24, r22
    4d64:	80 93 13 01 	sts	0x0113, r24
    4d68:	02 c0       	rjmp	.+4      	; 0x4d6e <mousekey_param_dec+0x130>
            else
                mk_wheel_max_speed = 0;
    4d6a:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4d6e:	81 eb       	ldi	r24, 0xB1	; 177
    4d70:	96 e0       	ldi	r25, 0x06	; 6
    4d72:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4d76:	80 91 13 01 	lds	r24, 0x0113
    4d7a:	1f 92       	push	r1
    4d7c:	8f 93       	push	r24
    4d7e:	8e ea       	ldi	r24, 0xAE	; 174
    4d80:	96 e0       	ldi	r25, 0x06	; 6
    4d82:	9f 93       	push	r25
    4d84:	8f 93       	push	r24
    4d86:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4d8a:	0f 90       	pop	r0
    4d8c:	0f 90       	pop	r0
    4d8e:	0f 90       	pop	r0
    4d90:	0f 90       	pop	r0
    4d92:	8c ea       	ldi	r24, 0xAC	; 172
    4d94:	96 e0       	ldi	r25, 0x06	; 6
    4d96:	1e c0       	rjmp	.+60     	; 0x4dd4 <mousekey_param_dec+0x196>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4d98:	80 91 12 01 	lds	r24, 0x0112
    4d9c:	68 17       	cp	r22, r24
    4d9e:	20 f4       	brcc	.+8      	; 0x4da8 <mousekey_param_dec+0x16a>
                mk_wheel_time_to_max -= dec;
    4da0:	86 1b       	sub	r24, r22
    4da2:	80 93 12 01 	sts	0x0112, r24
    4da6:	02 c0       	rjmp	.+4      	; 0x4dac <mousekey_param_dec+0x16e>
            else
                mk_wheel_time_to_max = 0;
    4da8:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4dac:	84 e9       	ldi	r24, 0x94	; 148
    4dae:	96 e0       	ldi	r25, 0x06	; 6
    4db0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4db4:	80 91 12 01 	lds	r24, 0x0112
    4db8:	1f 92       	push	r1
    4dba:	8f 93       	push	r24
    4dbc:	81 e9       	ldi	r24, 0x91	; 145
    4dbe:	96 e0       	ldi	r25, 0x06	; 6
    4dc0:	9f 93       	push	r25
    4dc2:	8f 93       	push	r24
    4dc4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4dc8:	0f 90       	pop	r0
    4dca:	0f 90       	pop	r0
    4dcc:	0f 90       	pop	r0
    4dce:	0f 90       	pop	r0
    4dd0:	8f e8       	ldi	r24, 0x8F	; 143
    4dd2:	96 e0       	ldi	r25, 0x06	; 6
    4dd4:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <xputs>

00004dd8 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4dd8:	cf 93       	push	r28
    4dda:	c8 2f       	mov	r28, r24
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    4ddc:	8a e0       	ldi	r24, 0x0A	; 10
    4dde:	9b e0       	ldi	r25, 0x0B	; 11
    4de0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4de4:	60 91 9c 01 	lds	r22, 0x019C
    4de8:	70 91 9d 01 	lds	r23, 0x019D
    4dec:	80 91 9e 01 	lds	r24, 0x019E
    4df0:	90 91 9f 01 	lds	r25, 0x019F
    4df4:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <biton32>
    4df8:	1f 92       	push	r1
    4dfa:	8f 93       	push	r24
    4dfc:	27 e0       	ldi	r18, 0x07	; 7
    4dfe:	3b e0       	ldi	r19, 0x0B	; 11
    4e00:	3f 93       	push	r19
    4e02:	2f 93       	push	r18
    4e04:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    print(" to "); print_dec(layer); print("\n");
    4e08:	82 e0       	ldi	r24, 0x02	; 2
    4e0a:	9b e0       	ldi	r25, 0x0B	; 11
    4e0c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4e10:	1f 92       	push	r1
    4e12:	cf 93       	push	r28
    4e14:	2f ef       	ldi	r18, 0xFF	; 255
    4e16:	3a e0       	ldi	r19, 0x0A	; 10
    4e18:	3f 93       	push	r19
    4e1a:	2f 93       	push	r18
    4e1c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4e20:	8d ef       	ldi	r24, 0xFD	; 253
    4e22:	9a e0       	ldi	r25, 0x0A	; 10
    4e24:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    default_layer_set(1UL<<layer);
    4e28:	61 e0       	ldi	r22, 0x01	; 1
    4e2a:	70 e0       	ldi	r23, 0x00	; 0
    4e2c:	80 e0       	ldi	r24, 0x00	; 0
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	04 c0       	rjmp	.+8      	; 0x4e3a <switch_default_layer+0x62>
    4e32:	66 0f       	add	r22, r22
    4e34:	77 1f       	adc	r23, r23
    4e36:	88 1f       	adc	r24, r24
    4e38:	99 1f       	adc	r25, r25
    4e3a:	ca 95       	dec	r28
    4e3c:	d2 f7       	brpl	.-12     	; 0x4e32 <switch_default_layer+0x5a>
    4e3e:	0e 94 9a 1b 	call	0x3734	; 0x3734 <default_layer_set>
    clear_keyboard();
    4e42:	8d b7       	in	r24, 0x3d	; 61
    4e44:	9e b7       	in	r25, 0x3e	; 62
    4e46:	08 96       	adiw	r24, 0x08	; 8
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	f8 94       	cli
    4e4c:	9e bf       	out	0x3e, r25	; 62
    4e4e:	0f be       	out	0x3f, r0	; 63
    4e50:	8d bf       	out	0x3d, r24	; 61
}
    4e52:	cf 91       	pop	r28
static void switch_default_layer(uint8_t layer)
{
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    print(" to "); print_dec(layer); print("\n");
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4e54:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <clear_keyboard>

00004e58 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4e58:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    4e5a:	48 2f       	mov	r20, r24
    4e5c:	50 e0       	ldi	r21, 0x00	; 0
    4e5e:	fa 01       	movw	r30, r20
    4e60:	36 97       	sbiw	r30, 0x06	; 6
    4e62:	e3 34       	cpi	r30, 0x43	; 67
    4e64:	f1 05       	cpc	r31, r1
    4e66:	08 f0       	brcs	.+2      	; 0x4e6a <command_common+0x12>
    4e68:	f1 c2       	rjmp	.+1506   	; 0x544c <command_common+0x5f4>
    4e6a:	ea 59       	subi	r30, 0x9A	; 154
    4e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6e:	0c 94 3f 2d 	jmp	0x5a7e	; 0x5a7e <__tablejump2__>
#ifdef SLEEP_LED_ENABLE
        case KC_Z:
            // test breathing sleep LED
            print("Sleep LED test\n");
    4e72:	80 eb       	ldi	r24, 0xB0	; 176
    4e74:	91 e1       	ldi	r25, 0x11	; 17
    4e76:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            sleep_led_toggle();
    4e7a:	0e 94 c3 2b 	call	0x5786	; 0x5786 <sleep_led_toggle>
            led_set(host_keyboard_leds());
    4e7e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    4e82:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <led_set>
    4e86:	43 c1       	rjmp	.+646    	; 0x510e <command_common+0x2b6>
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4e88:	85 ea       	ldi	r24, 0xA5	; 165
    4e8a:	91 e1       	ldi	r25, 0x11	; 17
    4e8c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4e90:	82 e8       	ldi	r24, 0x82	; 130
    4e92:	9e e0       	ldi	r25, 0x0E	; 14
    4e94:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4e98:	0e 94 02 22 	call	0x4404	; 0x4404 <eeconfig_read_default_layer>
    4e9c:	1f 92       	push	r1
    4e9e:	8f 93       	push	r24
    4ea0:	8f e7       	ldi	r24, 0x7F	; 127
    4ea2:	9e e0       	ldi	r25, 0x0E	; 14
    4ea4:	9f 93       	push	r25
    4ea6:	8f 93       	push	r24
    4ea8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4eac:	8d e7       	ldi	r24, 0x7D	; 125
    4eae:	9e e0       	ldi	r25, 0x0E	; 14
    4eb0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4eb4:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <eeconfig_read_debug>
    4eb8:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4eba:	8a e6       	ldi	r24, 0x6A	; 106
    4ebc:	9e e0       	ldi	r25, 0x0E	; 14
    4ebe:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4ec2:	1f 92       	push	r1
    4ec4:	cf 93       	push	r28
    4ec6:	25 e6       	ldi	r18, 0x65	; 101
    4ec8:	3e e0       	ldi	r19, 0x0E	; 14
    4eca:	3f 93       	push	r19
    4ecc:	2f 93       	push	r18
    4ece:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4ed2:	83 e6       	ldi	r24, 0x63	; 99
    4ed4:	9e e0       	ldi	r25, 0x0E	; 14
    4ed6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4eda:	89 e5       	ldi	r24, 0x59	; 89
    4edc:	9e e0       	ldi	r25, 0x0E	; 14
    4ede:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4ee2:	8c 2f       	mov	r24, r28
    4ee4:	81 70       	andi	r24, 0x01	; 1
    4ee6:	1f 92       	push	r1
    4ee8:	8f 93       	push	r24
    4eea:	26 e5       	ldi	r18, 0x56	; 86
    4eec:	3e e0       	ldi	r19, 0x0E	; 14
    4eee:	3f 93       	push	r19
    4ef0:	2f 93       	push	r18
    4ef2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4ef6:	84 e5       	ldi	r24, 0x54	; 84
    4ef8:	9e e0       	ldi	r25, 0x0E	; 14
    4efa:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4efe:	8a e4       	ldi	r24, 0x4A	; 74
    4f00:	9e e0       	ldi	r25, 0x0E	; 14
    4f02:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4f06:	c1 fb       	bst	r28, 1
    4f08:	88 27       	eor	r24, r24
    4f0a:	80 f9       	bld	r24, 0
    4f0c:	1f 92       	push	r1
    4f0e:	8f 93       	push	r24
    4f10:	27 e4       	ldi	r18, 0x47	; 71
    4f12:	3e e0       	ldi	r19, 0x0E	; 14
    4f14:	3f 93       	push	r19
    4f16:	2f 93       	push	r18
    4f18:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4f1c:	85 e4       	ldi	r24, 0x45	; 69
    4f1e:	9e e0       	ldi	r25, 0x0E	; 14
    4f20:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4f24:	89 e3       	ldi	r24, 0x39	; 57
    4f26:	9e e0       	ldi	r25, 0x0E	; 14
    4f28:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4f2c:	c2 fb       	bst	r28, 2
    4f2e:	88 27       	eor	r24, r24
    4f30:	80 f9       	bld	r24, 0
    4f32:	1f 92       	push	r1
    4f34:	8f 93       	push	r24
    4f36:	26 e3       	ldi	r18, 0x36	; 54
    4f38:	3e e0       	ldi	r19, 0x0E	; 14
    4f3a:	3f 93       	push	r19
    4f3c:	2f 93       	push	r18
    4f3e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4f42:	84 e3       	ldi	r24, 0x34	; 52
    4f44:	9e e0       	ldi	r25, 0x0E	; 14
    4f46:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4f4a:	8b e2       	ldi	r24, 0x2B	; 43
    4f4c:	9e e0       	ldi	r25, 0x0E	; 14
    4f4e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4f52:	c3 fb       	bst	r28, 3
    4f54:	cc 27       	eor	r28, r28
    4f56:	c0 f9       	bld	r28, 0
    4f58:	1f 92       	push	r1
    4f5a:	cf 93       	push	r28
    4f5c:	88 e2       	ldi	r24, 0x28	; 40
    4f5e:	9e e0       	ldi	r25, 0x0E	; 14
    4f60:	9f 93       	push	r25
    4f62:	8f 93       	push	r24
    4f64:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4f68:	86 e2       	ldi	r24, 0x26	; 38
    4f6a:	9e e0       	ldi	r25, 0x0E	; 14
    4f6c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4f70:	0e 94 0b 22 	call	0x4416	; 0x4416 <eeconfig_read_keymap>
    4f74:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4f76:	82 e1       	ldi	r24, 0x12	; 18
    4f78:	9e e0       	ldi	r25, 0x0E	; 14
    4f7a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4f7e:	1f 92       	push	r1
    4f80:	cf 93       	push	r28
    4f82:	2d e0       	ldi	r18, 0x0D	; 13
    4f84:	3e e0       	ldi	r19, 0x0E	; 14
    4f86:	3f 93       	push	r19
    4f88:	2f 93       	push	r18
    4f8a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4f8e:	8b e0       	ldi	r24, 0x0B	; 11
    4f90:	9e e0       	ldi	r25, 0x0E	; 14
    4f92:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4f96:	82 ef       	ldi	r24, 0xF2	; 242
    4f98:	9d e0       	ldi	r25, 0x0D	; 13
    4f9a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4f9e:	8c 2f       	mov	r24, r28
    4fa0:	81 70       	andi	r24, 0x01	; 1
    4fa2:	1f 92       	push	r1
    4fa4:	8f 93       	push	r24
    4fa6:	2f ee       	ldi	r18, 0xEF	; 239
    4fa8:	3d e0       	ldi	r19, 0x0D	; 13
    4faa:	3f 93       	push	r19
    4fac:	2f 93       	push	r18
    4fae:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4fb2:	8d b7       	in	r24, 0x3d	; 61
    4fb4:	9e b7       	in	r25, 0x3e	; 62
    4fb6:	80 96       	adiw	r24, 0x20	; 32
    4fb8:	0f b6       	in	r0, 0x3f	; 63
    4fba:	f8 94       	cli
    4fbc:	9e bf       	out	0x3e, r25	; 62
    4fbe:	0f be       	out	0x3f, r0	; 63
    4fc0:	8d bf       	out	0x3d, r24	; 61
    4fc2:	8d ee       	ldi	r24, 0xED	; 237
    4fc4:	9d e0       	ldi	r25, 0x0D	; 13
    4fc6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4fca:	86 ed       	ldi	r24, 0xD6	; 214
    4fcc:	9d e0       	ldi	r25, 0x0D	; 13
    4fce:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4fd2:	c1 fb       	bst	r28, 1
    4fd4:	88 27       	eor	r24, r24
    4fd6:	80 f9       	bld	r24, 0
    4fd8:	1f 92       	push	r1
    4fda:	8f 93       	push	r24
    4fdc:	23 ed       	ldi	r18, 0xD3	; 211
    4fde:	3d e0       	ldi	r19, 0x0D	; 13
    4fe0:	3f 93       	push	r19
    4fe2:	2f 93       	push	r18
    4fe4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    4fe8:	81 ed       	ldi	r24, 0xD1	; 209
    4fea:	9d e0       	ldi	r25, 0x0D	; 13
    4fec:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4ff0:	8f eb       	ldi	r24, 0xBF	; 191
    4ff2:	9d e0       	ldi	r25, 0x0D	; 13
    4ff4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    4ff8:	c2 fb       	bst	r28, 2
    4ffa:	88 27       	eor	r24, r24
    4ffc:	80 f9       	bld	r24, 0
    4ffe:	1f 92       	push	r1
    5000:	8f 93       	push	r24
    5002:	2c eb       	ldi	r18, 0xBC	; 188
    5004:	3d e0       	ldi	r19, 0x0D	; 13
    5006:	3f 93       	push	r19
    5008:	2f 93       	push	r18
    500a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    500e:	8a eb       	ldi	r24, 0xBA	; 186
    5010:	9d e0       	ldi	r25, 0x0D	; 13
    5012:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    5016:	88 ea       	ldi	r24, 0xA8	; 168
    5018:	9d e0       	ldi	r25, 0x0D	; 13
    501a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    501e:	c3 fb       	bst	r28, 3
    5020:	88 27       	eor	r24, r24
    5022:	80 f9       	bld	r24, 0
    5024:	1f 92       	push	r1
    5026:	8f 93       	push	r24
    5028:	25 ea       	ldi	r18, 0xA5	; 165
    502a:	3d e0       	ldi	r19, 0x0D	; 13
    502c:	3f 93       	push	r19
    502e:	2f 93       	push	r18
    5030:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    5034:	83 ea       	ldi	r24, 0xA3	; 163
    5036:	9d e0       	ldi	r25, 0x0D	; 13
    5038:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    503c:	89 e9       	ldi	r24, 0x99	; 153
    503e:	9d e0       	ldi	r25, 0x0D	; 13
    5040:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    5044:	c4 fb       	bst	r28, 4
    5046:	88 27       	eor	r24, r24
    5048:	80 f9       	bld	r24, 0
    504a:	1f 92       	push	r1
    504c:	8f 93       	push	r24
    504e:	26 e9       	ldi	r18, 0x96	; 150
    5050:	3d e0       	ldi	r19, 0x0D	; 13
    5052:	3f 93       	push	r19
    5054:	2f 93       	push	r18
    5056:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    505a:	84 e9       	ldi	r24, 0x94	; 148
    505c:	9d e0       	ldi	r25, 0x0D	; 13
    505e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    5062:	82 e8       	ldi	r24, 0x82	; 130
    5064:	9d e0       	ldi	r25, 0x0D	; 13
    5066:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    506a:	c5 fb       	bst	r28, 5
    506c:	88 27       	eor	r24, r24
    506e:	80 f9       	bld	r24, 0
    5070:	1f 92       	push	r1
    5072:	8f 93       	push	r24
    5074:	2f e7       	ldi	r18, 0x7F	; 127
    5076:	3d e0       	ldi	r19, 0x0D	; 13
    5078:	3f 93       	push	r19
    507a:	2f 93       	push	r18
    507c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    5080:	8d e7       	ldi	r24, 0x7D	; 125
    5082:	9d e0       	ldi	r25, 0x0D	; 13
    5084:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    5088:	81 e6       	ldi	r24, 0x61	; 97
    508a:	9d e0       	ldi	r25, 0x0D	; 13
    508c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    5090:	c6 fb       	bst	r28, 6
    5092:	88 27       	eor	r24, r24
    5094:	80 f9       	bld	r24, 0
    5096:	1f 92       	push	r1
    5098:	8f 93       	push	r24
    509a:	2e e5       	ldi	r18, 0x5E	; 94
    509c:	3d e0       	ldi	r19, 0x0D	; 13
    509e:	3f 93       	push	r19
    50a0:	2f 93       	push	r18
    50a2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    50a6:	8c e5       	ldi	r24, 0x5C	; 92
    50a8:	9d e0       	ldi	r25, 0x0D	; 13
    50aa:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    50ae:	84 e5       	ldi	r24, 0x54	; 84
    50b0:	9d e0       	ldi	r25, 0x0D	; 13
    50b2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    50b6:	c7 fb       	bst	r28, 7
    50b8:	cc 27       	eor	r28, r28
    50ba:	c0 f9       	bld	r28, 0
    50bc:	1f 92       	push	r1
    50be:	cf 93       	push	r28
    50c0:	81 e5       	ldi	r24, 0x51	; 81
    50c2:	9d e0       	ldi	r25, 0x0D	; 13
    50c4:	9f 93       	push	r25
    50c6:	8f 93       	push	r24
    50c8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    50cc:	8f e4       	ldi	r24, 0x4F	; 79
    50ce:	9d e0       	ldi	r25, 0x0D	; 13
    50d0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    50d4:	8d b7       	in	r24, 0x3d	; 61
    50d6:	9e b7       	in	r25, 0x3e	; 62
    50d8:	4c 96       	adiw	r24, 0x1c	; 28
    50da:	0f b6       	in	r0, 0x3f	; 63
    50dc:	f8 94       	cli
    50de:	9e bf       	out	0x3e, r25	; 62
    50e0:	0f be       	out	0x3f, r0	; 63
    50e2:	8d bf       	out	0x3d, r24	; 61
    50e4:	14 c0       	rjmp	.+40     	; 0x510e <command_common+0x2b6>
            print("eeconfig:\n");
            print_eeconfig();
            break;
#endif
        case KC_CAPSLOCK:
            if (host_get_driver()) {
    50e6:	0e 94 dd 11 	call	0x23ba	; 0x23ba <host_get_driver>
    50ea:	89 2b       	or	r24, r25
    50ec:	91 f0       	breq	.+36     	; 0x5112 <command_common+0x2ba>
                host_driver = host_get_driver();
    50ee:	0e 94 dd 11 	call	0x23ba	; 0x23ba <host_get_driver>
    50f2:	90 93 c6 01 	sts	0x01C6, r25
    50f6:	80 93 c5 01 	sts	0x01C5, r24
                clear_keyboard();
    50fa:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <clear_keyboard>
                host_set_driver(0);
    50fe:	80 e0       	ldi	r24, 0x00	; 0
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <host_set_driver>
                print("Locked.\n");
    5106:	8c e9       	ldi	r24, 0x9C	; 156
    5108:	91 e1       	ldi	r25, 0x11	; 17
    510a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    510e:	c1 e0       	ldi	r28, 0x01	; 1
    5110:	a2 c1       	rjmp	.+836    	; 0x5456 <command_common+0x5fe>
                host_driver = host_get_driver();
                clear_keyboard();
                host_set_driver(0);
                print("Locked.\n");
            } else {
                host_set_driver(host_driver);
    5112:	80 91 c5 01 	lds	r24, 0x01C5
    5116:	90 91 c6 01 	lds	r25, 0x01C6
    511a:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <host_set_driver>
                print("Unlocked.\n");
    511e:	81 e9       	ldi	r24, 0x91	; 145
    5120:	91 e1       	ldi	r25, 0x11	; 17
    5122:	f3 cf       	rjmp	.-26     	; 0x510a <command_common+0x2b2>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\n----- Command Help -----\n");
    5124:	83 e3       	ldi	r24, 0x33	; 51
    5126:	9d e0       	ldi	r25, 0x0D	; 13
    5128:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("c:	enter console mode\n");
    512c:	8c e1       	ldi	r24, 0x1C	; 28
    512e:	9d e0       	ldi	r25, 0x0D	; 13
    5130:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("d:	toggle debug enable\n");
    5134:	84 e0       	ldi	r24, 0x04	; 4
    5136:	9d e0       	ldi	r25, 0x0D	; 13
    5138:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("x:	toggle matrix debug\n");
    513c:	8c ee       	ldi	r24, 0xEC	; 236
    513e:	9c e0       	ldi	r25, 0x0C	; 12
    5140:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("k:	toggle keyboard debug\n");
    5144:	82 ed       	ldi	r24, 0xD2	; 210
    5146:	9c e0       	ldi	r25, 0x0C	; 12
    5148:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("m:	toggle mouse debug\n");
    514c:	8b eb       	ldi	r24, 0xBB	; 187
    514e:	9c e0       	ldi	r25, 0x0C	; 12
    5150:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
#ifdef SLEEP_LED_ENABLE
    print("z:	toggle sleep LED test\n");
    5154:	81 ea       	ldi	r24, 0xA1	; 161
    5156:	9c e0       	ldi	r25, 0x0C	; 12
    5158:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
#endif
    print("v:	print device version & info\n");
    515c:	81 e8       	ldi	r24, 0x81	; 129
    515e:	9c e0       	ldi	r25, 0x0C	; 12
    5160:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("t:	print timer count\n");
    5164:	8b e6       	ldi	r24, 0x6B	; 107
    5166:	9c e0       	ldi	r25, 0x0C	; 12
    5168:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("s:	print status\n");
    516c:	8a e5       	ldi	r24, 0x5A	; 90
    516e:	9c e0       	ldi	r25, 0x0C	; 12
    5170:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("e:	print eeprom config\n");
    5174:	82 e4       	ldi	r24, 0x42	; 66
    5176:	9c e0       	ldi	r25, 0x0C	; 12
    5178:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
#ifdef NKRO_ENABLE
    print("n:	toggle NKRO\n");
    517c:	82 e3       	ldi	r24, 0x32	; 50
    517e:	9c e0       	ldi	r25, 0x0C	; 12
    5180:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
#endif
    print("0/F10:	switch to Layer0 \n");
    5184:	88 e1       	ldi	r24, 0x18	; 24
    5186:	9c e0       	ldi	r25, 0x0C	; 12
    5188:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("1/F1:	switch to Layer1 \n");
    518c:	8f ef       	ldi	r24, 0xFF	; 255
    518e:	9b e0       	ldi	r25, 0x0B	; 11
    5190:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("2/F2:	switch to Layer2 \n");
    5194:	86 ee       	ldi	r24, 0xE6	; 230
    5196:	9b e0       	ldi	r25, 0x0B	; 11
    5198:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("3/F3:	switch to Layer3 \n");
    519c:	8d ec       	ldi	r24, 0xCD	; 205
    519e:	9b e0       	ldi	r25, 0x0B	; 11
    51a0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("4/F4:	switch to Layer4 \n");
    51a4:	84 eb       	ldi	r24, 0xB4	; 180
    51a6:	9b e0       	ldi	r25, 0x0B	; 11
    51a8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("PScr:	power down/remote wake-up\n");
    51ac:	83 e9       	ldi	r24, 0x93	; 147
    51ae:	9b e0       	ldi	r25, 0x0B	; 11
    51b0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("Caps:	Lock Keyboard(Child Proof)\n");
    51b4:	81 e7       	ldi	r24, 0x71	; 113
    51b6:	9b e0       	ldi	r25, 0x0B	; 11
    51b8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("Paus:	jump to bootloader\n");
    51bc:	87 e5       	ldi	r24, 0x57	; 87
    51be:	9b e0       	ldi	r25, 0x0B	; 11
    51c0:	a4 cf       	rjmp	.-184    	; 0x510a <command_common+0x2b2>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    51c2:	80 91 b3 01 	lds	r24, 0x01B3
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    51c6:	81 7f       	andi	r24, 0xF1	; 241
    51c8:	8e 7f       	andi	r24, 0xFE	; 254
    51ca:	80 93 b3 01 	sts	0x01B3, r24
            command_console_help();
    51ce:	0e 94 bc 24 	call	0x4978	; 0x4978 <command_console_help>
            print("\nEnter Console Mode\n");
    51d2:	8c e7       	ldi	r24, 0x7C	; 124
    51d4:	91 e1       	ldi	r25, 0x11	; 17
    51d6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            print("C> ");
    51da:	88 e7       	ldi	r24, 0x78	; 120
    51dc:	91 e1       	ldi	r25, 0x11	; 17
    51de:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            command_state = CONSOLE;
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	80 93 c4 01 	sts	0x01C4, r24
    51e8:	92 cf       	rjmp	.-220    	; 0x510e <command_common+0x2b6>
            break;
        case KC_PAUSE:
            clear_keyboard();
    51ea:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <clear_keyboard>
            print("\n\nJump to bootloader... ");
    51ee:	8f e5       	ldi	r24, 0x5F	; 95
    51f0:	91 e1       	ldi	r25, 0x11	; 17
    51f2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    51f6:	9f ef       	ldi	r25, 0xFF	; 255
    51f8:	23 ed       	ldi	r18, 0xD3	; 211
    51fa:	80 e3       	ldi	r24, 0x30	; 48
    51fc:	91 50       	subi	r25, 0x01	; 1
    51fe:	20 40       	sbci	r18, 0x00	; 0
    5200:	80 40       	sbci	r24, 0x00	; 0
    5202:	e1 f7       	brne	.-8      	; 0x51fc <command_common+0x3a4>
    5204:	00 c0       	rjmp	.+0      	; 0x5206 <command_common+0x3ae>
    5206:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    5208:	0e 94 3b 20 	call	0x4076	; 0x4076 <bootloader_jump>
            print("not supported.\n");
    520c:	8f e4       	ldi	r24, 0x4F	; 79
    520e:	91 e1       	ldi	r25, 0x11	; 17
    5210:	7c cf       	rjmp	.-264    	; 0x510a <command_common+0x2b2>
            break;
        case KC_D:
            if (debug_enable) {
    5212:	80 91 b3 01 	lds	r24, 0x01B3
    5216:	c8 2f       	mov	r28, r24
    5218:	c1 70       	andi	r28, 0x01	; 1
    521a:	80 ff       	sbrs	r24, 0
    521c:	09 c0       	rjmp	.+18     	; 0x5230 <command_common+0x3d8>
                print("\nDEBUG: disabled.\n");
    521e:	8c e3       	ldi	r24, 0x3C	; 60
    5220:	91 e1       	ldi	r25, 0x11	; 17
    5222:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
                debug_matrix   = false;
    5226:	80 91 b3 01 	lds	r24, 0x01B3
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    522a:	81 7f       	andi	r24, 0xF1	; 241
    522c:	8e 7f       	andi	r24, 0xFE	; 254
    522e:	44 c0       	rjmp	.+136    	; 0x52b8 <command_common+0x460>
            } else {
                print("\nDEBUG: enabled.\n");
    5230:	8a e2       	ldi	r24, 0x2A	; 42
    5232:	91 e1       	ldi	r25, 0x11	; 17
    5234:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
                debug_enable   = true;
    5238:	80 91 b3 01 	lds	r24, 0x01B3
    523c:	81 60       	ori	r24, 0x01	; 1
    523e:	80 93 b3 01 	sts	0x01B3, r24
    5242:	65 cf       	rjmp	.-310    	; 0x510e <command_common+0x2b6>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    5244:	80 91 b3 01 	lds	r24, 0x01B3
    5248:	81 fb       	bst	r24, 1
    524a:	cc 27       	eor	r28, r28
    524c:	c0 f9       	bld	r28, 0
    524e:	91 e0       	ldi	r25, 0x01	; 1
    5250:	c9 27       	eor	r28, r25
    5252:	c0 fb       	bst	r28, 0
    5254:	81 f9       	bld	r24, 1
    5256:	80 93 b3 01 	sts	0x01B3, r24
            if (debug_matrix) {
    525a:	cc 23       	and	r28, r28
    525c:	19 f0       	breq	.+6      	; 0x5264 <command_common+0x40c>
                print("\nDEBUG: matrix enabled.\n");
    525e:	81 e1       	ldi	r24, 0x11	; 17
    5260:	91 e1       	ldi	r25, 0x11	; 17
    5262:	25 c0       	rjmp	.+74     	; 0x52ae <command_common+0x456>
                debug_enable = true;
            } else {
                print("\nDEBUG: matrix disabled.\n");
    5264:	87 ef       	ldi	r24, 0xF7	; 247
    5266:	90 e1       	ldi	r25, 0x10	; 16
    5268:	50 cf       	rjmp	.-352    	; 0x510a <command_common+0x2b2>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    526a:	80 91 b3 01 	lds	r24, 0x01B3
    526e:	82 fb       	bst	r24, 2
    5270:	cc 27       	eor	r28, r28
    5272:	c0 f9       	bld	r28, 0
    5274:	91 e0       	ldi	r25, 0x01	; 1
    5276:	c9 27       	eor	r28, r25
    5278:	c0 fb       	bst	r28, 0
    527a:	82 f9       	bld	r24, 2
    527c:	80 93 b3 01 	sts	0x01B3, r24
            if (debug_keyboard) {
    5280:	cc 23       	and	r28, r28
    5282:	19 f0       	breq	.+6      	; 0x528a <command_common+0x432>
                print("\nDEBUG: keyboard enabled.\n");
    5284:	8c ed       	ldi	r24, 0xDC	; 220
    5286:	90 e1       	ldi	r25, 0x10	; 16
    5288:	12 c0       	rjmp	.+36     	; 0x52ae <command_common+0x456>
                debug_enable = true;
            } else {
                print("\nDEBUG: keyboard disabled.\n");
    528a:	80 ec       	ldi	r24, 0xC0	; 192
    528c:	90 e1       	ldi	r25, 0x10	; 16
    528e:	3d cf       	rjmp	.-390    	; 0x510a <command_common+0x2b2>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    5290:	80 91 b3 01 	lds	r24, 0x01B3
    5294:	83 fb       	bst	r24, 3
    5296:	cc 27       	eor	r28, r28
    5298:	c0 f9       	bld	r28, 0
    529a:	91 e0       	ldi	r25, 0x01	; 1
    529c:	c9 27       	eor	r28, r25
    529e:	c0 fb       	bst	r28, 0
    52a0:	83 f9       	bld	r24, 3
    52a2:	80 93 b3 01 	sts	0x01B3, r24
            if (debug_mouse) {
    52a6:	cc 23       	and	r28, r28
    52a8:	51 f0       	breq	.+20     	; 0x52be <command_common+0x466>
                print("\nDEBUG: mouse enabled.\n");
    52aa:	88 ea       	ldi	r24, 0xA8	; 168
    52ac:	90 e1       	ldi	r25, 0x10	; 16
    52ae:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
                debug_enable = true;
    52b2:	80 91 b3 01 	lds	r24, 0x01B3
    52b6:	81 60       	ori	r24, 0x01	; 1
    52b8:	80 93 b3 01 	sts	0x01B3, r24
    52bc:	cc c0       	rjmp	.+408    	; 0x5456 <command_common+0x5fe>
            } else {
                print("\nDEBUG: mouse disabled.\n");
    52be:	8f e8       	ldi	r24, 0x8F	; 143
    52c0:	90 e1       	ldi	r25, 0x10	; 16
    52c2:	23 cf       	rjmp	.-442    	; 0x510a <command_common+0x2b2>
            }
            break;
        case KC_V: // print version & information
            print("\n\n----- Version -----\n");
    52c4:	88 e7       	ldi	r24, 0x78	; 120
    52c6:	90 e1       	ldi	r25, 0x10	; 16
    52c8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    52cc:	8c e4       	ldi	r24, 0x4C	; 76
    52ce:	90 e1       	ldi	r25, 0x10	; 16
    52d0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    52d4:	85 e1       	ldi	r24, 0x15	; 21
    52d6:	90 e1       	ldi	r25, 0x10	; 16
    52d8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    52dc:	88 ee       	ldi	r24, 0xE8	; 232
    52de:	9f e0       	ldi	r25, 0x0F	; 15
    52e0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            /* build options */
            print("OPTIONS:"
    52e4:	84 ea       	ldi	r24, 0xA4	; 164
    52e6:	9f e0       	ldi	r25, 0x0F	; 15
    52e8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    52ec:	86 e7       	ldi	r24, 0x76	; 118
    52ee:	9f e0       	ldi	r25, 0x0F	; 15
    52f0:	0c cf       	rjmp	.-488    	; 0x510a <command_common+0x2b2>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_T: // print timer
            print_val_hex32(timer_count);
    52f2:	80 91 b7 01 	lds	r24, 0x01B7
    52f6:	90 91 b8 01 	lds	r25, 0x01B8
    52fa:	a0 91 b9 01 	lds	r26, 0x01B9
    52fe:	b0 91 ba 01 	lds	r27, 0x01BA
    5302:	bf 93       	push	r27
    5304:	af 93       	push	r26
    5306:	9f 93       	push	r25
    5308:	8f 93       	push	r24
    530a:	82 e6       	ldi	r24, 0x62	; 98
    530c:	9f e0       	ldi	r25, 0x0F	; 15
    530e:	9f 93       	push	r25
    5310:	8f 93       	push	r24
    5312:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
            break;
    5316:	0f 90       	pop	r0
    5318:	0f 90       	pop	r0
    531a:	0f 90       	pop	r0
    531c:	0f 90       	pop	r0
    531e:	0f 90       	pop	r0
    5320:	0f 90       	pop	r0
    5322:	f5 ce       	rjmp	.-534    	; 0x510e <command_common+0x2b6>
        case KC_S:
            print("\n\n----- Status -----\n");
    5324:	8c e4       	ldi	r24, 0x4C	; 76
    5326:	9f e0       	ldi	r25, 0x0F	; 15
    5328:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            print_val_hex8(host_keyboard_leds());
    532c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <host_keyboard_leds>
    5330:	1f 92       	push	r1
    5332:	8f 93       	push	r24
    5334:	82 e3       	ldi	r24, 0x32	; 50
    5336:	9f e0       	ldi	r25, 0x0F	; 15
    5338:	9f 93       	push	r25
    533a:	8f 93       	push	r24
    533c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
            print_val_hex8(keyboard_protocol);
    5340:	80 91 0d 01 	lds	r24, 0x010D
    5344:	1f 92       	push	r1
    5346:	8f 93       	push	r24
    5348:	8b e1       	ldi	r24, 0x1B	; 27
    534a:	9f e0       	ldi	r25, 0x0F	; 15
    534c:	9f 93       	push	r25
    534e:	8f 93       	push	r24
    5350:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
            print_val_hex8(keyboard_idle);
    5354:	80 91 0c 01 	lds	r24, 0x010C
    5358:	1f 92       	push	r1
    535a:	8f 93       	push	r24
    535c:	88 e0       	ldi	r24, 0x08	; 8
    535e:	9f e0       	ldi	r25, 0x0F	; 15
    5360:	9f 93       	push	r25
    5362:	8f 93       	push	r24
    5364:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
#ifdef PROTOCOL_PJRC
            print_val_hex8(UDCON);
    5368:	80 91 e0 00 	lds	r24, 0x00E0
    536c:	1f 92       	push	r1
    536e:	8f 93       	push	r24
    5370:	8d ef       	ldi	r24, 0xFD	; 253
    5372:	9e e0       	ldi	r25, 0x0E	; 14
    5374:	9f 93       	push	r25
    5376:	8f 93       	push	r24
    5378:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
            print_val_hex8(UDIEN);
    537c:	80 91 e2 00 	lds	r24, 0x00E2
    5380:	1f 92       	push	r1
    5382:	8f 93       	push	r24
    5384:	82 ef       	ldi	r24, 0xF2	; 242
    5386:	9e e0       	ldi	r25, 0x0E	; 14
    5388:	9f 93       	push	r25
    538a:	8f 93       	push	r24
    538c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
            print_val_hex8(UDINT);
    5390:	80 91 e1 00 	lds	r24, 0x00E1
    5394:	1f 92       	push	r1
    5396:	8f 93       	push	r24
    5398:	87 ee       	ldi	r24, 0xE7	; 231
    539a:	9e e0       	ldi	r25, 0x0E	; 14
    539c:	9f 93       	push	r25
    539e:	8f 93       	push	r24
    53a0:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
            print_val_hex8(usb_keyboard_leds);
    53a4:	80 91 43 01 	lds	r24, 0x0143
    53a8:	1f 92       	push	r1
    53aa:	8f 93       	push	r24
    53ac:	80 ed       	ldi	r24, 0xD0	; 208
    53ae:	9e e0       	ldi	r25, 0x0E	; 14
    53b0:	9f 93       	push	r25
    53b2:	8f 93       	push	r24
    53b4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
            print_val_hex8(usb_keyboard_idle_count);
    53b8:	80 91 44 01 	lds	r24, 0x0144
    53bc:	1f 92       	push	r1
    53be:	8f 93       	push	r24
    53c0:	83 eb       	ldi	r24, 0xB3	; 179
    53c2:	9e e0       	ldi	r25, 0x0E	; 14
    53c4:	9f 93       	push	r25
    53c6:	8f 93       	push	r24
    53c8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    53cc:	8d b7       	in	r24, 0x3d	; 61
    53ce:	9e b7       	in	r25, 0x3e	; 62
    53d0:	80 96       	adiw	r24, 0x20	; 32
    53d2:	0f b6       	in	r0, 0x3f	; 63
    53d4:	f8 94       	cli
    53d6:	9e bf       	out	0x3e, r25	; 62
    53d8:	0f be       	out	0x3f, r0	; 63
    53da:	8d bf       	out	0x3d, r24	; 61
    53dc:	98 ce       	rjmp	.-720    	; 0x510e <command_common+0x2b6>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    53de:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    53e2:	c0 91 0f 01 	lds	r28, 0x010F
    53e6:	81 e0       	ldi	r24, 0x01	; 1
    53e8:	c8 27       	eor	r28, r24
    53ea:	c0 93 0f 01 	sts	0x010F, r28
            if (keyboard_nkro)
    53ee:	cc 23       	and	r28, r28
    53f0:	29 f0       	breq	.+10     	; 0x53fc <command_common+0x5a4>
                print("NKRO: enabled\n");
    53f2:	84 ea       	ldi	r24, 0xA4	; 164
    53f4:	9e e0       	ldi	r25, 0x0E	; 14
    53f6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    53fa:	2d c0       	rjmp	.+90     	; 0x5456 <command_common+0x5fe>
            else
                print("NKRO: disabled\n");
    53fc:	84 e9       	ldi	r24, 0x94	; 148
    53fe:	9e e0       	ldi	r25, 0x0E	; 14
    5400:	84 ce       	rjmp	.-760    	; 0x510a <command_common+0x2b2>
#endif
#ifdef EXTRAKEY_ENABLE
        case KC_PSCREEN:
            // TODO: Power key should take this feature? otherwise any key during suspend.
#ifdef PROTOCOL_PJRC
            if (suspend && remote_wakeup) {
    5402:	80 91 47 01 	lds	r24, 0x0147
    5406:	88 23       	and	r24, r24
    5408:	39 f0       	breq	.+14     	; 0x5418 <command_common+0x5c0>
    540a:	80 91 48 01 	lds	r24, 0x0148
    540e:	88 23       	and	r24, r24
    5410:	19 f0       	breq	.+6      	; 0x5418 <command_common+0x5c0>
                usb_remote_wakeup();
    5412:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <usb_remote_wakeup>
    5416:	7b ce       	rjmp	.-778    	; 0x510e <command_common+0x2b6>
            } else {
                host_system_send(SYSTEM_POWER_DOWN);
    5418:	81 e8       	ldi	r24, 0x81	; 129
    541a:	90 e0       	ldi	r25, 0x00	; 0
    541c:	0e 94 3e 12 	call	0x247c	; 0x247c <host_system_send>
                host_system_send(0);
    5420:	80 e0       	ldi	r24, 0x00	; 0
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	0e 94 3e 12 	call	0x247c	; 0x247c <host_system_send>
    5428:	9f ef       	ldi	r25, 0xFF	; 255
    542a:	29 e6       	ldi	r18, 0x69	; 105
    542c:	88 e1       	ldi	r24, 0x18	; 24
    542e:	91 50       	subi	r25, 0x01	; 1
    5430:	20 40       	sbci	r18, 0x00	; 0
    5432:	80 40       	sbci	r24, 0x00	; 0
    5434:	e1 f7       	brne	.-8      	; 0x542e <command_common+0x5d6>
    5436:	00 c0       	rjmp	.+0      	; 0x5438 <command_common+0x5e0>
    5438:	00 00       	nop
    543a:	69 ce       	rjmp	.-814    	; 0x510e <command_common+0x2b6>
            break;
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
    543c:	80 e0       	ldi	r24, 0x00	; 0
    543e:	03 c0       	rjmp	.+6      	; 0x5446 <command_common+0x5ee>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    5440:	8d 51       	subi	r24, 0x1D	; 29
    5442:	01 c0       	rjmp	.+2      	; 0x5446 <command_common+0x5ee>
            break;
        case KC_F1 ... KC_F12:
            switch_default_layer((code - KC_F1) + 1);
    5444:	89 53       	subi	r24, 0x39	; 57
    5446:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <switch_default_layer>
    544a:	61 ce       	rjmp	.-830    	; 0x510e <command_common+0x2b6>
            break;
        default:
            print("?");
    544c:	82 e9       	ldi	r24, 0x92	; 146
    544e:	9e e0       	ldi	r25, 0x0E	; 14
    5450:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            return false;
    5454:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    5456:	8c 2f       	mov	r24, r28
    5458:	cf 91       	pop	r28
    545a:	08 95       	ret

0000545c <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    545c:	80 e0       	ldi	r24, 0x00	; 0
    545e:	08 95       	ret

00005460 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    5460:	80 e0       	ldi	r24, 0x00	; 0
    5462:	08 95       	ret

00005464 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5464:	cf 93       	push	r28
    5466:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5468:	80 91 c4 01 	lds	r24, 0x01C4
    546c:	81 30       	cpi	r24, 0x01	; 1
    546e:	81 f0       	breq	.+32     	; 0x5490 <command_proc+0x2c>
    5470:	20 f0       	brcs	.+8      	; 0x547a <command_proc+0x16>
    5472:	82 30       	cpi	r24, 0x02	; 2
    5474:	09 f4       	brne	.+2      	; 0x5478 <command_proc+0x14>
    5476:	52 c0       	rjmp	.+164    	; 0x551c <command_proc+0xb8>
    5478:	60 c1       	rjmp	.+704    	; 0x573a <command_proc+0x2d6>
        case ONESHOT:
            if (!IS_COMMAND())
    547a:	a0 91 10 01 	lds	r26, 0x0110
    547e:	b0 91 11 01 	lds	r27, 0x0111
    5482:	8c 91       	ld	r24, X
    5484:	81 31       	cpi	r24, 0x11	; 17
    5486:	69 f0       	breq	.+26     	; 0x54a2 <command_proc+0x3e>
    5488:	82 32       	cpi	r24, 0x22	; 34
    548a:	09 f0       	breq	.+2      	; 0x548e <command_proc+0x2a>
    548c:	58 c1       	rjmp	.+688    	; 0x573e <command_proc+0x2da>
    548e:	09 c0       	rjmp	.+18     	; 0x54a2 <command_proc+0x3e>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5490:	a0 91 10 01 	lds	r26, 0x0110
    5494:	b0 91 11 01 	lds	r27, 0x0111
    5498:	8c 91       	ld	r24, X
    549a:	81 31       	cpi	r24, 0x11	; 17
    549c:	11 f0       	breq	.+4      	; 0x54a2 <command_proc+0x3e>
    549e:	82 32       	cpi	r24, 0x22	; 34
    54a0:	49 f4       	brne	.+18     	; 0x54b4 <command_proc+0x50>
                return (command_extra(code) || command_common(code));
    54a2:	8c 2f       	mov	r24, r28
    54a4:	0e 94 2e 2a 	call	0x545c	; 0x545c <command_extra>
    54a8:	81 11       	cpse	r24, r1
    54aa:	35 c0       	rjmp	.+106    	; 0x5516 <command_proc+0xb2>
    54ac:	8c 2f       	mov	r24, r28
    54ae:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <command_common>
    54b2:	32 c0       	rjmp	.+100    	; 0x5518 <command_proc+0xb4>
            else
                return (command_console_extra(code) || command_console(code));
    54b4:	8c 2f       	mov	r24, r28
    54b6:	0e 94 30 2a 	call	0x5460	; 0x5460 <command_console_extra>
    54ba:	81 11       	cpse	r24, r1
    54bc:	2c c0       	rjmp	.+88     	; 0x5516 <command_proc+0xb2>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    54be:	c4 31       	cpi	r28, 0x14	; 20
    54c0:	f1 f0       	breq	.+60     	; 0x54fe <command_proc+0x9a>
    54c2:	90 f4       	brcc	.+36     	; 0x54e8 <command_proc+0x84>
    54c4:	cb 30       	cpi	r28, 0x0B	; 11
    54c6:	a1 f0       	breq	.+40     	; 0x54f0 <command_proc+0x8c>
    54c8:	c0 31       	cpi	r28, 0x10	; 16
    54ca:	01 f5       	brne	.+64     	; 0x550c <command_proc+0xa8>
            print("\nQuit Console Mode\n");
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    54cc:	0e 94 c8 24 	call	0x4990	; 0x4990 <mousekey_console_help>
            print("\nEnter Mousekey Console\n");
    54d0:	8c ec       	ldi	r24, 0xCC	; 204
    54d2:	9a e0       	ldi	r25, 0x0A	; 10
    54d4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            print("M0>");
    54d8:	88 ec       	ldi	r24, 0xC8	; 200
    54da:	9a e0       	ldi	r25, 0x0A	; 10
    54dc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            command_state = MOUSEKEY;
    54e0:	82 e0       	ldi	r24, 0x02	; 2
    54e2:	80 93 c4 01 	sts	0x01C4, r24
    54e6:	17 c0       	rjmp	.+46     	; 0x5516 <command_proc+0xb2>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    54e8:	c9 32       	cpi	r28, 0x29	; 41
    54ea:	49 f0       	breq	.+18     	; 0x54fe <command_proc+0x9a>
    54ec:	c8 33       	cpi	r28, 0x38	; 56
    54ee:	71 f4       	brne	.+28     	; 0x550c <command_proc+0xa8>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    54f0:	0e 94 bc 24 	call	0x4978	; 0x4978 <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    54f4:	89 ef       	ldi	r24, 0xF9	; 249
    54f6:	9a e0       	ldi	r25, 0x0A	; 10
    54f8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    54fc:	0c c0       	rjmp	.+24     	; 0x5516 <command_proc+0xb2>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            print("\nQuit Console Mode\n");
    54fe:	85 ee       	ldi	r24, 0xE5	; 229
    5500:	9a e0       	ldi	r25, 0x0A	; 10
    5502:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            command_state = ONESHOT;
    5506:	10 92 c4 01 	sts	0x01C4, r1
    550a:	1b c1       	rjmp	.+566    	; 0x5742 <command_proc+0x2de>
            print("M0>");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    550c:	86 ec       	ldi	r24, 0xC6	; 198
    550e:	9a e0       	ldi	r25, 0x0A	; 10
    5510:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    5514:	16 c1       	rjmp	.+556    	; 0x5742 <command_proc+0x2de>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5516:	81 e0       	ldi	r24, 0x01	; 1
    5518:	81 70       	andi	r24, 0x01	; 1
    551a:	15 c1       	rjmp	.+554    	; 0x5746 <command_proc+0x2e2>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    551c:	c8 32       	cpi	r28, 0x28	; 40
    551e:	20 f5       	brcc	.+72     	; 0x5568 <command_proc+0x104>
    5520:	ce 31       	cpi	r28, 0x1E	; 30
    5522:	08 f0       	brcs	.+2      	; 0x5526 <command_proc+0xc2>
    5524:	bf c0       	rjmp	.+382    	; 0x56a4 <command_proc+0x240>
    5526:	cb 30       	cpi	r28, 0x0B	; 11
    5528:	99 f1       	breq	.+102    	; 0x5590 <command_proc+0x12c>
    552a:	c8 f4       	brcc	.+50     	; 0x555e <command_proc+0xfa>
    552c:	c7 30       	cpi	r28, 0x07	; 7
    552e:	09 f0       	breq	.+2      	; 0x5532 <command_proc+0xce>
    5530:	e7 c0       	rjmp	.+462    	; 0x5700 <command_proc+0x29c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    5532:	8a e0       	ldi	r24, 0x0A	; 10
    5534:	80 93 17 01 	sts	0x0117, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5538:	94 e1       	ldi	r25, 0x14	; 20
    553a:	90 93 16 01 	sts	0x0116, r25
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    553e:	93 e0       	ldi	r25, 0x03	; 3
    5540:	90 93 15 01 	sts	0x0115, r25
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5544:	80 93 14 01 	sts	0x0114, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5548:	88 e0       	ldi	r24, 0x08	; 8
    554a:	80 93 13 01 	sts	0x0113, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    554e:	88 e2       	ldi	r24, 0x28	; 40
    5550:	80 93 12 01 	sts	0x0112, r24
            print("set default values.\n");
    5554:	8e e6       	ldi	r24, 0x6E	; 110
    5556:	98 e0       	ldi	r25, 0x08	; 8
    5558:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    555c:	d6 c0       	rjmp	.+428    	; 0x570a <command_proc+0x2a6>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    555e:	c3 31       	cpi	r28, 0x13	; 19
    5560:	41 f1       	breq	.+80     	; 0x55b2 <command_proc+0x14e>
    5562:	c4 31       	cpi	r28, 0x14	; 20
    5564:	c1 f0       	breq	.+48     	; 0x5596 <command_proc+0x132>
    5566:	cc c0       	rjmp	.+408    	; 0x5700 <command_proc+0x29c>
    5568:	cb 34       	cpi	r28, 0x4B	; 75
    556a:	09 f4       	brne	.+2      	; 0x556e <command_proc+0x10a>
    556c:	be c0       	rjmp	.+380    	; 0x56ea <command_proc+0x286>
    556e:	28 f4       	brcc	.+10     	; 0x557a <command_proc+0x116>
    5570:	c9 32       	cpi	r28, 0x29	; 41
    5572:	89 f0       	breq	.+34     	; 0x5596 <command_proc+0x132>
    5574:	c8 33       	cpi	r28, 0x38	; 56
    5576:	61 f0       	breq	.+24     	; 0x5590 <command_proc+0x12c>
    5578:	c3 c0       	rjmp	.+390    	; 0x5700 <command_proc+0x29c>
    557a:	c1 35       	cpi	r28, 0x51	; 81
    557c:	09 f4       	brne	.+2      	; 0x5580 <command_proc+0x11c>
    557e:	b3 c0       	rjmp	.+358    	; 0x56e6 <command_proc+0x282>
    5580:	c2 35       	cpi	r28, 0x52	; 82
    5582:	09 f4       	brne	.+2      	; 0x5586 <command_proc+0x122>
    5584:	ae c0       	rjmp	.+348    	; 0x56e2 <command_proc+0x27e>
    5586:	ce 34       	cpi	r28, 0x4E	; 78
    5588:	09 f0       	breq	.+2      	; 0x558c <command_proc+0x128>
    558a:	ba c0       	rjmp	.+372    	; 0x5700 <command_proc+0x29c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    558c:	6a e0       	ldi	r22, 0x0A	; 10
    558e:	b3 c0       	rjmp	.+358    	; 0x56f6 <command_proc+0x292>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5590:	0e 94 c8 24 	call	0x4990	; 0x4990 <mousekey_console_help>
    5594:	ba c0       	rjmp	.+372    	; 0x570a <command_proc+0x2a6>
            break;
        case KC_Q:
        case KC_ESC:
            mousekey_param = 0;
    5596:	10 92 c7 01 	sts	0x01C7, r1
            print("\nQuit Mousekey Console\n");
    559a:	81 ea       	ldi	r24, 0xA1	; 161
    559c:	98 e0       	ldi	r25, 0x08	; 8
    559e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            print("C> ");
    55a2:	8d e9       	ldi	r24, 0x9D	; 157
    55a4:	98 e0       	ldi	r25, 0x08	; 8
    55a6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
            command_state = CONSOLE;
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	80 93 c4 01 	sts	0x01C4, r24
    55b0:	ca c0       	rjmp	.+404    	; 0x5746 <command_proc+0x2e2>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\n----- Mousekey Parameters -----\n");
    55b2:	81 e4       	ldi	r24, 0x41	; 65
    55b4:	98 e0       	ldi	r25, 0x08	; 8
    55b6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
    55ba:	8c e2       	ldi	r24, 0x2C	; 44
    55bc:	98 e0       	ldi	r25, 0x08	; 8
    55be:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    55c2:	80 91 17 01 	lds	r24, 0x0117
    55c6:	1f 92       	push	r1
    55c8:	8f 93       	push	r24
    55ca:	89 e2       	ldi	r24, 0x29	; 41
    55cc:	98 e0       	ldi	r25, 0x08	; 8
    55ce:	9f 93       	push	r25
    55d0:	8f 93       	push	r24
    55d2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    55d6:	87 e2       	ldi	r24, 0x27	; 39
    55d8:	98 e0       	ldi	r25, 0x08	; 8
    55da:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
    55de:	82 e1       	ldi	r24, 0x12	; 18
    55e0:	98 e0       	ldi	r25, 0x08	; 8
    55e2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    55e6:	80 91 16 01 	lds	r24, 0x0116
    55ea:	1f 92       	push	r1
    55ec:	8f 93       	push	r24
    55ee:	8f e0       	ldi	r24, 0x0F	; 15
    55f0:	98 e0       	ldi	r25, 0x08	; 8
    55f2:	9f 93       	push	r25
    55f4:	8f 93       	push	r24
    55f6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    55fa:	8d e0       	ldi	r24, 0x0D	; 13
    55fc:	98 e0       	ldi	r25, 0x08	; 8
    55fe:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
    5602:	8b ef       	ldi	r24, 0xFB	; 251
    5604:	97 e0       	ldi	r25, 0x07	; 7
    5606:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    560a:	80 91 15 01 	lds	r24, 0x0115
    560e:	1f 92       	push	r1
    5610:	8f 93       	push	r24
    5612:	88 ef       	ldi	r24, 0xF8	; 248
    5614:	97 e0       	ldi	r25, 0x07	; 7
    5616:	9f 93       	push	r25
    5618:	8f 93       	push	r24
    561a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    561e:	86 ef       	ldi	r24, 0xF6	; 246
    5620:	97 e0       	ldi	r25, 0x07	; 7
    5622:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
    5626:	82 ee       	ldi	r24, 0xE2	; 226
    5628:	97 e0       	ldi	r25, 0x07	; 7
    562a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    562e:	80 91 14 01 	lds	r24, 0x0114
    5632:	1f 92       	push	r1
    5634:	8f 93       	push	r24
    5636:	8f ed       	ldi	r24, 0xDF	; 223
    5638:	97 e0       	ldi	r25, 0x07	; 7
    563a:	9f 93       	push	r25
    563c:	8f 93       	push	r24
    563e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    5642:	8d ed       	ldi	r24, 0xDD	; 221
    5644:	97 e0       	ldi	r25, 0x07	; 7
    5646:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    564a:	85 ec       	ldi	r24, 0xC5	; 197
    564c:	97 e0       	ldi	r25, 0x07	; 7
    564e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    5652:	80 91 13 01 	lds	r24, 0x0113
    5656:	1f 92       	push	r1
    5658:	8f 93       	push	r24
    565a:	82 ec       	ldi	r24, 0xC2	; 194
    565c:	97 e0       	ldi	r25, 0x07	; 7
    565e:	9f 93       	push	r25
    5660:	8f 93       	push	r24
    5662:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    5666:	80 ec       	ldi	r24, 0xC0	; 192
    5668:	97 e0       	ldi	r25, 0x07	; 7
    566a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    566e:	86 ea       	ldi	r24, 0xA6	; 166
    5670:	97 e0       	ldi	r25, 0x07	; 7
    5672:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    5676:	80 91 12 01 	lds	r24, 0x0112
    567a:	1f 92       	push	r1
    567c:	8f 93       	push	r24
    567e:	83 ea       	ldi	r24, 0xA3	; 163
    5680:	97 e0       	ldi	r25, 0x07	; 7
    5682:	9f 93       	push	r25
    5684:	8f 93       	push	r24
    5686:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    568a:	81 ea       	ldi	r24, 0xA1	; 161
    568c:	97 e0       	ldi	r25, 0x07	; 7
    568e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    5692:	8d b7       	in	r24, 0x3d	; 61
    5694:	9e b7       	in	r25, 0x3e	; 62
    5696:	48 96       	adiw	r24, 0x18	; 24
    5698:	0f b6       	in	r0, 0x3f	; 63
    569a:	f8 94       	cli
    569c:	9e bf       	out	0x3e, r25	; 62
    569e:	0f be       	out	0x3f, r0	; 63
    56a0:	8d bf       	out	0x3d, r24	; 61
    56a2:	33 c0       	rjmp	.+102    	; 0x570a <command_proc+0x2a6>
    56a4:	ce 51       	subi	r28, 0x1E	; 30
    56a6:	ec 2f       	mov	r30, r28
    56a8:	f0 e0       	ldi	r31, 0x00	; 0
    56aa:	e8 5e       	subi	r30, 0xE8	; 232
    56ac:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_6:
        case KC_7:
        case KC_8:
        case KC_9:
        case KC_0:
            mousekey_param = numkey2num(code);
    56ae:	80 81       	ld	r24, Z
    56b0:	80 93 c7 01 	sts	0x01C7, r24
            print("selected parameter: "); pdec(mousekey_param); print("\n");
    56b4:	88 e8       	ldi	r24, 0x88	; 136
    56b6:	98 e0       	ldi	r25, 0x08	; 8
    56b8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    56bc:	80 91 c7 01 	lds	r24, 0x01C7
    56c0:	1f 92       	push	r1
    56c2:	8f 93       	push	r24
    56c4:	85 e8       	ldi	r24, 0x85	; 133
    56c6:	98 e0       	ldi	r25, 0x08	; 8
    56c8:	9f 93       	push	r25
    56ca:	8f 93       	push	r24
    56cc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    56d0:	83 e8       	ldi	r24, 0x83	; 131
    56d2:	98 e0       	ldi	r25, 0x08	; 8
    56d4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    56d8:	0f 90       	pop	r0
    56da:	0f 90       	pop	r0
    56dc:	0f 90       	pop	r0
    56de:	0f 90       	pop	r0
    56e0:	14 c0       	rjmp	.+40     	; 0x570a <command_proc+0x2a6>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    56e2:	61 e0       	ldi	r22, 0x01	; 1
    56e4:	03 c0       	rjmp	.+6      	; 0x56ec <command_proc+0x288>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    56e6:	61 e0       	ldi	r22, 0x01	; 1
    56e8:	06 c0       	rjmp	.+12     	; 0x56f6 <command_proc+0x292>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    56ea:	6a e0       	ldi	r22, 0x0A	; 10
    56ec:	80 91 c7 01 	lds	r24, 0x01C7
    56f0:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <mousekey_param_inc>
    56f4:	0a c0       	rjmp	.+20     	; 0x570a <command_proc+0x2a6>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    56f6:	80 91 c7 01 	lds	r24, 0x01C7
    56fa:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <mousekey_param_dec>
    56fe:	05 c0       	rjmp	.+10     	; 0x570a <command_proc+0x2a6>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default values.\n");
            break;
        default:
            print("?");
    5700:	8c e6       	ldi	r24, 0x6C	; 108
    5702:	98 e0       	ldi	r25, 0x08	; 8
    5704:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    5708:	16 c0       	rjmp	.+44     	; 0x5736 <command_proc+0x2d2>
            return false;
    }
    print("M"); pdec(mousekey_param); print("> ");
    570a:	8a e6       	ldi	r24, 0x6A	; 106
    570c:	98 e0       	ldi	r25, 0x08	; 8
    570e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    5712:	80 91 c7 01 	lds	r24, 0x01C7
    5716:	1f 92       	push	r1
    5718:	8f 93       	push	r24
    571a:	87 e6       	ldi	r24, 0x67	; 103
    571c:	98 e0       	ldi	r25, 0x08	; 8
    571e:	9f 93       	push	r25
    5720:	8f 93       	push	r24
    5722:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__xprintf>
    5726:	84 e6       	ldi	r24, 0x64	; 100
    5728:	98 e0       	ldi	r25, 0x08	; 8
    572a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xputs>
    572e:	0f 90       	pop	r0
    5730:	0f 90       	pop	r0
    5732:	0f 90       	pop	r0
    5734:	0f 90       	pop	r0
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5736:	81 e0       	ldi	r24, 0x01	; 1
    5738:	06 c0       	rjmp	.+12     	; 0x5746 <command_proc+0x2e2>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    573a:	10 92 c4 01 	sts	0x01C4, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    573e:	80 e0       	ldi	r24, 0x00	; 0
    5740:	02 c0       	rjmp	.+4      	; 0x5746 <command_proc+0x2e2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5742:	80 e0       	ldi	r24, 0x00	; 0
    5744:	e9 ce       	rjmp	.-558    	; 0x5518 <command_proc+0xb4>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    5746:	cf 91       	pop	r28
    5748:	08 95       	ret

0000574a <sleep_led_init>:

void sleep_led_init(void)
{
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= _BV(WGM12);
    574a:	e1 e8       	ldi	r30, 0x81	; 129
    574c:	f0 e0       	ldi	r31, 0x00	; 0
    574e:	80 81       	ld	r24, Z
    5750:	88 60       	ori	r24, 0x08	; 8
    5752:	80 83       	st	Z, r24
    /* Clock selelct: clk/1 */
    TCCR1B |= _BV(CS10);
    5754:	80 81       	ld	r24, Z
    5756:	81 60       	ori	r24, 0x01	; 1
    5758:	80 83       	st	Z, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
    575a:	8f b7       	in	r24, 0x3f	; 63
    cli();
    575c:	f8 94       	cli
    OCR1AH = (SLEEP_LED_TIMER_TOP>>8)&0xff;
    575e:	93 e0       	ldi	r25, 0x03	; 3
    5760:	90 93 89 00 	sts	0x0089, r25
    OCR1AL = SLEEP_LED_TIMER_TOP&0xff;
    5764:	90 ed       	ldi	r25, 0xD0	; 208
    5766:	90 93 88 00 	sts	0x0088, r25
    SREG = sreg;
    576a:	8f bf       	out	0x3f, r24	; 63
    576c:	08 95       	ret

0000576e <sleep_led_enable>:
}

void sleep_led_enable(void)
{
    /* Enable Compare Match Interrupt */
    TIMSK1 |= _BV(OCIE1A);
    576e:	ef e6       	ldi	r30, 0x6F	; 111
    5770:	f0 e0       	ldi	r31, 0x00	; 0
    5772:	80 81       	ld	r24, Z
    5774:	82 60       	ori	r24, 0x02	; 2
    5776:	80 83       	st	Z, r24
    5778:	08 95       	ret

0000577a <sleep_led_disable>:
}

void sleep_led_disable(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 &= ~_BV(OCIE1A);
    577a:	ef e6       	ldi	r30, 0x6F	; 111
    577c:	f0 e0       	ldi	r31, 0x00	; 0
    577e:	80 81       	ld	r24, Z
    5780:	8d 7f       	andi	r24, 0xFD	; 253
    5782:	80 83       	st	Z, r24
    5784:	08 95       	ret

00005786 <sleep_led_toggle>:
}

void sleep_led_toggle(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 ^= _BV(OCIE1A);
    5786:	ef e6       	ldi	r30, 0x6F	; 111
    5788:	f0 e0       	ldi	r31, 0x00	; 0
    578a:	80 81       	ld	r24, Z
    578c:	92 e0       	ldi	r25, 0x02	; 2
    578e:	89 27       	eor	r24, r25
    5790:	80 83       	st	Z, r24
    5792:	08 95       	ret

00005794 <__vector_17>:
255, 252, 245, 233, 218, 199, 179, 157, 135, 113, 93, 74, 58, 44, 32, 23,
15, 10, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

ISR(TIMER1_COMPA_vect)
{
    5794:	1f 92       	push	r1
    5796:	0f 92       	push	r0
    5798:	0f b6       	in	r0, 0x3f	; 63
    579a:	0f 92       	push	r0
    579c:	11 24       	eor	r1, r1
    579e:	2f 93       	push	r18
    57a0:	3f 93       	push	r19
    57a2:	4f 93       	push	r20
    57a4:	5f 93       	push	r21
    57a6:	6f 93       	push	r22
    57a8:	7f 93       	push	r23
    57aa:	8f 93       	push	r24
    57ac:	9f 93       	push	r25
    57ae:	af 93       	push	r26
    57b0:	bf 93       	push	r27
    57b2:	ef 93       	push	r30
    57b4:	ff 93       	push	r31
            uint8_t duration:2;
            uint8_t index:6;
        } pwm;
    } timer = { .row = 0 };

    timer.row++;
    57b6:	80 91 c8 01 	lds	r24, 0x01C8
    57ba:	90 91 c9 01 	lds	r25, 0x01C9
    57be:	01 96       	adiw	r24, 0x01	; 1
    57c0:	90 93 c9 01 	sts	0x01C9, r25
    57c4:	80 93 c8 01 	sts	0x01C8, r24
    
    // LED on
    if (timer.pwm.count == 0) {
    57c8:	81 11       	cpse	r24, r1
    57ca:	03 c0       	rjmp	.+6      	; 0x57d2 <__vector_17+0x3e>
        led_set(1<<USB_LED_CAPS_LOCK);
    57cc:	82 e0       	ldi	r24, 0x02	; 2
    57ce:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <led_set>
    }
    // LED off
    if (timer.pwm.count == pgm_read_byte(&breathing_table[timer.pwm.index])) {
    57d2:	e0 91 c9 01 	lds	r30, 0x01C9
    57d6:	e6 95       	lsr	r30
    57d8:	e6 95       	lsr	r30
    57da:	f0 e0       	ldi	r31, 0x00	; 0
    57dc:	e0 54       	subi	r30, 0x40	; 64
    57de:	fe 4e       	sbci	r31, 0xEE	; 238
    57e0:	e4 91       	lpm	r30, Z
    57e2:	80 91 c8 01 	lds	r24, 0x01C8
    57e6:	8e 13       	cpse	r24, r30
    57e8:	03 c0       	rjmp	.+6      	; 0x57f0 <__vector_17+0x5c>
        led_set(0);
    57ea:	80 e0       	ldi	r24, 0x00	; 0
    57ec:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <led_set>
    }
}
    57f0:	ff 91       	pop	r31
    57f2:	ef 91       	pop	r30
    57f4:	bf 91       	pop	r27
    57f6:	af 91       	pop	r26
    57f8:	9f 91       	pop	r25
    57fa:	8f 91       	pop	r24
    57fc:	7f 91       	pop	r23
    57fe:	6f 91       	pop	r22
    5800:	5f 91       	pop	r21
    5802:	4f 91       	pop	r20
    5804:	3f 91       	pop	r19
    5806:	2f 91       	pop	r18
    5808:	0f 90       	pop	r0
    580a:	0f be       	out	0x3f, r0	; 63
    580c:	0f 90       	pop	r0
    580e:	1f 90       	pop	r1
    5810:	18 95       	reti

00005812 <__fixsfsi>:
    5812:	04 d0       	rcall	.+8      	; 0x581c <__fixunssfsi>
    5814:	68 94       	set
    5816:	b1 11       	cpse	r27, r1
    5818:	8d c0       	rjmp	.+282    	; 0x5934 <__fp_szero>
    581a:	08 95       	ret

0000581c <__fixunssfsi>:
    581c:	70 d0       	rcall	.+224    	; 0x58fe <__fp_splitA>
    581e:	88 f0       	brcs	.+34     	; 0x5842 <__fixunssfsi+0x26>
    5820:	9f 57       	subi	r25, 0x7F	; 127
    5822:	90 f0       	brcs	.+36     	; 0x5848 <__fixunssfsi+0x2c>
    5824:	b9 2f       	mov	r27, r25
    5826:	99 27       	eor	r25, r25
    5828:	b7 51       	subi	r27, 0x17	; 23
    582a:	a0 f0       	brcs	.+40     	; 0x5854 <__fixunssfsi+0x38>
    582c:	d1 f0       	breq	.+52     	; 0x5862 <__fixunssfsi+0x46>
    582e:	66 0f       	add	r22, r22
    5830:	77 1f       	adc	r23, r23
    5832:	88 1f       	adc	r24, r24
    5834:	99 1f       	adc	r25, r25
    5836:	1a f0       	brmi	.+6      	; 0x583e <__fixunssfsi+0x22>
    5838:	ba 95       	dec	r27
    583a:	c9 f7       	brne	.-14     	; 0x582e <__fixunssfsi+0x12>
    583c:	12 c0       	rjmp	.+36     	; 0x5862 <__fixunssfsi+0x46>
    583e:	b1 30       	cpi	r27, 0x01	; 1
    5840:	81 f0       	breq	.+32     	; 0x5862 <__fixunssfsi+0x46>
    5842:	77 d0       	rcall	.+238    	; 0x5932 <__fp_zero>
    5844:	b1 e0       	ldi	r27, 0x01	; 1
    5846:	08 95       	ret
    5848:	74 c0       	rjmp	.+232    	; 0x5932 <__fp_zero>
    584a:	67 2f       	mov	r22, r23
    584c:	78 2f       	mov	r23, r24
    584e:	88 27       	eor	r24, r24
    5850:	b8 5f       	subi	r27, 0xF8	; 248
    5852:	39 f0       	breq	.+14     	; 0x5862 <__fixunssfsi+0x46>
    5854:	b9 3f       	cpi	r27, 0xF9	; 249
    5856:	cc f3       	brlt	.-14     	; 0x584a <__fixunssfsi+0x2e>
    5858:	86 95       	lsr	r24
    585a:	77 95       	ror	r23
    585c:	67 95       	ror	r22
    585e:	b3 95       	inc	r27
    5860:	d9 f7       	brne	.-10     	; 0x5858 <__fixunssfsi+0x3c>
    5862:	3e f4       	brtc	.+14     	; 0x5872 <__fixunssfsi+0x56>
    5864:	90 95       	com	r25
    5866:	80 95       	com	r24
    5868:	70 95       	com	r23
    586a:	61 95       	neg	r22
    586c:	7f 4f       	sbci	r23, 0xFF	; 255
    586e:	8f 4f       	sbci	r24, 0xFF	; 255
    5870:	9f 4f       	sbci	r25, 0xFF	; 255
    5872:	08 95       	ret

00005874 <__floatunsisf>:
    5874:	e8 94       	clt
    5876:	09 c0       	rjmp	.+18     	; 0x588a <__floatsisf+0x12>

00005878 <__floatsisf>:
    5878:	97 fb       	bst	r25, 7
    587a:	3e f4       	brtc	.+14     	; 0x588a <__floatsisf+0x12>
    587c:	90 95       	com	r25
    587e:	80 95       	com	r24
    5880:	70 95       	com	r23
    5882:	61 95       	neg	r22
    5884:	7f 4f       	sbci	r23, 0xFF	; 255
    5886:	8f 4f       	sbci	r24, 0xFF	; 255
    5888:	9f 4f       	sbci	r25, 0xFF	; 255
    588a:	99 23       	and	r25, r25
    588c:	a9 f0       	breq	.+42     	; 0x58b8 <__floatsisf+0x40>
    588e:	f9 2f       	mov	r31, r25
    5890:	96 e9       	ldi	r25, 0x96	; 150
    5892:	bb 27       	eor	r27, r27
    5894:	93 95       	inc	r25
    5896:	f6 95       	lsr	r31
    5898:	87 95       	ror	r24
    589a:	77 95       	ror	r23
    589c:	67 95       	ror	r22
    589e:	b7 95       	ror	r27
    58a0:	f1 11       	cpse	r31, r1
    58a2:	f8 cf       	rjmp	.-16     	; 0x5894 <__floatsisf+0x1c>
    58a4:	fa f4       	brpl	.+62     	; 0x58e4 <__floatsisf+0x6c>
    58a6:	bb 0f       	add	r27, r27
    58a8:	11 f4       	brne	.+4      	; 0x58ae <__floatsisf+0x36>
    58aa:	60 ff       	sbrs	r22, 0
    58ac:	1b c0       	rjmp	.+54     	; 0x58e4 <__floatsisf+0x6c>
    58ae:	6f 5f       	subi	r22, 0xFF	; 255
    58b0:	7f 4f       	sbci	r23, 0xFF	; 255
    58b2:	8f 4f       	sbci	r24, 0xFF	; 255
    58b4:	9f 4f       	sbci	r25, 0xFF	; 255
    58b6:	16 c0       	rjmp	.+44     	; 0x58e4 <__floatsisf+0x6c>
    58b8:	88 23       	and	r24, r24
    58ba:	11 f0       	breq	.+4      	; 0x58c0 <__floatsisf+0x48>
    58bc:	96 e9       	ldi	r25, 0x96	; 150
    58be:	11 c0       	rjmp	.+34     	; 0x58e2 <__floatsisf+0x6a>
    58c0:	77 23       	and	r23, r23
    58c2:	21 f0       	breq	.+8      	; 0x58cc <__floatsisf+0x54>
    58c4:	9e e8       	ldi	r25, 0x8E	; 142
    58c6:	87 2f       	mov	r24, r23
    58c8:	76 2f       	mov	r23, r22
    58ca:	05 c0       	rjmp	.+10     	; 0x58d6 <__floatsisf+0x5e>
    58cc:	66 23       	and	r22, r22
    58ce:	71 f0       	breq	.+28     	; 0x58ec <__floatsisf+0x74>
    58d0:	96 e8       	ldi	r25, 0x86	; 134
    58d2:	86 2f       	mov	r24, r22
    58d4:	70 e0       	ldi	r23, 0x00	; 0
    58d6:	60 e0       	ldi	r22, 0x00	; 0
    58d8:	2a f0       	brmi	.+10     	; 0x58e4 <__floatsisf+0x6c>
    58da:	9a 95       	dec	r25
    58dc:	66 0f       	add	r22, r22
    58de:	77 1f       	adc	r23, r23
    58e0:	88 1f       	adc	r24, r24
    58e2:	da f7       	brpl	.-10     	; 0x58da <__floatsisf+0x62>
    58e4:	88 0f       	add	r24, r24
    58e6:	96 95       	lsr	r25
    58e8:	87 95       	ror	r24
    58ea:	97 f9       	bld	r25, 7
    58ec:	08 95       	ret

000058ee <__fp_split3>:
    58ee:	57 fd       	sbrc	r21, 7
    58f0:	90 58       	subi	r25, 0x80	; 128
    58f2:	44 0f       	add	r20, r20
    58f4:	55 1f       	adc	r21, r21
    58f6:	59 f0       	breq	.+22     	; 0x590e <__fp_splitA+0x10>
    58f8:	5f 3f       	cpi	r21, 0xFF	; 255
    58fa:	71 f0       	breq	.+28     	; 0x5918 <__fp_splitA+0x1a>
    58fc:	47 95       	ror	r20

000058fe <__fp_splitA>:
    58fe:	88 0f       	add	r24, r24
    5900:	97 fb       	bst	r25, 7
    5902:	99 1f       	adc	r25, r25
    5904:	61 f0       	breq	.+24     	; 0x591e <__fp_splitA+0x20>
    5906:	9f 3f       	cpi	r25, 0xFF	; 255
    5908:	79 f0       	breq	.+30     	; 0x5928 <__fp_splitA+0x2a>
    590a:	87 95       	ror	r24
    590c:	08 95       	ret
    590e:	12 16       	cp	r1, r18
    5910:	13 06       	cpc	r1, r19
    5912:	14 06       	cpc	r1, r20
    5914:	55 1f       	adc	r21, r21
    5916:	f2 cf       	rjmp	.-28     	; 0x58fc <__fp_split3+0xe>
    5918:	46 95       	lsr	r20
    591a:	f1 df       	rcall	.-30     	; 0x58fe <__fp_splitA>
    591c:	08 c0       	rjmp	.+16     	; 0x592e <__fp_splitA+0x30>
    591e:	16 16       	cp	r1, r22
    5920:	17 06       	cpc	r1, r23
    5922:	18 06       	cpc	r1, r24
    5924:	99 1f       	adc	r25, r25
    5926:	f1 cf       	rjmp	.-30     	; 0x590a <__fp_splitA+0xc>
    5928:	86 95       	lsr	r24
    592a:	71 05       	cpc	r23, r1
    592c:	61 05       	cpc	r22, r1
    592e:	08 94       	sec
    5930:	08 95       	ret

00005932 <__fp_zero>:
    5932:	e8 94       	clt

00005934 <__fp_szero>:
    5934:	bb 27       	eor	r27, r27
    5936:	66 27       	eor	r22, r22
    5938:	77 27       	eor	r23, r23
    593a:	cb 01       	movw	r24, r22
    593c:	97 f9       	bld	r25, 7
    593e:	08 95       	ret

00005940 <__mulsf3>:
    5940:	0b d0       	rcall	.+22     	; 0x5958 <__mulsf3x>
    5942:	78 c0       	rjmp	.+240    	; 0x5a34 <__fp_round>
    5944:	69 d0       	rcall	.+210    	; 0x5a18 <__fp_pscA>
    5946:	28 f0       	brcs	.+10     	; 0x5952 <__mulsf3+0x12>
    5948:	6e d0       	rcall	.+220    	; 0x5a26 <__fp_pscB>
    594a:	18 f0       	brcs	.+6      	; 0x5952 <__mulsf3+0x12>
    594c:	95 23       	and	r25, r21
    594e:	09 f0       	breq	.+2      	; 0x5952 <__mulsf3+0x12>
    5950:	5a c0       	rjmp	.+180    	; 0x5a06 <__fp_inf>
    5952:	5f c0       	rjmp	.+190    	; 0x5a12 <__fp_nan>
    5954:	11 24       	eor	r1, r1
    5956:	ee cf       	rjmp	.-36     	; 0x5934 <__fp_szero>

00005958 <__mulsf3x>:
    5958:	ca df       	rcall	.-108    	; 0x58ee <__fp_split3>
    595a:	a0 f3       	brcs	.-24     	; 0x5944 <__mulsf3+0x4>

0000595c <__mulsf3_pse>:
    595c:	95 9f       	mul	r25, r21
    595e:	d1 f3       	breq	.-12     	; 0x5954 <__mulsf3+0x14>
    5960:	95 0f       	add	r25, r21
    5962:	50 e0       	ldi	r21, 0x00	; 0
    5964:	55 1f       	adc	r21, r21
    5966:	62 9f       	mul	r22, r18
    5968:	f0 01       	movw	r30, r0
    596a:	72 9f       	mul	r23, r18
    596c:	bb 27       	eor	r27, r27
    596e:	f0 0d       	add	r31, r0
    5970:	b1 1d       	adc	r27, r1
    5972:	63 9f       	mul	r22, r19
    5974:	aa 27       	eor	r26, r26
    5976:	f0 0d       	add	r31, r0
    5978:	b1 1d       	adc	r27, r1
    597a:	aa 1f       	adc	r26, r26
    597c:	64 9f       	mul	r22, r20
    597e:	66 27       	eor	r22, r22
    5980:	b0 0d       	add	r27, r0
    5982:	a1 1d       	adc	r26, r1
    5984:	66 1f       	adc	r22, r22
    5986:	82 9f       	mul	r24, r18
    5988:	22 27       	eor	r18, r18
    598a:	b0 0d       	add	r27, r0
    598c:	a1 1d       	adc	r26, r1
    598e:	62 1f       	adc	r22, r18
    5990:	73 9f       	mul	r23, r19
    5992:	b0 0d       	add	r27, r0
    5994:	a1 1d       	adc	r26, r1
    5996:	62 1f       	adc	r22, r18
    5998:	83 9f       	mul	r24, r19
    599a:	a0 0d       	add	r26, r0
    599c:	61 1d       	adc	r22, r1
    599e:	22 1f       	adc	r18, r18
    59a0:	74 9f       	mul	r23, r20
    59a2:	33 27       	eor	r19, r19
    59a4:	a0 0d       	add	r26, r0
    59a6:	61 1d       	adc	r22, r1
    59a8:	23 1f       	adc	r18, r19
    59aa:	84 9f       	mul	r24, r20
    59ac:	60 0d       	add	r22, r0
    59ae:	21 1d       	adc	r18, r1
    59b0:	82 2f       	mov	r24, r18
    59b2:	76 2f       	mov	r23, r22
    59b4:	6a 2f       	mov	r22, r26
    59b6:	11 24       	eor	r1, r1
    59b8:	9f 57       	subi	r25, 0x7F	; 127
    59ba:	50 40       	sbci	r21, 0x00	; 0
    59bc:	8a f0       	brmi	.+34     	; 0x59e0 <__mulsf3_pse+0x84>
    59be:	e1 f0       	breq	.+56     	; 0x59f8 <__mulsf3_pse+0x9c>
    59c0:	88 23       	and	r24, r24
    59c2:	4a f0       	brmi	.+18     	; 0x59d6 <__mulsf3_pse+0x7a>
    59c4:	ee 0f       	add	r30, r30
    59c6:	ff 1f       	adc	r31, r31
    59c8:	bb 1f       	adc	r27, r27
    59ca:	66 1f       	adc	r22, r22
    59cc:	77 1f       	adc	r23, r23
    59ce:	88 1f       	adc	r24, r24
    59d0:	91 50       	subi	r25, 0x01	; 1
    59d2:	50 40       	sbci	r21, 0x00	; 0
    59d4:	a9 f7       	brne	.-22     	; 0x59c0 <__mulsf3_pse+0x64>
    59d6:	9e 3f       	cpi	r25, 0xFE	; 254
    59d8:	51 05       	cpc	r21, r1
    59da:	70 f0       	brcs	.+28     	; 0x59f8 <__mulsf3_pse+0x9c>
    59dc:	14 c0       	rjmp	.+40     	; 0x5a06 <__fp_inf>
    59de:	aa cf       	rjmp	.-172    	; 0x5934 <__fp_szero>
    59e0:	5f 3f       	cpi	r21, 0xFF	; 255
    59e2:	ec f3       	brlt	.-6      	; 0x59de <__mulsf3_pse+0x82>
    59e4:	98 3e       	cpi	r25, 0xE8	; 232
    59e6:	dc f3       	brlt	.-10     	; 0x59de <__mulsf3_pse+0x82>
    59e8:	86 95       	lsr	r24
    59ea:	77 95       	ror	r23
    59ec:	67 95       	ror	r22
    59ee:	b7 95       	ror	r27
    59f0:	f7 95       	ror	r31
    59f2:	e7 95       	ror	r30
    59f4:	9f 5f       	subi	r25, 0xFF	; 255
    59f6:	c1 f7       	brne	.-16     	; 0x59e8 <__mulsf3_pse+0x8c>
    59f8:	fe 2b       	or	r31, r30
    59fa:	88 0f       	add	r24, r24
    59fc:	91 1d       	adc	r25, r1
    59fe:	96 95       	lsr	r25
    5a00:	87 95       	ror	r24
    5a02:	97 f9       	bld	r25, 7
    5a04:	08 95       	ret

00005a06 <__fp_inf>:
    5a06:	97 f9       	bld	r25, 7
    5a08:	9f 67       	ori	r25, 0x7F	; 127
    5a0a:	80 e8       	ldi	r24, 0x80	; 128
    5a0c:	70 e0       	ldi	r23, 0x00	; 0
    5a0e:	60 e0       	ldi	r22, 0x00	; 0
    5a10:	08 95       	ret

00005a12 <__fp_nan>:
    5a12:	9f ef       	ldi	r25, 0xFF	; 255
    5a14:	80 ec       	ldi	r24, 0xC0	; 192
    5a16:	08 95       	ret

00005a18 <__fp_pscA>:
    5a18:	00 24       	eor	r0, r0
    5a1a:	0a 94       	dec	r0
    5a1c:	16 16       	cp	r1, r22
    5a1e:	17 06       	cpc	r1, r23
    5a20:	18 06       	cpc	r1, r24
    5a22:	09 06       	cpc	r0, r25
    5a24:	08 95       	ret

00005a26 <__fp_pscB>:
    5a26:	00 24       	eor	r0, r0
    5a28:	0a 94       	dec	r0
    5a2a:	12 16       	cp	r1, r18
    5a2c:	13 06       	cpc	r1, r19
    5a2e:	14 06       	cpc	r1, r20
    5a30:	05 06       	cpc	r0, r21
    5a32:	08 95       	ret

00005a34 <__fp_round>:
    5a34:	09 2e       	mov	r0, r25
    5a36:	03 94       	inc	r0
    5a38:	00 0c       	add	r0, r0
    5a3a:	11 f4       	brne	.+4      	; 0x5a40 <__fp_round+0xc>
    5a3c:	88 23       	and	r24, r24
    5a3e:	52 f0       	brmi	.+20     	; 0x5a54 <__fp_round+0x20>
    5a40:	bb 0f       	add	r27, r27
    5a42:	40 f4       	brcc	.+16     	; 0x5a54 <__fp_round+0x20>
    5a44:	bf 2b       	or	r27, r31
    5a46:	11 f4       	brne	.+4      	; 0x5a4c <__fp_round+0x18>
    5a48:	60 ff       	sbrs	r22, 0
    5a4a:	04 c0       	rjmp	.+8      	; 0x5a54 <__fp_round+0x20>
    5a4c:	6f 5f       	subi	r22, 0xFF	; 255
    5a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a50:	8f 4f       	sbci	r24, 0xFF	; 255
    5a52:	9f 4f       	sbci	r25, 0xFF	; 255
    5a54:	08 95       	ret

00005a56 <__divmodhi4>:
    5a56:	97 fb       	bst	r25, 7
    5a58:	07 2e       	mov	r0, r23
    5a5a:	16 f4       	brtc	.+4      	; 0x5a60 <__divmodhi4+0xa>
    5a5c:	00 94       	com	r0
    5a5e:	07 d0       	rcall	.+14     	; 0x5a6e <__divmodhi4_neg1>
    5a60:	77 fd       	sbrc	r23, 7
    5a62:	09 d0       	rcall	.+18     	; 0x5a76 <__divmodhi4_neg2>
    5a64:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <__udivmodhi4>
    5a68:	07 fc       	sbrc	r0, 7
    5a6a:	05 d0       	rcall	.+10     	; 0x5a76 <__divmodhi4_neg2>
    5a6c:	3e f4       	brtc	.+14     	; 0x5a7c <__divmodhi4_exit>

00005a6e <__divmodhi4_neg1>:
    5a6e:	90 95       	com	r25
    5a70:	81 95       	neg	r24
    5a72:	9f 4f       	sbci	r25, 0xFF	; 255
    5a74:	08 95       	ret

00005a76 <__divmodhi4_neg2>:
    5a76:	70 95       	com	r23
    5a78:	61 95       	neg	r22
    5a7a:	7f 4f       	sbci	r23, 0xFF	; 255

00005a7c <__divmodhi4_exit>:
    5a7c:	08 95       	ret

00005a7e <__tablejump2__>:
    5a7e:	ee 0f       	add	r30, r30
    5a80:	ff 1f       	adc	r31, r31

00005a82 <__tablejump__>:
    5a82:	05 90       	lpm	r0, Z+
    5a84:	f4 91       	lpm	r31, Z
    5a86:	e0 2d       	mov	r30, r0
    5a88:	09 94       	ijmp

00005a8a <__udivmodhi4>:
    5a8a:	aa 1b       	sub	r26, r26
    5a8c:	bb 1b       	sub	r27, r27
    5a8e:	51 e1       	ldi	r21, 0x11	; 17
    5a90:	07 c0       	rjmp	.+14     	; 0x5aa0 <__udivmodhi4_ep>

00005a92 <__udivmodhi4_loop>:
    5a92:	aa 1f       	adc	r26, r26
    5a94:	bb 1f       	adc	r27, r27
    5a96:	a6 17       	cp	r26, r22
    5a98:	b7 07       	cpc	r27, r23
    5a9a:	10 f0       	brcs	.+4      	; 0x5aa0 <__udivmodhi4_ep>
    5a9c:	a6 1b       	sub	r26, r22
    5a9e:	b7 0b       	sbc	r27, r23

00005aa0 <__udivmodhi4_ep>:
    5aa0:	88 1f       	adc	r24, r24
    5aa2:	99 1f       	adc	r25, r25
    5aa4:	5a 95       	dec	r21
    5aa6:	a9 f7       	brne	.-22     	; 0x5a92 <__udivmodhi4_loop>
    5aa8:	80 95       	com	r24
    5aaa:	90 95       	com	r25
    5aac:	bc 01       	movw	r22, r24
    5aae:	cd 01       	movw	r24, r26
    5ab0:	08 95       	ret

00005ab2 <__eerd_byte_m32u4>:
    5ab2:	f9 99       	sbic	0x1f, 1	; 31
    5ab4:	fe cf       	rjmp	.-4      	; 0x5ab2 <__eerd_byte_m32u4>
    5ab6:	92 bd       	out	0x22, r25	; 34
    5ab8:	81 bd       	out	0x21, r24	; 33
    5aba:	f8 9a       	sbi	0x1f, 0	; 31
    5abc:	99 27       	eor	r25, r25
    5abe:	80 b5       	in	r24, 0x20	; 32
    5ac0:	08 95       	ret

00005ac2 <__eerd_word_m32u4>:
    5ac2:	a8 e1       	ldi	r26, 0x18	; 24
    5ac4:	b0 e0       	ldi	r27, 0x00	; 0
    5ac6:	42 e0       	ldi	r20, 0x02	; 2
    5ac8:	50 e0       	ldi	r21, 0x00	; 0
    5aca:	0c 94 7c 2d 	jmp	0x5af8	; 0x5af8 <__eerd_blraw_m32u4>

00005ace <__eewr_byte_m32u4>:
    5ace:	26 2f       	mov	r18, r22

00005ad0 <__eewr_r18_m32u4>:
    5ad0:	f9 99       	sbic	0x1f, 1	; 31
    5ad2:	fe cf       	rjmp	.-4      	; 0x5ad0 <__eewr_r18_m32u4>
    5ad4:	1f ba       	out	0x1f, r1	; 31
    5ad6:	92 bd       	out	0x22, r25	; 34
    5ad8:	81 bd       	out	0x21, r24	; 33
    5ada:	20 bd       	out	0x20, r18	; 32
    5adc:	0f b6       	in	r0, 0x3f	; 63
    5ade:	f8 94       	cli
    5ae0:	fa 9a       	sbi	0x1f, 2	; 31
    5ae2:	f9 9a       	sbi	0x1f, 1	; 31
    5ae4:	0f be       	out	0x3f, r0	; 63
    5ae6:	01 96       	adiw	r24, 0x01	; 1
    5ae8:	08 95       	ret

00005aea <__eewr_word_m32u4>:
    5aea:	0e 94 67 2d 	call	0x5ace	; 0x5ace <__eewr_byte_m32u4>
    5aee:	27 2f       	mov	r18, r23
    5af0:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__eewr_r18_m32u4>

00005af4 <__eerd_block_m32u4>:
    5af4:	dc 01       	movw	r26, r24
    5af6:	cb 01       	movw	r24, r22

00005af8 <__eerd_blraw_m32u4>:
    5af8:	fc 01       	movw	r30, r24
    5afa:	f9 99       	sbic	0x1f, 1	; 31
    5afc:	fe cf       	rjmp	.-4      	; 0x5afa <__eerd_blraw_m32u4+0x2>
    5afe:	06 c0       	rjmp	.+12     	; 0x5b0c <__eerd_blraw_m32u4+0x14>
    5b00:	f2 bd       	out	0x22, r31	; 34
    5b02:	e1 bd       	out	0x21, r30	; 33
    5b04:	f8 9a       	sbi	0x1f, 0	; 31
    5b06:	31 96       	adiw	r30, 0x01	; 1
    5b08:	00 b4       	in	r0, 0x20	; 32
    5b0a:	0d 92       	st	X+, r0
    5b0c:	41 50       	subi	r20, 0x01	; 1
    5b0e:	50 40       	sbci	r21, 0x00	; 0
    5b10:	b8 f7       	brcc	.-18     	; 0x5b00 <__eerd_blraw_m32u4+0x8>
    5b12:	08 95       	ret

00005b14 <_exit>:
    5b14:	f8 94       	cli

00005b16 <__stop_program>:
    5b16:	ff cf       	rjmp	.-2      	; 0x5b16 <__stop_program>
